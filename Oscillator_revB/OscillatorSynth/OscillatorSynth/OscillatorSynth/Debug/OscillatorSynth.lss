
OscillatorSynth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00003738  000037cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003738  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000378  0080011a  0080011a  000037e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a5ce  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002673  00000000  00000000  0000e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d0a  00000000  00000000  00010901  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c1c  00000000  00000000  0001360c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a8e  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f0c  00000000  00000000  00017cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__ctors_end>
       4:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
       8:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
       c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      10:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      14:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      18:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      1c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      20:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      24:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      28:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      2c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      30:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      34:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__vector_13>
      38:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_14>
      3c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      40:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__vector_16>
      44:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      48:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__vector_18>
      4c:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__vector_19>
      50:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      54:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__vector_21>
      58:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      5c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>
      60:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__vector_24>
      64:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	80 80       	ld	r8, Z
      6a:	80 80       	ld	r8, Z
      6c:	80 80       	ld	r8, Z
      6e:	80 80       	ld	r8, Z
      70:	81 81       	ldd	r24, Z+1	; 0x01
      72:	81 81       	ldd	r24, Z+1	; 0x01
      74:	81 81       	ldd	r24, Z+1	; 0x01
      76:	81 81       	ldd	r24, Z+1	; 0x01
      78:	82 82       	std	Z+2, r8	; 0x02
      7a:	82 82       	std	Z+2, r8	; 0x02
      7c:	82 82       	std	Z+2, r8	; 0x02
      7e:	82 82       	std	Z+2, r8	; 0x02
      80:	82 83       	std	Z+2, r24	; 0x02
      82:	83 83       	std	Z+3, r24	; 0x03
      84:	83 83       	std	Z+3, r24	; 0x03
      86:	83 83       	std	Z+3, r24	; 0x03
      88:	84 84       	ldd	r8, Z+12	; 0x0c
      8a:	84 84       	ldd	r8, Z+12	; 0x0c
      8c:	84 84       	ldd	r8, Z+12	; 0x0c
      8e:	84 84       	ldd	r8, Z+12	; 0x0c
      90:	84 85       	ldd	r24, Z+12	; 0x0c
      92:	85 85       	ldd	r24, Z+13	; 0x0d
      94:	85 85       	ldd	r24, Z+13	; 0x0d
      96:	85 85       	ldd	r24, Z+13	; 0x0d
      98:	86 86       	std	Z+14, r8	; 0x0e
      9a:	86 86       	std	Z+14, r8	; 0x0e
      9c:	86 86       	std	Z+14, r8	; 0x0e
      9e:	86 86       	std	Z+14, r8	; 0x0e
      a0:	87 87       	std	Z+15, r24	; 0x0f
      a2:	87 87       	std	Z+15, r24	; 0x0f
      a4:	87 87       	std	Z+15, r24	; 0x0f
      a6:	87 87       	std	Z+15, r24	; 0x0f
      a8:	88 88       	ldd	r8, Y+16	; 0x10
      aa:	88 88       	ldd	r8, Y+16	; 0x10
      ac:	88 88       	ldd	r8, Y+16	; 0x10
      ae:	88 88       	ldd	r8, Y+16	; 0x10
      b0:	89 89       	ldd	r24, Y+17	; 0x11
      b2:	89 89       	ldd	r24, Y+17	; 0x11
      b4:	89 89       	ldd	r24, Y+17	; 0x11
      b6:	89 89       	ldd	r24, Y+17	; 0x11
      b8:	8a 8a       	std	Y+18, r8	; 0x12
      ba:	8a 8a       	std	Y+18, r8	; 0x12
      bc:	8a 8a       	std	Y+18, r8	; 0x12
      be:	8a 8a       	std	Y+18, r8	; 0x12
      c0:	8a 8b       	std	Y+18, r24	; 0x12
      c2:	8b 8b       	std	Y+19, r24	; 0x13
      c4:	8b 8b       	std	Y+19, r24	; 0x13
      c6:	8b 8b       	std	Y+19, r24	; 0x13
      c8:	8b 8c       	ldd	r8, Y+27	; 0x1b
      ca:	8c 8c       	ldd	r8, Y+28	; 0x1c
      cc:	8c 8c       	ldd	r8, Y+28	; 0x1c
      ce:	8c 8c       	ldd	r8, Y+28	; 0x1c
      d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
      d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
      d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
      d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
      d8:	8d 8e       	std	Y+29, r8	; 0x1d
      da:	8e 8e       	std	Y+30, r8	; 0x1e
      dc:	8e 8e       	std	Y+30, r8	; 0x1e
      de:	8e 8e       	std	Y+30, r8	; 0x1e
      e0:	8f 8f       	std	Y+31, r24	; 0x1f
      e2:	8f 8f       	std	Y+31, r24	; 0x1f
      e4:	8f 8f       	std	Y+31, r24	; 0x1f
      e6:	8f 8f       	std	Y+31, r24	; 0x1f
      e8:	90 90 90 90 	lds	r9, 0x9090	; 0x809090 <__bss_end+0x8bfe>
      ec:	90 90 90 90 	lds	r9, 0x9090	; 0x809090 <__bss_end+0x8bfe>
      f0:	91 91       	ld	r25, Z+
      f2:	91 91       	ld	r25, Z+
      f4:	91 91       	ld	r25, Z+
      f6:	91 91       	ld	r25, Z+
      f8:	92 92       	st	-Z, r9
      fa:	92 92       	st	-Z, r9
      fc:	92 92       	st	-Z, r9
      fe:	92 92       	st	-Z, r9
     100:	93 93       	.word	0x9393	; ????
     102:	93 93       	.word	0x9393	; ????
     104:	93 93       	.word	0x9393	; ????
     106:	93 93       	.word	0x9393	; ????
     108:	94 94       	.word	0x9494	; ????
     10a:	94 94       	.word	0x9494	; ????
     10c:	94 94       	.word	0x9494	; ????
     10e:	94 94       	.word	0x9494	; ????
     110:	94 95       	.word	0x9594	; ????
     112:	95 95       	asr	r25
     114:	95 95       	asr	r25
     116:	95 95       	asr	r25
     118:	96 96       	adiw	r26, 0x26	; 38
     11a:	96 96       	adiw	r26, 0x26	; 38
     11c:	96 96       	adiw	r26, 0x26	; 38
     11e:	96 96       	adiw	r26, 0x26	; 38
     120:	96 97       	sbiw	r26, 0x26	; 38
     122:	97 97       	sbiw	r26, 0x27	; 39
     124:	97 97       	sbiw	r26, 0x27	; 39
     126:	97 97       	sbiw	r26, 0x27	; 39
     128:	97 98       	cbi	0x12, 7	; 18
     12a:	98 98       	cbi	0x13, 0	; 19
     12c:	98 98       	cbi	0x13, 0	; 19
     12e:	98 98       	cbi	0x13, 0	; 19
     130:	98 99       	sbic	0x13, 0	; 19
     132:	99 99       	sbic	0x13, 1	; 19
     134:	99 99       	sbic	0x13, 1	; 19
     136:	99 99       	sbic	0x13, 1	; 19
     138:	99 9a       	sbi	0x13, 1	; 19
     13a:	9a 9a       	sbi	0x13, 2	; 19
     13c:	9a 9a       	sbi	0x13, 2	; 19
     13e:	9a 9a       	sbi	0x13, 2	; 19
     140:	9b 9b       	sbis	0x13, 3	; 19
     142:	9b 9b       	sbis	0x13, 3	; 19
     144:	9b 9b       	sbis	0x13, 3	; 19
     146:	9b 9b       	sbis	0x13, 3	; 19
     148:	9b 9c       	mul	r9, r11
     14a:	9c 9c       	mul	r9, r12
     14c:	9c 9c       	mul	r9, r12
     14e:	9c 9c       	mul	r9, r12
     150:	9c 9d       	mul	r25, r12
     152:	9d 9d       	mul	r25, r13
     154:	9d 9d       	mul	r25, r13
     156:	9d 9d       	mul	r25, r13
     158:	9e 9e       	mul	r9, r30
     15a:	9e 9e       	mul	r9, r30
     15c:	9e 9e       	mul	r9, r30
     15e:	9e 9e       	mul	r9, r30
     160:	9f 9f       	mul	r25, r31
     162:	9f 9f       	mul	r25, r31
     164:	9f 9f       	mul	r25, r31
     166:	9f 9f       	mul	r25, r31
     168:	9f a0       	ldd	r9, Y+39	; 0x27
     16a:	a0 a0       	ldd	r10, Z+32	; 0x20
     16c:	a0 a0       	ldd	r10, Z+32	; 0x20
     16e:	a0 a0       	ldd	r10, Z+32	; 0x20
     170:	a1 a1       	ldd	r26, Z+33	; 0x21
     172:	a1 a1       	ldd	r26, Z+33	; 0x21
     174:	a1 a1       	ldd	r26, Z+33	; 0x21
     176:	a1 a1       	ldd	r26, Z+33	; 0x21
     178:	a2 a2       	std	Z+34, r10	; 0x22
     17a:	a2 a2       	std	Z+34, r10	; 0x22
     17c:	a2 a2       	std	Z+34, r10	; 0x22
     17e:	a2 a2       	std	Z+34, r10	; 0x22
     180:	a3 a3       	std	Z+35, r26	; 0x23
     182:	a3 a3       	std	Z+35, r26	; 0x23
     184:	a3 a3       	std	Z+35, r26	; 0x23
     186:	a3 a3       	std	Z+35, r26	; 0x23
     188:	a4 a4       	ldd	r10, Z+44	; 0x2c
     18a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     18c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     18e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     190:	a4 a5       	ldd	r26, Z+44	; 0x2c
     192:	a5 a5       	ldd	r26, Z+45	; 0x2d
     194:	a5 a5       	ldd	r26, Z+45	; 0x2d
     196:	a5 a5       	ldd	r26, Z+45	; 0x2d
     198:	a6 a6       	std	Z+46, r10	; 0x2e
     19a:	a6 a6       	std	Z+46, r10	; 0x2e
     19c:	a6 a6       	std	Z+46, r10	; 0x2e
     19e:	a6 a6       	std	Z+46, r10	; 0x2e
     1a0:	a7 a7       	std	Z+47, r26	; 0x2f
     1a2:	a7 a7       	std	Z+47, r26	; 0x2f
     1a4:	a7 a7       	std	Z+47, r26	; 0x2f
     1a6:	a7 a7       	std	Z+47, r26	; 0x2f
     1a8:	a8 a8       	ldd	r10, Y+48	; 0x30
     1aa:	a8 a8       	ldd	r10, Y+48	; 0x30
     1ac:	a8 a8       	ldd	r10, Y+48	; 0x30
     1ae:	a8 a8       	ldd	r10, Y+48	; 0x30
     1b0:	a8 a9       	ldd	r26, Y+48	; 0x30
     1b2:	a9 a9       	ldd	r26, Y+49	; 0x31
     1b4:	a9 a9       	ldd	r26, Y+49	; 0x31
     1b6:	a9 a9       	ldd	r26, Y+49	; 0x31
     1b8:	a9 aa       	std	Y+49, r10	; 0x31
     1ba:	aa aa       	std	Y+50, r10	; 0x32
     1bc:	aa aa       	std	Y+50, r10	; 0x32
     1be:	aa aa       	std	Y+50, r10	; 0x32
     1c0:	ab ab       	std	Y+51, r26	; 0x33
     1c2:	ab ab       	std	Y+51, r26	; 0x33
     1c4:	ab ab       	std	Y+51, r26	; 0x33
     1c6:	ab ab       	std	Y+51, r26	; 0x33
     1c8:	ac ac       	ldd	r10, Y+60	; 0x3c
     1ca:	ac ac       	ldd	r10, Y+60	; 0x3c
     1cc:	ac ac       	ldd	r10, Y+60	; 0x3c
     1ce:	ac ac       	ldd	r10, Y+60	; 0x3c
     1d0:	ad ad       	ldd	r26, Y+61	; 0x3d
     1d2:	ad ad       	ldd	r26, Y+61	; 0x3d
     1d4:	ad ad       	ldd	r26, Y+61	; 0x3d
     1d6:	ad ad       	ldd	r26, Y+61	; 0x3d
     1d8:	ae ae       	std	Y+62, r10	; 0x3e
     1da:	ae ae       	std	Y+62, r10	; 0x3e
     1dc:	ae ae       	std	Y+62, r10	; 0x3e
     1de:	ae ae       	std	Y+62, r10	; 0x3e
     1e0:	af af       	std	Y+63, r26	; 0x3f
     1e2:	af af       	std	Y+63, r26	; 0x3f
     1e4:	af af       	std	Y+63, r26	; 0x3f
     1e6:	af af       	std	Y+63, r26	; 0x3f
     1e8:	af b0       	in	r10, 0x0f	; 15
     1ea:	b0 b0       	in	r11, 0x00	; 0
     1ec:	b0 b0       	in	r11, 0x00	; 0
     1ee:	b0 b0       	in	r11, 0x00	; 0
     1f0:	b0 b1       	in	r27, 0x00	; 0
     1f2:	b1 b1       	in	r27, 0x01	; 1
     1f4:	b1 b1       	in	r27, 0x01	; 1
     1f6:	b1 b1       	in	r27, 0x01	; 1
     1f8:	b2 b2       	in	r11, 0x12	; 18
     1fa:	b2 b2       	in	r11, 0x12	; 18
     1fc:	b2 b2       	in	r11, 0x12	; 18
     1fe:	b2 b2       	in	r11, 0x12	; 18
     200:	b3 b3       	in	r27, 0x13	; 19
     202:	b3 b3       	in	r27, 0x13	; 19
     204:	b3 b3       	in	r27, 0x13	; 19
     206:	b3 b3       	in	r27, 0x13	; 19
     208:	b4 b4       	in	r11, 0x24	; 36
     20a:	b4 b4       	in	r11, 0x24	; 36
     20c:	b4 b4       	in	r11, 0x24	; 36
     20e:	b4 b4       	in	r11, 0x24	; 36
     210:	b5 b5       	in	r27, 0x25	; 37
     212:	b5 b5       	in	r27, 0x25	; 37
     214:	b5 b5       	in	r27, 0x25	; 37
     216:	b5 b5       	in	r27, 0x25	; 37
     218:	b6 b6       	in	r11, 0x36	; 54
     21a:	b6 b6       	in	r11, 0x36	; 54
     21c:	b6 b6       	in	r11, 0x36	; 54
     21e:	b6 b6       	in	r11, 0x36	; 54
     220:	b7 b7       	in	r27, 0x37	; 55
     222:	b7 b7       	in	r27, 0x37	; 55
     224:	b7 b7       	in	r27, 0x37	; 55
     226:	b7 b7       	in	r27, 0x37	; 55
     228:	b8 b8       	out	0x08, r11	; 8
     22a:	b8 b8       	out	0x08, r11	; 8
     22c:	b8 b8       	out	0x08, r11	; 8
     22e:	b8 b8       	out	0x08, r11	; 8
     230:	b8 b9       	out	0x08, r27	; 8
     232:	b9 b9       	out	0x09, r27	; 9
     234:	b9 b9       	out	0x09, r27	; 9
     236:	b9 b9       	out	0x09, r27	; 9
     238:	ba ba       	out	0x1a, r11	; 26
     23a:	ba ba       	out	0x1a, r11	; 26
     23c:	ba ba       	out	0x1a, r11	; 26
     23e:	ba ba       	out	0x1a, r11	; 26
     240:	bb bb       	out	0x1b, r27	; 27
     242:	bb bb       	out	0x1b, r27	; 27
     244:	bb bb       	out	0x1b, r27	; 27
     246:	bb bb       	out	0x1b, r27	; 27
     248:	bc bc       	out	0x2c, r11	; 44
     24a:	bc bc       	out	0x2c, r11	; 44
     24c:	bc bc       	out	0x2c, r11	; 44
     24e:	bc bc       	out	0x2c, r11	; 44
     250:	bd bd       	out	0x2d, r27	; 45
     252:	bd bd       	out	0x2d, r27	; 45
     254:	bd bd       	out	0x2d, r27	; 45
     256:	bd bd       	out	0x2d, r27	; 45
     258:	bd be       	out	0x3d, r11	; 61
     25a:	be be       	out	0x3e, r11	; 62
     25c:	be be       	out	0x3e, r11	; 62
     25e:	be be       	out	0x3e, r11	; 62
     260:	bf bf       	out	0x3f, r27	; 63
     262:	bf bf       	out	0x3f, r27	; 63
     264:	bf bf       	out	0x3f, r27	; 63
     266:	bf bf       	out	0x3f, r27	; 63
     268:	c0 c0       	rjmp	.+384    	; 0x3ea <__trampolines_end+0x382>
     26a:	c0 c0       	rjmp	.+384    	; 0x3ec <__trampolines_end+0x384>
     26c:	c0 c0       	rjmp	.+384    	; 0x3ee <__trampolines_end+0x386>
     26e:	c0 c0       	rjmp	.+384    	; 0x3f0 <__trampolines_end+0x388>
     270:	c1 c1       	rjmp	.+898    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     272:	c1 c1       	rjmp	.+898    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     274:	c1 c1       	rjmp	.+898    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     276:	c1 c1       	rjmp	.+898    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     278:	c1 c2       	rjmp	.+1410   	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     27a:	c2 c2       	rjmp	.+1412   	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
     27c:	c2 c2       	rjmp	.+1412   	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     27e:	c2 c2       	rjmp	.+1412   	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     280:	c2 c3       	rjmp	.+1924   	; 0xa06 <__stack+0x107>
     282:	c3 c3       	rjmp	.+1926   	; 0xa0a <__stack+0x10b>
     284:	c3 c3       	rjmp	.+1926   	; 0xa0c <__stack+0x10d>
     286:	c3 c3       	rjmp	.+1926   	; 0xa0e <__stack+0x10f>
     288:	c4 c4       	rjmp	.+2440   	; 0xc12 <__stack+0x313>
     28a:	c4 c4       	rjmp	.+2440   	; 0xc14 <__stack+0x315>
     28c:	c4 c4       	rjmp	.+2440   	; 0xc16 <__stack+0x317>
     28e:	c4 c4       	rjmp	.+2440   	; 0xc18 <__stack+0x319>
     290:	c4 c5       	rjmp	.+2952   	; 0xe1a <__stack+0x51b>
     292:	c5 c5       	rjmp	.+2954   	; 0xe1e <__stack+0x51f>
     294:	c5 c5       	rjmp	.+2954   	; 0xe20 <__stack+0x521>
     296:	c5 c5       	rjmp	.+2954   	; 0xe22 <__stack+0x523>
     298:	c5 c6       	rjmp	.+3466   	; 0x1024 <__stack+0x725>
     29a:	c6 c6       	rjmp	.+3468   	; 0x1028 <__stack+0x729>
     29c:	c6 c6       	rjmp	.+3468   	; 0x102a <__stack+0x72b>
     29e:	c6 c6       	rjmp	.+3468   	; 0x102c <__stack+0x72d>
     2a0:	c7 c7       	rjmp	.+3982   	; 0x1230 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x1c8>
     2a2:	c7 c7       	rjmp	.+3982   	; 0x1232 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x1ca>
     2a4:	c7 c7       	rjmp	.+3982   	; 0x1234 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x1cc>
     2a6:	c7 c7       	rjmp	.+3982   	; 0x1236 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x1ce>
     2a8:	c8 c8       	rjmp	.-3696   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     2aa:	c8 c8       	rjmp	.-3696   	; 0xfffff43c <__eeprom_end+0xff7ef43c>
     2ac:	c8 c8       	rjmp	.-3696   	; 0xfffff43e <__eeprom_end+0xff7ef43e>
     2ae:	c8 c8       	rjmp	.-3696   	; 0xfffff440 <__eeprom_end+0xff7ef440>
     2b0:	c9 c9       	rjmp	.-3182   	; 0xfffff644 <__eeprom_end+0xff7ef644>
     2b2:	c9 c9       	rjmp	.-3182   	; 0xfffff646 <__eeprom_end+0xff7ef646>
     2b4:	c9 c9       	rjmp	.-3182   	; 0xfffff648 <__eeprom_end+0xff7ef648>
     2b6:	c9 c9       	rjmp	.-3182   	; 0xfffff64a <__eeprom_end+0xff7ef64a>
     2b8:	ca ca       	rjmp	.-2668   	; 0xfffff84e <__eeprom_end+0xff7ef84e>
     2ba:	ca ca       	rjmp	.-2668   	; 0xfffff850 <__eeprom_end+0xff7ef850>
     2bc:	ca ca       	rjmp	.-2668   	; 0xfffff852 <__eeprom_end+0xff7ef852>
     2be:	ca ca       	rjmp	.-2668   	; 0xfffff854 <__eeprom_end+0xff7ef854>
     2c0:	cb cb       	rjmp	.-2154   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
     2c2:	cb cb       	rjmp	.-2154   	; 0xfffffa5a <__eeprom_end+0xff7efa5a>
     2c4:	cb cb       	rjmp	.-2154   	; 0xfffffa5c <__eeprom_end+0xff7efa5c>
     2c6:	cb cb       	rjmp	.-2154   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
     2c8:	cb cc       	rjmp	.-1642   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
     2ca:	cc cc       	rjmp	.-1640   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     2cc:	cc cc       	rjmp	.-1640   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
     2ce:	cc cc       	rjmp	.-1640   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
     2d0:	cc cd       	rjmp	.-1128   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     2d2:	cd cd       	rjmp	.-1126   	; 0xfffffe6e <__eeprom_end+0xff7efe6e>
     2d4:	cd cd       	rjmp	.-1126   	; 0xfffffe70 <__eeprom_end+0xff7efe70>
     2d6:	cd cd       	rjmp	.-1126   	; 0xfffffe72 <__eeprom_end+0xff7efe72>
     2d8:	cd ce       	rjmp	.-614    	; 0x74 <__trampolines_end+0xc>
     2da:	ce ce       	rjmp	.-612    	; 0x78 <__trampolines_end+0x10>
     2dc:	ce ce       	rjmp	.-612    	; 0x7a <__trampolines_end+0x12>
     2de:	ce ce       	rjmp	.-612    	; 0x7c <__trampolines_end+0x14>
     2e0:	cf cf       	rjmp	.-98     	; 0x280 <__trampolines_end+0x218>
     2e2:	cf cf       	rjmp	.-98     	; 0x282 <__trampolines_end+0x21a>
     2e4:	cf cf       	rjmp	.-98     	; 0x284 <__trampolines_end+0x21c>
     2e6:	cf cf       	rjmp	.-98     	; 0x286 <__trampolines_end+0x21e>
     2e8:	d0 d0       	rcall	.+416    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     2ea:	d0 d0       	rcall	.+416    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     2ec:	d0 d0       	rcall	.+416    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     2ee:	d0 d0       	rcall	.+416    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     2f0:	d1 d1       	rcall	.+930    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     2f2:	d1 d1       	rcall	.+930    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     2f4:	d1 d1       	rcall	.+930    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     2f6:	d1 d1       	rcall	.+930    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     2f8:	d2 d2       	rcall	.+1444   	; 0x89e <_ZL17TRIANGLE2048_DATA+0x36>
     2fa:	d2 d2       	rcall	.+1444   	; 0x8a0 <_ZL17TRIANGLE2048_DATA+0x38>
     2fc:	d2 d2       	rcall	.+1444   	; 0x8a2 <_ZL17TRIANGLE2048_DATA+0x3a>
     2fe:	d2 d2       	rcall	.+1444   	; 0x8a4 <_ZL17TRIANGLE2048_DATA+0x3c>
     300:	d2 d3       	rcall	.+1956   	; 0xaa6 <__stack+0x1a7>
     302:	d3 d3       	rcall	.+1958   	; 0xaaa <__stack+0x1ab>
     304:	d3 d3       	rcall	.+1958   	; 0xaac <__stack+0x1ad>
     306:	d3 d3       	rcall	.+1958   	; 0xaae <__stack+0x1af>
     308:	d4 d4       	rcall	.+2472   	; 0xcb2 <__stack+0x3b3>
     30a:	d4 d4       	rcall	.+2472   	; 0xcb4 <__stack+0x3b5>
     30c:	d4 d4       	rcall	.+2472   	; 0xcb6 <__stack+0x3b7>
     30e:	d4 d4       	rcall	.+2472   	; 0xcb8 <__stack+0x3b9>
     310:	d4 d5       	rcall	.+2984   	; 0xeba <__stack+0x5bb>
     312:	d5 d5       	rcall	.+2986   	; 0xebe <__stack+0x5bf>
     314:	d5 d5       	rcall	.+2986   	; 0xec0 <__stack+0x5c1>
     316:	d5 d5       	rcall	.+2986   	; 0xec2 <__stack+0x5c3>
     318:	d6 d6       	rcall	.+3500   	; 0x10c6 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x5e>
     31a:	d6 d6       	rcall	.+3500   	; 0x10c8 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x60>
     31c:	d6 d6       	rcall	.+3500   	; 0x10ca <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x62>
     31e:	d6 d6       	rcall	.+3500   	; 0x10cc <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x64>
     320:	d6 d7       	rcall	.+4012   	; 0x12ce <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x266>
     322:	d7 d7       	rcall	.+4014   	; 0x12d2 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x26a>
     324:	d7 d7       	rcall	.+4014   	; 0x12d4 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x26c>
     326:	d7 d7       	rcall	.+4014   	; 0x12d6 <_ZL25SQUARE_NO_ALIAS_2048_DATA+0x26e>
     328:	d8 d8       	rcall	.-3664   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
     32a:	d8 d8       	rcall	.-3664   	; 0xfffff4dc <__eeprom_end+0xff7ef4dc>
     32c:	d8 d8       	rcall	.-3664   	; 0xfffff4de <__eeprom_end+0xff7ef4de>
     32e:	d8 d8       	rcall	.-3664   	; 0xfffff4e0 <__eeprom_end+0xff7ef4e0>
     330:	d9 d9       	rcall	.-3150   	; 0xfffff6e4 <__eeprom_end+0xff7ef6e4>
     332:	d9 d9       	rcall	.-3150   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>
     334:	d9 d9       	rcall	.-3150   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     336:	d9 d9       	rcall	.-3150   	; 0xfffff6ea <__eeprom_end+0xff7ef6ea>
     338:	d9 da       	rcall	.-2638   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     33a:	da da       	rcall	.-2636   	; 0xfffff8f0 <__eeprom_end+0xff7ef8f0>
     33c:	da da       	rcall	.-2636   	; 0xfffff8f2 <__eeprom_end+0xff7ef8f2>
     33e:	da da       	rcall	.-2636   	; 0xfffff8f4 <__eeprom_end+0xff7ef8f4>
     340:	da db       	rcall	.-2124   	; 0xfffffaf6 <__eeprom_end+0xff7efaf6>
     342:	db db       	rcall	.-2122   	; 0xfffffafa <__eeprom_end+0xff7efafa>
     344:	db db       	rcall	.-2122   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     346:	db db       	rcall	.-2122   	; 0xfffffafe <__eeprom_end+0xff7efafe>
     348:	dc dc       	rcall	.-1608   	; 0xfffffd02 <__eeprom_end+0xff7efd02>
     34a:	dc dc       	rcall	.-1608   	; 0xfffffd04 <__eeprom_end+0xff7efd04>
     34c:	dc dc       	rcall	.-1608   	; 0xfffffd06 <__eeprom_end+0xff7efd06>
     34e:	dc dc       	rcall	.-1608   	; 0xfffffd08 <__eeprom_end+0xff7efd08>
     350:	dc dd       	rcall	.-1096   	; 0xffffff0a <__eeprom_end+0xff7eff0a>
     352:	dd dd       	rcall	.-1094   	; 0xffffff0e <__eeprom_end+0xff7eff0e>
     354:	dd dd       	rcall	.-1094   	; 0xffffff10 <__eeprom_end+0xff7eff10>
     356:	dd dd       	rcall	.-1094   	; 0xffffff12 <__eeprom_end+0xff7eff12>
     358:	dd de       	rcall	.-582    	; 0x114 <__trampolines_end+0xac>
     35a:	de de       	rcall	.-580    	; 0x118 <__trampolines_end+0xb0>
     35c:	de de       	rcall	.-580    	; 0x11a <__trampolines_end+0xb2>
     35e:	de de       	rcall	.-580    	; 0x11c <__trampolines_end+0xb4>
     360:	df df       	rcall	.-66     	; 0x320 <__trampolines_end+0x2b8>
     362:	df df       	rcall	.-66     	; 0x322 <__trampolines_end+0x2ba>
     364:	df df       	rcall	.-66     	; 0x324 <__trampolines_end+0x2bc>
     366:	df df       	rcall	.-66     	; 0x326 <__trampolines_end+0x2be>
     368:	df e0       	ldi	r29, 0x0F	; 15
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	e0 e0       	ldi	r30, 0x00	; 0
     36e:	e0 e0       	ldi	r30, 0x00	; 0
     370:	e1 e1       	ldi	r30, 0x11	; 17
     372:	e1 e1       	ldi	r30, 0x11	; 17
     374:	e1 e1       	ldi	r30, 0x11	; 17
     376:	e1 e1       	ldi	r30, 0x11	; 17
     378:	e2 e2       	ldi	r30, 0x22	; 34
     37a:	e2 e2       	ldi	r30, 0x22	; 34
     37c:	e2 e2       	ldi	r30, 0x22	; 34
     37e:	e2 e2       	ldi	r30, 0x22	; 34
     380:	e2 e3       	ldi	r30, 0x32	; 50
     382:	e3 e3       	ldi	r30, 0x33	; 51
     384:	e3 e3       	ldi	r30, 0x33	; 51
     386:	e3 e3       	ldi	r30, 0x33	; 51
     388:	e4 e4       	ldi	r30, 0x44	; 68
     38a:	e4 e4       	ldi	r30, 0x44	; 68
     38c:	e4 e4       	ldi	r30, 0x44	; 68
     38e:	e4 e4       	ldi	r30, 0x44	; 68
     390:	e5 e5       	ldi	r30, 0x55	; 85
     392:	e5 e5       	ldi	r30, 0x55	; 85
     394:	e5 e5       	ldi	r30, 0x55	; 85
     396:	e5 e5       	ldi	r30, 0x55	; 85
     398:	e6 e6       	ldi	r30, 0x66	; 102
     39a:	e6 e6       	ldi	r30, 0x66	; 102
     39c:	e6 e6       	ldi	r30, 0x66	; 102
     39e:	e6 e6       	ldi	r30, 0x66	; 102
     3a0:	e7 e7       	ldi	r30, 0x77	; 119
     3a2:	e7 e7       	ldi	r30, 0x77	; 119
     3a4:	e7 e7       	ldi	r30, 0x77	; 119
     3a6:	e7 e7       	ldi	r30, 0x77	; 119
     3a8:	e7 e8       	ldi	r30, 0x87	; 135
     3aa:	e8 e8       	ldi	r30, 0x88	; 136
     3ac:	e8 e8       	ldi	r30, 0x88	; 136
     3ae:	e8 e8       	ldi	r30, 0x88	; 136
     3b0:	e9 e9       	ldi	r30, 0x99	; 153
     3b2:	e9 e9       	ldi	r30, 0x99	; 153
     3b4:	e9 e9       	ldi	r30, 0x99	; 153
     3b6:	e9 e9       	ldi	r30, 0x99	; 153
     3b8:	ea ea       	ldi	r30, 0xAA	; 170
     3ba:	ea ea       	ldi	r30, 0xAA	; 170
     3bc:	ea ea       	ldi	r30, 0xAA	; 170
     3be:	ea ea       	ldi	r30, 0xAA	; 170
     3c0:	eb eb       	ldi	r30, 0xBB	; 187
     3c2:	eb eb       	ldi	r30, 0xBB	; 187
     3c4:	eb eb       	ldi	r30, 0xBB	; 187
     3c6:	eb eb       	ldi	r30, 0xBB	; 187
     3c8:	ec ec       	ldi	r30, 0xCC	; 204
     3ca:	ec ec       	ldi	r30, 0xCC	; 204
     3cc:	ec ec       	ldi	r30, 0xCC	; 204
     3ce:	ec ec       	ldi	r30, 0xCC	; 204
     3d0:	ec ed       	ldi	r30, 0xDC	; 220
     3d2:	ed ed       	ldi	r30, 0xDD	; 221
     3d4:	ed ed       	ldi	r30, 0xDD	; 221
     3d6:	ed ed       	ldi	r30, 0xDD	; 221
     3d8:	ed ee       	ldi	r30, 0xED	; 237
     3da:	ee ee       	ldi	r30, 0xEE	; 238
     3dc:	ee ee       	ldi	r30, 0xEE	; 238
     3de:	ee ee       	ldi	r30, 0xEE	; 238
     3e0:	ee ef       	ldi	r30, 0xFE	; 254
     3e2:	ef ef       	ldi	r30, 0xFF	; 255
     3e4:	ef ef       	ldi	r30, 0xFF	; 255
     3e6:	ef ef       	ldi	r30, 0xFF	; 255
     3e8:	f0 f0       	brcs	.+60     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3ea:	f0 f0       	brcs	.+60     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3ec:	f0 f0       	brcs	.+60     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3ee:	f0 f0       	brcs	.+60     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3f0:	f0 f1       	brcs	.+124    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3f2:	f1 f1       	breq	.+124    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3f4:	f1 f1       	breq	.+124    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     3f6:	f1 f1       	breq	.+124    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     3f8:	f1 f2       	breq	.-68     	; 0x3b6 <__trampolines_end+0x34e>
     3fa:	f2 f2       	brmi	.-68     	; 0x3b8 <__trampolines_end+0x350>
     3fc:	f2 f2       	brmi	.-68     	; 0x3ba <__trampolines_end+0x352>
     3fe:	f2 f2       	brmi	.-68     	; 0x3bc <__trampolines_end+0x354>
     400:	f3 f3       	brvs	.-4      	; 0x3fe <__trampolines_end+0x396>
     402:	f3 f3       	brvs	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	f3 f3       	brvs	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	f3 f3       	brvs	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	f4 f4       	brge	.+60     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     40a:	f4 f4       	brge	.+60     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     40c:	f4 f4       	brge	.+60     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     40e:	f4 f4       	brge	.+60     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     410:	f4 f5       	brge	.+124    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     412:	f5 f5       	brhc	.+124    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     414:	f5 f5       	brhc	.+124    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     416:	f5 f5       	brhc	.+124    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     418:	f6 f6       	brtc	.-68     	; 0x3d6 <__trampolines_end+0x36e>
     41a:	f6 f6       	brtc	.-68     	; 0x3d8 <__trampolines_end+0x370>
     41c:	f6 f6       	brtc	.-68     	; 0x3da <__trampolines_end+0x372>
     41e:	f6 f6       	brtc	.-68     	; 0x3dc <__trampolines_end+0x374>
     420:	f7 f7       	brid	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     422:	f7 f7       	brid	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     424:	f7 f7       	brid	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	f7 f7       	brid	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     428:	f8 f8       	.word	0xf8f8	; ????
     42a:	f8 f8       	.word	0xf8f8	; ????
     42c:	f8 f8       	.word	0xf8f8	; ????
     42e:	f8 f8       	.word	0xf8f8	; ????
     430:	f8 f9       	.word	0xf9f8	; ????
     432:	f9 f9       	.word	0xf9f9	; ????
     434:	f9 f9       	.word	0xf9f9	; ????
     436:	f9 f9       	.word	0xf9f9	; ????
     438:	f9 fa       	.word	0xfaf9	; ????
     43a:	fa fa       	.word	0xfafa	; ????
     43c:	fa fa       	.word	0xfafa	; ????
     43e:	fa fa       	.word	0xfafa	; ????
     440:	fb fb       	.word	0xfbfb	; ????
     442:	fb fb       	.word	0xfbfb	; ????
     444:	fb fb       	.word	0xfbfb	; ????
     446:	fb fb       	.word	0xfbfb	; ????
     448:	fc fc       	.word	0xfcfc	; ????
     44a:	fc fc       	.word	0xfcfc	; ????
     44c:	fc fc       	.word	0xfcfc	; ????
     44e:	fc fc       	.word	0xfcfc	; ????
     450:	fd fd       	.word	0xfdfd	; ????
     452:	fd fd       	.word	0xfdfd	; ????
     454:	fd fd       	.word	0xfdfd	; ????
     456:	fd fd       	.word	0xfdfd	; ????
     458:	fd fe       	.word	0xfefd	; ????
     45a:	fe fe       	.word	0xfefe	; ????
     45c:	fe fe       	.word	0xfefe	; ????
     45e:	fe fe       	.word	0xfefe	; ????
     460:	ff ff       	.word	0xffff	; ????
     462:	ff ff       	.word	0xffff	; ????
     464:	ff ff       	.word	0xffff	; ????
     466:	ff ff       	.word	0xffff	; ????
	...
     470:	00 01       	movw	r0, r0
     472:	01 01       	movw	r0, r2
     474:	01 01       	movw	r0, r2
     476:	01 01       	movw	r0, r2
     478:	01 02       	muls	r16, r17
     47a:	02 02       	muls	r16, r18
     47c:	02 02       	muls	r16, r18
     47e:	02 02       	muls	r16, r18
     480:	03 03       	mulsu	r16, r19
     482:	03 03       	mulsu	r16, r19
     484:	03 03       	mulsu	r16, r19
     486:	03 03       	mulsu	r16, r19
     488:	04 04       	cpc	r0, r4
     48a:	04 04       	cpc	r0, r4
     48c:	04 04       	cpc	r0, r4
     48e:	04 04       	cpc	r0, r4
     490:	05 05       	cpc	r16, r5
     492:	05 05       	cpc	r16, r5
     494:	05 05       	cpc	r16, r5
     496:	05 05       	cpc	r16, r5
     498:	06 06       	cpc	r0, r22
     49a:	06 06       	cpc	r0, r22
     49c:	06 06       	cpc	r0, r22
     49e:	06 06       	cpc	r0, r22
     4a0:	07 07       	cpc	r16, r23
     4a2:	07 07       	cpc	r16, r23
     4a4:	07 07       	cpc	r16, r23
     4a6:	07 07       	cpc	r16, r23
     4a8:	07 08       	sbc	r0, r7
     4aa:	08 08       	sbc	r0, r8
     4ac:	08 08       	sbc	r0, r8
     4ae:	08 08       	sbc	r0, r8
     4b0:	09 09       	sbc	r16, r9
     4b2:	09 09       	sbc	r16, r9
     4b4:	09 09       	sbc	r16, r9
     4b6:	09 09       	sbc	r16, r9
     4b8:	0a 0a       	sbc	r0, r26
     4ba:	0a 0a       	sbc	r0, r26
     4bc:	0a 0a       	sbc	r0, r26
     4be:	0a 0a       	sbc	r0, r26
     4c0:	0b 0b       	sbc	r16, r27
     4c2:	0b 0b       	sbc	r16, r27
     4c4:	0b 0b       	sbc	r16, r27
     4c6:	0b 0b       	sbc	r16, r27
     4c8:	0b 0c       	add	r0, r11
     4ca:	0c 0c       	add	r0, r12
     4cc:	0c 0c       	add	r0, r12
     4ce:	0c 0c       	add	r0, r12
     4d0:	0d 0d       	add	r16, r13
     4d2:	0d 0d       	add	r16, r13
     4d4:	0d 0d       	add	r16, r13
     4d6:	0d 0d       	add	r16, r13
     4d8:	0d 0e       	add	r0, r29
     4da:	0e 0e       	add	r0, r30
     4dc:	0e 0e       	add	r0, r30
     4de:	0e 0e       	add	r0, r30
     4e0:	0f 0f       	add	r16, r31
     4e2:	0f 0f       	add	r16, r31
     4e4:	0f 0f       	add	r16, r31
     4e6:	0f 0f       	add	r16, r31
     4e8:	0f 10       	cpse	r0, r15
     4ea:	10 10       	cpse	r1, r0
     4ec:	10 10       	cpse	r1, r0
     4ee:	10 10       	cpse	r1, r0
     4f0:	10 11       	cpse	r17, r0
     4f2:	11 11       	cpse	r17, r1
     4f4:	11 11       	cpse	r17, r1
     4f6:	11 11       	cpse	r17, r1
     4f8:	12 12       	cpse	r1, r18
     4fa:	12 12       	cpse	r1, r18
     4fc:	12 12       	cpse	r1, r18
     4fe:	12 12       	cpse	r1, r18
     500:	13 13       	cpse	r17, r19
     502:	13 13       	cpse	r17, r19
     504:	13 13       	cpse	r17, r19
     506:	13 13       	cpse	r17, r19
     508:	14 14       	cp	r1, r4
     50a:	14 14       	cp	r1, r4
     50c:	14 14       	cp	r1, r4
     50e:	14 14       	cp	r1, r4
     510:	15 15       	cp	r17, r5
     512:	15 15       	cp	r17, r5
     514:	15 15       	cp	r17, r5
     516:	15 15       	cp	r17, r5
     518:	15 16       	cp	r1, r21
     51a:	16 16       	cp	r1, r22
     51c:	16 16       	cp	r1, r22
     51e:	16 16       	cp	r1, r22
     520:	17 17       	cp	r17, r23
     522:	17 17       	cp	r17, r23
     524:	17 17       	cp	r17, r23
     526:	17 17       	cp	r17, r23
     528:	18 18       	sub	r1, r8
     52a:	18 18       	sub	r1, r8
     52c:	18 18       	sub	r1, r8
     52e:	18 18       	sub	r1, r8
     530:	19 19       	sub	r17, r9
     532:	19 19       	sub	r17, r9
     534:	19 19       	sub	r17, r9
     536:	19 19       	sub	r17, r9
     538:	19 1a       	sub	r1, r25
     53a:	1a 1a       	sub	r1, r26
     53c:	1a 1a       	sub	r1, r26
     53e:	1a 1a       	sub	r1, r26
     540:	1a 1b       	sub	r17, r26
     542:	1b 1b       	sub	r17, r27
     544:	1b 1b       	sub	r17, r27
     546:	1b 1b       	sub	r17, r27
     548:	1c 1c       	adc	r1, r12
     54a:	1c 1c       	adc	r1, r12
     54c:	1c 1c       	adc	r1, r12
     54e:	1c 1c       	adc	r1, r12
     550:	1d 1d       	adc	r17, r13
     552:	1d 1d       	adc	r17, r13
     554:	1d 1d       	adc	r17, r13
     556:	1d 1d       	adc	r17, r13
     558:	1e 1e       	adc	r1, r30
     55a:	1e 1e       	adc	r1, r30
     55c:	1e 1e       	adc	r1, r30
     55e:	1e 1e       	adc	r1, r30
     560:	1f 1f       	adc	r17, r31
     562:	1f 1f       	adc	r17, r31
     564:	1f 1f       	adc	r17, r31
     566:	1f 1f       	adc	r17, r31
     568:	1f 20       	and	r1, r15
     56a:	20 20       	and	r2, r0
     56c:	20 20       	and	r2, r0
     56e:	20 20       	and	r2, r0
     570:	21 21       	and	r18, r1
     572:	20 21       	and	r18, r0
     574:	21 22       	and	r2, r17
     576:	21 21       	and	r18, r1
     578:	20 22       	and	r2, r16
     57a:	22 22       	and	r2, r18
     57c:	22 22       	and	r2, r18
     57e:	22 22       	and	r2, r18
     580:	23 23       	and	r18, r19
     582:	23 23       	and	r18, r19
     584:	23 23       	and	r18, r19
     586:	23 23       	and	r18, r19
     588:	24 24       	eor	r2, r4
     58a:	24 24       	eor	r2, r4
     58c:	24 24       	eor	r2, r4
     58e:	24 24       	eor	r2, r4
     590:	24 25       	eor	r18, r4
     592:	25 25       	eor	r18, r5
     594:	25 25       	eor	r18, r5
     596:	25 25       	eor	r18, r5
     598:	26 26       	eor	r2, r22
     59a:	26 26       	eor	r2, r22
     59c:	26 26       	eor	r2, r22
     59e:	26 26       	eor	r2, r22
     5a0:	27 27       	eor	r18, r23
     5a2:	27 27       	eor	r18, r23
     5a4:	27 27       	eor	r18, r23
     5a6:	27 27       	eor	r18, r23
     5a8:	28 28       	or	r2, r8
     5aa:	28 28       	or	r2, r8
     5ac:	28 28       	or	r2, r8
     5ae:	28 28       	or	r2, r8
     5b0:	29 29       	or	r18, r9
     5b2:	29 29       	or	r18, r9
     5b4:	29 29       	or	r18, r9
     5b6:	29 29       	or	r18, r9
     5b8:	2a 2a       	or	r2, r26
     5ba:	2a 2a       	or	r2, r26
     5bc:	2a 2a       	or	r2, r26
     5be:	2a 2a       	or	r2, r26
     5c0:	2a 2b       	or	r18, r26
     5c2:	2b 2b       	or	r18, r27
     5c4:	2b 2b       	or	r18, r27
     5c6:	2b 2b       	or	r18, r27
     5c8:	2b 2c       	mov	r2, r11
     5ca:	2c 2c       	mov	r2, r12
     5cc:	2c 2c       	mov	r2, r12
     5ce:	2c 2c       	mov	r2, r12
     5d0:	2d 2d       	mov	r18, r13
     5d2:	2d 2d       	mov	r18, r13
     5d4:	2d 2d       	mov	r18, r13
     5d6:	2d 2d       	mov	r18, r13
     5d8:	2e 2e       	mov	r2, r30
     5da:	2e 2e       	mov	r2, r30
     5dc:	2e 2e       	mov	r2, r30
     5de:	2e 2e       	mov	r2, r30
     5e0:	2e 2f       	mov	r18, r30
     5e2:	2f 2f       	mov	r18, r31
     5e4:	2f 2f       	mov	r18, r31
     5e6:	2f 2f       	mov	r18, r31
     5e8:	2f 30       	cpi	r18, 0x0F	; 15
     5ea:	30 30       	cpi	r19, 0x00	; 0
     5ec:	30 30       	cpi	r19, 0x00	; 0
     5ee:	30 30       	cpi	r19, 0x00	; 0
     5f0:	31 31       	cpi	r19, 0x11	; 17
     5f2:	31 31       	cpi	r19, 0x11	; 17
     5f4:	31 31       	cpi	r19, 0x11	; 17
     5f6:	31 31       	cpi	r19, 0x11	; 17
     5f8:	32 32       	cpi	r19, 0x22	; 34
     5fa:	32 32       	cpi	r19, 0x22	; 34
     5fc:	32 32       	cpi	r19, 0x22	; 34
     5fe:	32 32       	cpi	r19, 0x22	; 34
     600:	33 33       	cpi	r19, 0x33	; 51
     602:	33 33       	cpi	r19, 0x33	; 51
     604:	33 33       	cpi	r19, 0x33	; 51
     606:	33 33       	cpi	r19, 0x33	; 51
     608:	33 34       	cpi	r19, 0x43	; 67
     60a:	34 34       	cpi	r19, 0x44	; 68
     60c:	34 34       	cpi	r19, 0x44	; 68
     60e:	34 34       	cpi	r19, 0x44	; 68
     610:	35 35       	cpi	r19, 0x55	; 85
     612:	35 35       	cpi	r19, 0x55	; 85
     614:	35 35       	cpi	r19, 0x55	; 85
     616:	35 35       	cpi	r19, 0x55	; 85
     618:	36 36       	cpi	r19, 0x66	; 102
     61a:	36 36       	cpi	r19, 0x66	; 102
     61c:	36 36       	cpi	r19, 0x66	; 102
     61e:	36 36       	cpi	r19, 0x66	; 102
     620:	36 37       	cpi	r19, 0x76	; 118
     622:	37 37       	cpi	r19, 0x77	; 119
     624:	37 37       	cpi	r19, 0x77	; 119
     626:	37 37       	cpi	r19, 0x77	; 119
     628:	37 38       	cpi	r19, 0x87	; 135
     62a:	38 38       	cpi	r19, 0x88	; 136
     62c:	38 38       	cpi	r19, 0x88	; 136
     62e:	38 38       	cpi	r19, 0x88	; 136
     630:	39 39       	cpi	r19, 0x99	; 153
     632:	39 39       	cpi	r19, 0x99	; 153
     634:	39 39       	cpi	r19, 0x99	; 153
     636:	39 39       	cpi	r19, 0x99	; 153
     638:	39 3a       	cpi	r19, 0xA9	; 169
     63a:	3a 3a       	cpi	r19, 0xAA	; 170
     63c:	3a 3a       	cpi	r19, 0xAA	; 170
     63e:	3a 3a       	cpi	r19, 0xAA	; 170
     640:	3a 3b       	cpi	r19, 0xBA	; 186
     642:	3b 3b       	cpi	r19, 0xBB	; 187
     644:	3b 3b       	cpi	r19, 0xBB	; 187
     646:	3b 3b       	cpi	r19, 0xBB	; 187
     648:	3c 3c       	cpi	r19, 0xCC	; 204
     64a:	3c 3c       	cpi	r19, 0xCC	; 204
     64c:	3c 3c       	cpi	r19, 0xCC	; 204
     64e:	3c 3c       	cpi	r19, 0xCC	; 204
     650:	3d 3d       	cpi	r19, 0xDD	; 221
     652:	3d 3d       	cpi	r19, 0xDD	; 221
     654:	3d 3d       	cpi	r19, 0xDD	; 221
     656:	3d 3d       	cpi	r19, 0xDD	; 221
     658:	3e 3e       	cpi	r19, 0xEE	; 238
     65a:	3e 3e       	cpi	r19, 0xEE	; 238
     65c:	3e 3e       	cpi	r19, 0xEE	; 238
     65e:	3e 3e       	cpi	r19, 0xEE	; 238
     660:	3f 3f       	cpi	r19, 0xFF	; 255
     662:	3f 3f       	cpi	r19, 0xFF	; 255
     664:	3f 3f       	cpi	r19, 0xFF	; 255
     666:	3f 3f       	cpi	r19, 0xFF	; 255
     668:	40 40       	sbci	r20, 0x00	; 0
     66a:	40 40       	sbci	r20, 0x00	; 0
     66c:	40 40       	sbci	r20, 0x00	; 0
     66e:	40 40       	sbci	r20, 0x00	; 0
     670:	41 41       	sbci	r20, 0x11	; 17
     672:	41 41       	sbci	r20, 0x11	; 17
     674:	41 41       	sbci	r20, 0x11	; 17
     676:	41 41       	sbci	r20, 0x11	; 17
     678:	42 42       	sbci	r20, 0x22	; 34
     67a:	42 42       	sbci	r20, 0x22	; 34
     67c:	42 42       	sbci	r20, 0x22	; 34
     67e:	42 42       	sbci	r20, 0x22	; 34
     680:	43 43       	sbci	r20, 0x33	; 51
     682:	43 43       	sbci	r20, 0x33	; 51
     684:	43 43       	sbci	r20, 0x33	; 51
     686:	43 43       	sbci	r20, 0x33	; 51
     688:	44 44       	sbci	r20, 0x44	; 68
     68a:	44 44       	sbci	r20, 0x44	; 68
     68c:	44 44       	sbci	r20, 0x44	; 68
     68e:	44 44       	sbci	r20, 0x44	; 68
     690:	45 45       	sbci	r20, 0x55	; 85
     692:	45 45       	sbci	r20, 0x55	; 85
     694:	45 45       	sbci	r20, 0x55	; 85
     696:	45 45       	sbci	r20, 0x55	; 85
     698:	46 46       	sbci	r20, 0x66	; 102
     69a:	46 46       	sbci	r20, 0x66	; 102
     69c:	46 46       	sbci	r20, 0x66	; 102
     69e:	46 46       	sbci	r20, 0x66	; 102
     6a0:	46 47       	sbci	r20, 0x76	; 118
     6a2:	47 47       	sbci	r20, 0x77	; 119
     6a4:	47 47       	sbci	r20, 0x77	; 119
     6a6:	47 47       	sbci	r20, 0x77	; 119
     6a8:	48 48       	sbci	r20, 0x88	; 136
     6aa:	48 48       	sbci	r20, 0x88	; 136
     6ac:	48 48       	sbci	r20, 0x88	; 136
     6ae:	48 48       	sbci	r20, 0x88	; 136
     6b0:	49 49       	sbci	r20, 0x99	; 153
     6b2:	49 49       	sbci	r20, 0x99	; 153
     6b4:	49 49       	sbci	r20, 0x99	; 153
     6b6:	49 49       	sbci	r20, 0x99	; 153
     6b8:	4a 4a       	sbci	r20, 0xAA	; 170
     6ba:	4a 4a       	sbci	r20, 0xAA	; 170
     6bc:	4a 4a       	sbci	r20, 0xAA	; 170
     6be:	4a 4a       	sbci	r20, 0xAA	; 170
     6c0:	4a 4b       	sbci	r20, 0xBA	; 186
     6c2:	4b 4b       	sbci	r20, 0xBB	; 187
     6c4:	4b 4b       	sbci	r20, 0xBB	; 187
     6c6:	4b 4b       	sbci	r20, 0xBB	; 187
     6c8:	4c 4c       	sbci	r20, 0xCC	; 204
     6ca:	4c 4c       	sbci	r20, 0xCC	; 204
     6cc:	4c 4c       	sbci	r20, 0xCC	; 204
     6ce:	4c 4c       	sbci	r20, 0xCC	; 204
     6d0:	4c 4d       	sbci	r20, 0xDC	; 220
     6d2:	4d 4d       	sbci	r20, 0xDD	; 221
     6d4:	4d 4d       	sbci	r20, 0xDD	; 221
     6d6:	4d 4d       	sbci	r20, 0xDD	; 221
     6d8:	4d 4e       	sbci	r20, 0xED	; 237
     6da:	4e 4e       	sbci	r20, 0xEE	; 238
     6dc:	4e 4e       	sbci	r20, 0xEE	; 238
     6de:	4e 4e       	sbci	r20, 0xEE	; 238
     6e0:	4f 4f       	sbci	r20, 0xFF	; 255
     6e2:	4f 4f       	sbci	r20, 0xFF	; 255
     6e4:	4f 4f       	sbci	r20, 0xFF	; 255
     6e6:	4f 4f       	sbci	r20, 0xFF	; 255
     6e8:	50 50       	subi	r21, 0x00	; 0
     6ea:	50 50       	subi	r21, 0x00	; 0
     6ec:	50 50       	subi	r21, 0x00	; 0
     6ee:	50 50       	subi	r21, 0x00	; 0
     6f0:	50 51       	subi	r21, 0x10	; 16
     6f2:	51 51       	subi	r21, 0x11	; 17
     6f4:	51 51       	subi	r21, 0x11	; 17
     6f6:	51 51       	subi	r21, 0x11	; 17
     6f8:	52 52       	subi	r21, 0x22	; 34
     6fa:	52 52       	subi	r21, 0x22	; 34
     6fc:	52 52       	subi	r21, 0x22	; 34
     6fe:	52 52       	subi	r21, 0x22	; 34
     700:	52 53       	subi	r21, 0x32	; 50
     702:	53 53       	subi	r21, 0x33	; 51
     704:	53 53       	subi	r21, 0x33	; 51
     706:	53 53       	subi	r21, 0x33	; 51
     708:	54 54       	subi	r21, 0x44	; 68
     70a:	54 54       	subi	r21, 0x44	; 68
     70c:	54 54       	subi	r21, 0x44	; 68
     70e:	54 54       	subi	r21, 0x44	; 68
     710:	54 55       	subi	r21, 0x54	; 84
     712:	55 55       	subi	r21, 0x55	; 85
     714:	55 55       	subi	r21, 0x55	; 85
     716:	55 55       	subi	r21, 0x55	; 85
     718:	56 56       	subi	r21, 0x66	; 102
     71a:	56 56       	subi	r21, 0x66	; 102
     71c:	56 56       	subi	r21, 0x66	; 102
     71e:	56 56       	subi	r21, 0x66	; 102
     720:	56 57       	subi	r21, 0x76	; 118
     722:	57 57       	subi	r21, 0x77	; 119
     724:	57 57       	subi	r21, 0x77	; 119
     726:	57 57       	subi	r21, 0x77	; 119
     728:	58 58       	subi	r21, 0x88	; 136
     72a:	58 58       	subi	r21, 0x88	; 136
     72c:	58 58       	subi	r21, 0x88	; 136
     72e:	58 58       	subi	r21, 0x88	; 136
     730:	58 59       	subi	r21, 0x98	; 152
     732:	59 59       	subi	r21, 0x99	; 153
     734:	59 59       	subi	r21, 0x99	; 153
     736:	59 59       	subi	r21, 0x99	; 153
     738:	59 5a       	subi	r21, 0xA9	; 169
     73a:	5a 5a       	subi	r21, 0xAA	; 170
     73c:	5a 5a       	subi	r21, 0xAA	; 170
     73e:	5a 5a       	subi	r21, 0xAA	; 170
     740:	5b 5b       	subi	r21, 0xBB	; 187
     742:	5b 5b       	subi	r21, 0xBB	; 187
     744:	5b 5b       	subi	r21, 0xBB	; 187
     746:	5b 5b       	subi	r21, 0xBB	; 187
     748:	5c 5c       	subi	r21, 0xCC	; 204
     74a:	5c 5c       	subi	r21, 0xCC	; 204
     74c:	5c 5c       	subi	r21, 0xCC	; 204
     74e:	5c 5c       	subi	r21, 0xCC	; 204
     750:	5d 5d       	subi	r21, 0xDD	; 221
     752:	5d 5d       	subi	r21, 0xDD	; 221
     754:	5d 5d       	subi	r21, 0xDD	; 221
     756:	5d 5d       	subi	r21, 0xDD	; 221
     758:	5e 5e       	subi	r21, 0xEE	; 238
     75a:	5e 5e       	subi	r21, 0xEE	; 238
     75c:	5e 5e       	subi	r21, 0xEE	; 238
     75e:	5e 5e       	subi	r21, 0xEE	; 238
     760:	5f 5f       	subi	r21, 0xFF	; 255
     762:	5f 5f       	subi	r21, 0xFF	; 255
     764:	5f 5f       	subi	r21, 0xFF	; 255
     766:	5f 5f       	subi	r21, 0xFF	; 255
     768:	60 60       	ori	r22, 0x00	; 0
     76a:	60 60       	ori	r22, 0x00	; 0
     76c:	60 60       	ori	r22, 0x00	; 0
     76e:	60 60       	ori	r22, 0x00	; 0
     770:	61 61       	ori	r22, 0x11	; 17
     772:	61 61       	ori	r22, 0x11	; 17
     774:	61 61       	ori	r22, 0x11	; 17
     776:	61 61       	ori	r22, 0x11	; 17
     778:	61 62       	ori	r22, 0x21	; 33
     77a:	62 62       	ori	r22, 0x22	; 34
     77c:	62 62       	ori	r22, 0x22	; 34
     77e:	62 62       	ori	r22, 0x22	; 34
     780:	63 63       	ori	r22, 0x33	; 51
     782:	63 63       	ori	r22, 0x33	; 51
     784:	63 63       	ori	r22, 0x33	; 51
     786:	63 63       	ori	r22, 0x33	; 51
     788:	63 64       	ori	r22, 0x43	; 67
     78a:	64 64       	ori	r22, 0x44	; 68
     78c:	64 64       	ori	r22, 0x44	; 68
     78e:	64 64       	ori	r22, 0x44	; 68
     790:	65 65       	ori	r22, 0x55	; 85
     792:	65 65       	ori	r22, 0x55	; 85
     794:	65 65       	ori	r22, 0x55	; 85
     796:	65 65       	ori	r22, 0x55	; 85
     798:	65 66       	ori	r22, 0x65	; 101
     79a:	66 66       	ori	r22, 0x66	; 102
     79c:	66 66       	ori	r22, 0x66	; 102
     79e:	66 66       	ori	r22, 0x66	; 102
     7a0:	67 67       	ori	r22, 0x77	; 119
     7a2:	67 67       	ori	r22, 0x77	; 119
     7a4:	67 67       	ori	r22, 0x77	; 119
     7a6:	67 67       	ori	r22, 0x77	; 119
     7a8:	68 68       	ori	r22, 0x88	; 136
     7aa:	68 68       	ori	r22, 0x88	; 136
     7ac:	68 68       	ori	r22, 0x88	; 136
     7ae:	68 68       	ori	r22, 0x88	; 136
     7b0:	69 69       	ori	r22, 0x99	; 153
     7b2:	69 69       	ori	r22, 0x99	; 153
     7b4:	69 69       	ori	r22, 0x99	; 153
     7b6:	69 69       	ori	r22, 0x99	; 153
     7b8:	6a 6a       	ori	r22, 0xAA	; 170
     7ba:	6a 6a       	ori	r22, 0xAA	; 170
     7bc:	6a 6a       	ori	r22, 0xAA	; 170
     7be:	6a 6a       	ori	r22, 0xAA	; 170
     7c0:	6b 6b       	ori	r22, 0xBB	; 187
     7c2:	6b 6b       	ori	r22, 0xBB	; 187
     7c4:	6b 6b       	ori	r22, 0xBB	; 187
     7c6:	6b 6b       	ori	r22, 0xBB	; 187
     7c8:	6c 6c       	ori	r22, 0xCC	; 204
     7ca:	6c 6c       	ori	r22, 0xCC	; 204
     7cc:	6c 6c       	ori	r22, 0xCC	; 204
     7ce:	6c 6c       	ori	r22, 0xCC	; 204
     7d0:	6d 6d       	ori	r22, 0xDD	; 221
     7d2:	6d 6d       	ori	r22, 0xDD	; 221
     7d4:	6d 6d       	ori	r22, 0xDD	; 221
     7d6:	6d 6d       	ori	r22, 0xDD	; 221
     7d8:	6e 6e       	ori	r22, 0xEE	; 238
     7da:	6e 6e       	ori	r22, 0xEE	; 238
     7dc:	6e 6e       	ori	r22, 0xEE	; 238
     7de:	6e 6e       	ori	r22, 0xEE	; 238
     7e0:	6f 6f       	ori	r22, 0xFF	; 255
     7e2:	6f 6f       	ori	r22, 0xFF	; 255
     7e4:	6f 6f       	ori	r22, 0xFF	; 255
     7e6:	6f 6f       	ori	r22, 0xFF	; 255
     7e8:	70 70       	andi	r23, 0x00	; 0
     7ea:	70 70       	andi	r23, 0x00	; 0
     7ec:	70 70       	andi	r23, 0x00	; 0
     7ee:	70 70       	andi	r23, 0x00	; 0
     7f0:	71 71       	andi	r23, 0x11	; 17
     7f2:	71 71       	andi	r23, 0x11	; 17
     7f4:	71 71       	andi	r23, 0x11	; 17
     7f6:	71 71       	andi	r23, 0x11	; 17
     7f8:	71 72       	andi	r23, 0x21	; 33
     7fa:	72 72       	andi	r23, 0x22	; 34
     7fc:	72 72       	andi	r23, 0x22	; 34
     7fe:	72 72       	andi	r23, 0x22	; 34
     800:	73 73       	andi	r23, 0x33	; 51
     802:	73 73       	andi	r23, 0x33	; 51
     804:	73 73       	andi	r23, 0x33	; 51
     806:	73 73       	andi	r23, 0x33	; 51
     808:	74 74       	andi	r23, 0x44	; 68
     80a:	74 74       	andi	r23, 0x44	; 68
     80c:	74 74       	andi	r23, 0x44	; 68
     80e:	74 74       	andi	r23, 0x44	; 68
     810:	74 75       	andi	r23, 0x54	; 84
     812:	75 75       	andi	r23, 0x55	; 85
     814:	75 75       	andi	r23, 0x55	; 85
     816:	75 75       	andi	r23, 0x55	; 85
     818:	75 76       	andi	r23, 0x65	; 101
     81a:	76 76       	andi	r23, 0x66	; 102
     81c:	76 76       	andi	r23, 0x66	; 102
     81e:	76 76       	andi	r23, 0x66	; 102
     820:	77 77       	andi	r23, 0x77	; 119
     822:	77 77       	andi	r23, 0x77	; 119
     824:	77 77       	andi	r23, 0x77	; 119
     826:	77 77       	andi	r23, 0x77	; 119
     828:	77 78       	andi	r23, 0x87	; 135
     82a:	78 78       	andi	r23, 0x88	; 136
     82c:	78 78       	andi	r23, 0x88	; 136
     82e:	78 78       	andi	r23, 0x88	; 136
     830:	78 79       	andi	r23, 0x98	; 152
     832:	79 79       	andi	r23, 0x99	; 153
     834:	79 79       	andi	r23, 0x99	; 153
     836:	79 79       	andi	r23, 0x99	; 153
     838:	79 7a       	andi	r23, 0xA9	; 169
     83a:	7a 7a       	andi	r23, 0xAA	; 170
     83c:	7a 7a       	andi	r23, 0xAA	; 170
     83e:	7a 7a       	andi	r23, 0xAA	; 170
     840:	7b 7b       	andi	r23, 0xBB	; 187
     842:	7b 7b       	andi	r23, 0xBB	; 187
     844:	7b 7b       	andi	r23, 0xBB	; 187
     846:	7b 7b       	andi	r23, 0xBB	; 187
     848:	7c 7c       	andi	r23, 0xCC	; 204
     84a:	7c 7c       	andi	r23, 0xCC	; 204
     84c:	7c 7c       	andi	r23, 0xCC	; 204
     84e:	7c 7c       	andi	r23, 0xCC	; 204
     850:	7d 7d       	andi	r23, 0xDD	; 221
     852:	7d 7d       	andi	r23, 0xDD	; 221
     854:	7d 7d       	andi	r23, 0xDD	; 221
     856:	7d 7d       	andi	r23, 0xDD	; 221
     858:	7d 7e       	andi	r23, 0xED	; 237
     85a:	7e 7e       	andi	r23, 0xEE	; 238
     85c:	7e 7e       	andi	r23, 0xEE	; 238
     85e:	7e 7e       	andi	r23, 0xEE	; 238
     860:	7f 7f       	andi	r23, 0xFF	; 255
     862:	7f 7f       	andi	r23, 0xFF	; 255
     864:	7f 7f       	andi	r23, 0xFF	; 255
     866:	7f 7f       	andi	r23, 0xFF	; 255

00000868 <_ZL17TRIANGLE2048_DATA>:
     868:	00 00 00 00 01 01 01 01 02 02 02 02 03 03 03 03     ................
     878:	04 04 04 04 04 05 05 05 05 06 06 06 07 07 07 07     ................
     888:	08 08 08 08 09 09 09 09 0a 0a 0a 0a 0b 0b 0b 0b     ................
     898:	0b 0c 0c 0c 0d 0d 0d 0d 0e 0e 0e 0e 0f 0f 0f 0f     ................
     8a8:	10 10 10 10 11 11 11 11 11 12 12 12 12 13 13 13     ................
     8b8:	13 14 14 14 14 15 15 15 15 16 16 16 16 17 17 17     ................
     8c8:	18 18 18 18 19 19 19 19 1a 1a 1a 1a 1b 1b 1b 1b     ................
     8d8:	1c 1c 1c 1c 1d 1d 1d 1d 1e 1e 1e 1e 1f 1f 1f 1f     ................
     8e8:	20 20 20 20 20 21 21 20 22 22 22 22 23 23 23 23          !! """"####
     8f8:	24 24 24 24 25 25 25 25 26 26 26 26 27 27 27 27     $$$$%%%%&&&&''''
     908:	28 28 28 28 28 29 29 29 29 2a 2a 2a 2a 2b 2b 2b     ((((())))****+++
     918:	2c 2c 2c 2c 2d 2d 2d 2d 2e 2e 2e 2e 2f 2f 2f 2f     ,,,,----....////
     928:	30 30 30 30 31 31 31 31 31 32 32 32 33 33 33 33     0000111112223333
     938:	34 34 34 34 34 35 35 35 36 36 36 36 36 37 37 37     4444455566666777
     948:	38 38 38 38 38 39 39 39 3a 3a 3a 3a 3b 3b 3b 3b     88888999::::;;;;
     958:	3c 3c 3c 3c 3c 3d 3d 3d 3e 3e 3e 3e 3e 3f 3f 3f     <<<<<===>>>>>???
     968:	3f 40 40 40 41 41 41 41 41 42 42 42 42 43 43 43     ?@@@AAAAABBBBCCC
     978:	44 44 44 44 45 45 45 45 46 46 46 46 47 47 47 47     DDDDEEEEFFFFGGGG
     988:	48 48 48 48 49 49 49 49 49 4a 4a 4a 4a 4b 4b 4b     HHHHIIIIIJJJJKKK
     998:	4c 4c 4c 4c 4d 4d 4d 4d 4d 4e 4e 4e 4e 4f 4f 4f     LLLLMMMMMNNNNOOO
     9a8:	50 50 50 50 51 51 51 51 51 52 52 52 53 53 53 53     PPPPQQQQQRRRSSSS
     9b8:	54 54 54 54 55 55 55 55 55 56 56 56 56 57 57 57     TTTTUUUUUVVVVWWW
     9c8:	58 58 58 58 58 59 59 59 5a 5a 5a 5a 5b 5b 5b 5b     XXXXXYYYZZZZ[[[[
     9d8:	5c 5c 5c 5c 5c 5d 5d 5d 5e 5e 5e 5e 5f 5f 5f 5f     \\\\\]]]^^^^____
     9e8:	5f 60 60 60 61 61 61 61 62 62 62 62 63 63 63 63     _```aaaabbbbcccc
     9f8:	63 64 64 64 65 65 65 65 65 66 66 66 66 67 67 67     cdddeeeeeffffggg
     a08:	67 68 68 68 69 69 69 69 69 6a 6a 6a 6a 6b 6b 6b     ghhhiiiiijjjjkkk
     a18:	6c 6c 6c 6c 6d 6d 6d 6d 6e 6e 6e 6e 6f 6f 6f 6f     llllmmmmnnnnoooo
     a28:	70 70 70 70 70 71 71 71 71 72 72 72 72 73 73 73     pppppqqqqrrrrsss
     a38:	73 74 74 74 74 75 75 75 75 76 76 76 77 77 77 77     sttttuuuuvvvwwww
     a48:	78 78 78 78 78 79 79 79 7a 7a 7a 7a 7b 7b 7b 7b     xxxxxyyyzzzz{{{{
     a58:	7c 7c 7c 7c 7d 7d 7d 7d 7d 7e 7e 7e 7f 7f 7f 7f     ||||}}}}}~~~....
     a68:	7f 7f 7f 7e 7e 7e 7e 7e 7d 7d 7d 7d 7c 7c 7c 7c     ...~~~~~}}}}||||
     a78:	7b 7b 7b 7b 7a 7a 7a 7a 79 79 79 79 78 78 78 78     {{{{zzzzyyyyxxxx
     a88:	77 77 77 77 76 76 76 76 75 75 75 75 74 74 74 74     wwwwvvvvuuuutttt
     a98:	73 73 73 73 72 72 72 71 71 71 71 70 70 70 70 6f     ssssrrrqqqqppppo
     aa8:	6f 6f 6f 6e 6e 6e 6e 6d 6d 6d 6d 6d 6c 6c 6c 6c     ooonnnnmmmmmllll
     ab8:	6b 6b 6b 6b 6a 6a 6a 69 69 69 69 68 68 68 68 68     kkkkjjjiiiihhhhh
     ac8:	67 67 67 66 66 66 66 66 65 65 65 65 64 64 64 63     gggfffffeeeedddc
     ad8:	63 63 63 62 62 62 62 61 61 61 61 60 60 60 60 60     cccbbbbaaaa`````
     ae8:	5f 5f 5f 5e 5e 5e 5e 5d 5d 5d 5d 5c 5c 5c 5c 5b     ___^^^^]]]]\\\\[
     af8:	5b 5b 5b 5b 5a 5a 5a 5a 59 59 59 59 58 58 58 58     [[[[ZZZZYYYYXXXX
     b08:	57 57 57 57 56 56 56 56 55 55 55 54 54 54 54 54     WWWWVVVVUUUTTTTT
     b18:	53 53 53 53 52 52 52 51 51 51 51 50 50 50 50 4f     SSSSRRRQQQQPPPPO
     b28:	4f 4f 4f 4e 4e 4e 4e 4e 4d 4d 4d 4d 4c 4c 4c 4c     OOONNNNNMMMMLLLL
     b38:	4b 4b 4b 4a 4a 4a 4a 4a 49 49 49 49 48 48 48 48     KKKJJJJJIIIIHHHH
     b48:	47 47 47 47 46 46 46 45 45 45 45 45 44 44 44 44     GGGGFFFEEEEEDDDD
     b58:	43 43 43 43 42 42 42 41 41 41 41 41 40 40 40 3f     CCCCBBBAAAAA@@@?
     b68:	3f 3f 3f 3f 3e 3e 3e 3e 3d 3d 3d 3c 3c 3c 3c 3c     ????>>>>===<<<<<
     b78:	3b 3b 3b 3b 3a 3a 3a 3a 39 39 39 38 38 38 38 38     ;;;;::::99988888
     b88:	37 37 37 37 36 36 36 36 35 35 35 35 34 34 34 33     7777666655554443
     b98:	33 33 33 32 32 32 32 32 31 31 31 31 30 30 30 2f     333222221111000/
     ba8:	2f 2f 2f 2e 2e 2e 2e 2e 2d 2d 2d 2d 2c 2c 2c 2b     ///.....----,,,+
     bb8:	2b 2b 2b 2a 2a 2a 2a 29 29 29 29 29 28 28 28 28     +++****)))))((((
     bc8:	27 27 27 26 26 26 26 26 25 25 25 24 24 24 24 24     '''&&&&&%%%$$$$$
     bd8:	23 23 23 22 22 22 22 21 21 20 21 21 20 20 20 20     ###""""!! !!    
     be8:	1f 1f 1f 1f 1e 1e 1e 1e 1d 1d 1d 1d 1c 1c 1c 1b     ................
     bf8:	1b 1b 1b 1b 1a 1a 1a 19 19 19 19 19 18 18 18 18     ................
     c08:	17 17 17 17 16 16 16 16 15 15 15 15 14 14 14 13     ................
     c18:	13 13 13 13 12 12 12 12 11 11 11 10 10 10 10 10     ................
     c28:	0f 0f 0f 0f 0e 0e 0e 0e 0d 0d 0d 0d 0c 0c 0c 0c     ................
     c38:	0b 0b 0b 0b 0a 0a 0a 0a 09 09 09 09 08 08 08 08     ................
     c48:	07 07 07 06 06 06 06 05 05 05 05 05 04 04 04 04     ................
     c58:	03 03 03 03 02 02 02 01 01 01 01 01 00 00 00 00     ................
     c68:	ff ff ff fe fe fe fe fd fd fd fd fc fc fc fc fb     ................
     c78:	fb fb fb fa fa fa fa fa f9 f9 f9 f8 f8 f8 f8 f8     ................
     c88:	f7 f7 f7 f7 f6 f6 f6 f5 f5 f5 f5 f4 f4 f4 f4 f4     ................
     c98:	f3 f3 f3 f3 f2 f2 f2 f1 f1 f1 f1 f1 f0 f0 f0 f0     ................
     ca8:	ef ef ef ee ee ee ee ed ed ed ed ed ec ec ec eb     ................
     cb8:	eb eb eb eb ea ea ea ea e9 e9 e9 e9 e8 e8 e8 e7     ................
     cc8:	e7 e7 e7 e7 e6 e6 e6 e6 e5 e5 e5 e4 e4 e4 e4 e3     ................
     cd8:	e3 e3 e3 e3 e2 e2 e2 e1 e1 e1 e1 e0 e0 e0 e0 e0     ................
     ce8:	df df df df de de de dd dd dd dd dc dc dc dc dc     ................
     cf8:	db db db da da da da d9 d9 d9 d9 d8 d8 d8 d8 d8     ................
     d08:	d7 d7 d7 d7 d6 d6 d6 d5 d5 d5 d5 d4 d4 d4 d4 d3     ................
     d18:	d3 d3 d3 d2 d2 d2 d2 d1 d1 d1 d1 d0 d0 d0 d0 d0     ................
     d28:	cf cf cf cf ce ce ce ce cd cd cd cd cc cc cc cb     ................
     d38:	cb cb cb ca ca ca ca c9 c9 c9 c9 c8 c8 c8 c8 c7     ................
     d48:	c7 c7 c7 c6 c6 c6 c6 c5 c5 c5 c5 c4 c4 c4 c4 c4     ................
     d58:	c3 c3 c3 c3 c2 c2 c2 c1 c1 c1 c1 c1 c0 c0 c0 c0     ................
     d68:	bf bf bf bf be be be bd bd bd bd bd bc bc bc bc     ................
     d78:	bb bb bb bb ba ba ba ba b9 b9 b9 b9 b8 b8 b8 b8     ................
     d88:	b7 b7 b7 b7 b6 b6 b6 b6 b5 b5 b5 b5 b4 b4 b4 b4     ................
     d98:	b3 b3 b3 b3 b2 b2 b2 b2 b1 b1 b1 b1 b0 b0 b0 b0     ................
     da8:	af af af ae ae ae ae ae ad ad ad ad ac ac ac ab     ................
     db8:	ab ab ab aa aa aa aa a9 a9 a9 a9 a8 a8 a8 a8 a7     ................
     dc8:	a7 a7 a7 a7 a6 a6 a6 a5 a5 a5 a5 a5 a4 a4 a4 a3     ................
     dd8:	a3 a3 a3 a2 a2 a2 a2 a1 a1 a1 a1 a1 a0 a0 a0 a0     ................
     de8:	9f 9f 9f 9f 9e 9e 9e 9e 9d 9d 9d 9d 9c 9c 9c 9c     ................
     df8:	9b 9b 9b 9b 9a 9a 9a 9a 99 99 99 98 98 98 98 97     ................
     e08:	97 97 97 97 96 96 96 96 95 95 95 94 94 94 94 93     ................
     e18:	93 93 93 93 92 92 92 92 91 91 91 91 90 90 90 8f     ................
     e28:	8f 8f 8f 8f 8e 8e 8e 8e 8d 8d 8d 8c 8c 8c 8c 8b     ................
     e38:	8b 8b 8b 8a 8a 8a 8a 89 89 89 89 89 88 88 88 88     ................
     e48:	87 87 87 86 86 86 86 86 85 85 85 85 84 84 84 84     ................
     e58:	83 83 83 82 82 82 82 81 81 81 81 81 80 80 80 80     ................
     e68:	80 80 80 80 81 81 81 81 81 82 82 82 83 83 83 83     ................
     e78:	83 84 84 84 85 85 85 85 86 86 86 86 87 87 87 87     ................
     e88:	87 88 88 88 88 89 89 89 8a 8a 8a 8a 8a 8b 8b 8b     ................
     e98:	8c 8c 8c 8c 8d 8d 8d 8d 8d 8e 8e 8e 8e 8f 8f 8f     ................
     ea8:	90 90 90 90 91 91 91 91 92 92 92 92 93 93 93 93     ................
     eb8:	94 94 94 94 95 95 95 95 96 96 96 96 97 97 97 97     ................
     ec8:	97 98 98 98 99 99 99 99 9a 9a 9a 9a 9a 9b 9b 9b     ................
     ed8:	9c 9c 9c 9c 9d 9d 9d 9d 9e 9e 9e 9e 9f 9f 9f 9f     ................
     ee8:	9f a0 a0 a0 a1 a1 a1 a1 a1 a2 a2 a2 a2 a3 a3 a3     ................
     ef8:	a4 a4 a4 a4 a4 a5 a5 a5 a5 a6 a6 a6 a7 a7 a7 a7     ................
     f08:	a7 a8 a8 a8 a9 a9 a9 a9 aa aa aa aa aa ab ab ab     ................
     f18:	ac ac ac ac ac ad ad ad ae ae ae ae ae af af af     ................
     f28:	af b0 b0 b0 b1 b1 b1 b1 b2 b2 b2 b2 b2 b3 b3 b3     ................
     f38:	b3 b4 b4 b4 b5 b5 b5 b5 b6 b6 b6 b6 b6 b7 b7 b7     ................
     f48:	b7 b8 b8 b8 b9 b9 b9 b9 ba ba ba ba bb bb bb bb     ................
     f58:	bc bc bc bc bd bd bd bd be be be be be bf bf bf     ................
     f68:	c0 c0 c0 c0 c0 c1 c1 c1 c2 c2 c2 c2 c2 c3 c3 c3     ................
     f78:	c3 c4 c4 c4 c5 c5 c5 c5 c6 c6 c6 c6 c6 c7 c7 c7     ................
     f88:	c7 c8 c8 c8 c8 c9 c9 c9 c9 ca ca ca cb cb cb cb     ................
     f98:	cb cc cc cc cc cd cd cd cd ce ce ce cf cf cf cf     ................
     fa8:	cf d0 d0 d0 d1 d1 d1 d1 d2 d2 d2 d2 d2 d3 d3 d3     ................
     fb8:	d3 d4 d4 d4 d4 d5 d5 d5 d5 d6 d6 d6 d7 d7 d7 d7     ................
     fc8:	d8 d8 d8 d8 d8 d9 d9 d9 d9 da da da db db db db     ................
     fd8:	db dc dc dc dc dd dd dd de de de de de df df df     ................
     fe8:	e0 e0 e0 e0 e1 e1 e1 e1 e1 e2 e2 e2 e3 e3 e3 e3     ................
     ff8:	e4 e4 e4 e4 e4 e5 e5 e5 e5 e6 e6 e6 e6 e7 e7 e7     ................
    1008:	e8 e8 e8 e8 e9 e9 e9 e9 e9 ea ea ea eb eb eb eb     ................
    1018:	ec ec ec ec ed ed ed ed ed ee ee ee ef ef ef ef     ................
    1028:	f0 f0 f0 f0 f1 f1 f1 f1 f2 f2 f2 f2 f3 f3 f3 f3     ................
    1038:	f3 f4 f4 f4 f5 f5 f5 f5 f5 f6 f6 f6 f7 f7 f7 f7     ................
    1048:	f8 f8 f8 f8 f9 f9 f9 f9 fa fa fa fa fb fb fb fb     ................
    1058:	fb fc fc fc fd fd fd fd fe fe fe fe ff ff ff ff     ................

00001068 <_ZL25SQUARE_NO_ALIAS_2048_DATA>:
    1068:	00 2f 59 79 7f 7f 7f 7f 7f 78 74 75 7a 7f 7f 7f     ./Yy.....xtuz...
    1078:	7f 7f 7f 7c 7a 7a 7c 7f 7f 7f 7f 7f 7f 7e 7c 7c     ...|zz|......~||
    1088:	7d 7f 7f 7f 7f 7f 7f 7f 7d 7d 7d 7e 7f 7f 7f 7f     }.......}}}~....
    1098:	7f 7f 7e 7d 7d 7e 7f 7f 7f 7f 7f 7f 7e 7e 7e 7e     ..~}}~......~~~~
    10a8:	7f 7f 7f 7f 7f 7f 7f 7e 7e 7e 7f 7f 7f 7f 7f 7f     .......~~~......
    10b8:	7f 7e 7e 7e 7f 7f 7f 7f 7f 7f 7f 7e 7e 7e 7f 7f     .~~~.......~~~..
    10c8:	7f 7f 7f 7f 7f 7f 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f     ......~~........
    10d8:	7e 7e 7f 7f 7f 7f 7f 7f 7f 7f 7f 7e 7f 7f 7f 7f     ~~.........~....
    10e8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    10f8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1108:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1118:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1128:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1138:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1148:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1158:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1168:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1178:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1188:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1198:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11a8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11b8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11c8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11d8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11e8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    11f8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1208:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1218:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1228:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1238:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1248:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1258:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1268:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1278:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1288:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1298:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12a8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12b8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12c8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12d8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12e8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    12f8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1308:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1318:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1328:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1338:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1348:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1358:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1368:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1378:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1388:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1398:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    13a8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    13b8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    13c8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    13d8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    13e8:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7e     ...............~
    13f8:	7e 7f 7f 7f 7f 7f 7f 7f 7f 7e 7e 7f 7f 7f 7f 7f     ~........~~.....
    1408:	7f 7f 7f 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f 7e 7e 7e     ...~~........~~~
    1418:	7f 7f 7f 7f 7f 7f 7f 7e 7e 7e 7f 7f 7f 7f 7f 7f     .......~~~......
    1428:	7f 7e 7e 7e 7e 7f 7f 7f 7f 7f 7f 7e 7d 7d 7e 7f     .~~~~......~}}~.
    1438:	7f 7f 7f 7f 7f 7e 7d 7d 7d 7f 7f 7f 7f 7f 7f 7f     .....~}}}.......
    1448:	7d 7c 7c 7e 7f 7f 7f 7f 7f 7f 7c 7a 7a 7c 7f 7f     }||~......|zz|..
    1458:	7f 7f 7f 7f 7a 75 74 78 7f 7f 7f 7f 7f 79 59 2f     ....zutx.....yY/
    1468:	00 d0 a6 86 80 80 80 80 80 87 8b 8a 85 80 80 80     ................
    1478:	80 80 80 83 85 85 83 80 80 80 80 80 80 81 83 83     ................
    1488:	82 80 80 80 80 80 80 80 82 82 82 81 80 80 80 80     ................
    1498:	80 80 81 82 82 81 80 80 80 80 80 80 81 81 81 81     ................
    14a8:	80 80 80 80 80 80 80 81 81 81 80 80 80 80 80 80     ................
    14b8:	80 81 81 81 80 80 80 80 80 80 80 80 81 81 80 80     ................
    14c8:	80 80 80 80 80 80 81 81 80 80 80 80 80 80 80 80     ................
    14d8:	80 81 80 80 80 80 80 80 80 80 80 81 80 80 80 80     ................
    14e8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    14f8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1508:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1518:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1528:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1538:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1548:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1558:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1568:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1578:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1588:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1598:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15a8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15b8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15c8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15d8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15e8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    15f8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1608:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1618:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1628:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1638:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1648:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1658:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1668:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1678:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1688:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1698:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16a8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16b8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16c8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16d8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16e8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16f8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1708:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1718:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1728:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1738:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1748:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1758:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1768:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1778:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1788:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1798:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17a8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17b8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17c8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17d8:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17e8:	80 80 80 80 80 81 80 80 80 80 80 80 80 80 80 81     ................
    17f8:	81 80 80 80 80 80 80 80 80 81 81 80 80 80 80 80     ................
    1808:	80 80 80 81 81 81 80 80 80 80 80 80 80 81 81 81     ................
    1818:	80 80 80 80 80 80 80 81 81 81 80 80 80 80 80 80     ................
    1828:	80 81 81 81 81 80 80 80 80 80 80 81 82 82 81 80     ................
    1838:	80 80 80 80 80 81 82 82 82 80 80 80 80 80 80 80     ................
    1848:	82 83 83 81 80 80 80 80 80 80 83 85 85 83 80 80     ................
    1858:	80 80 80 80 85 8a 8b 87 80 80 80 80 80 86 a6 d0     ................

00001868 <_ZL12SIN2048_DATA>:
    1868:	00 00 00 01 01 01 02 02 03 03 03 04 04 05 05 05     ................
    1878:	06 06 07 07 07 08 08 09 09 09 0a 0a 0a 0b 0b 0c     ................
    1888:	0c 0c 0d 0d 0e 0e 0e 0f 0f 10 10 10 11 11 12 12     ................
    1898:	12 13 13 13 14 14 15 15 15 16 16 17 17 17 18 18     ................
    18a8:	18 19 19 1a 1a 1a 1b 1b 1c 1c 1c 1d 1d 1d 1e 1e     ................
    18b8:	1f 1f 1f 20 20 20 21 21 22 22 22 23 23 24 24 24     ...   !!"""##$$$
    18c8:	25 25 25 26 26 27 27 27 28 28 28 29 29 2a 2a 2a     %%%&&'''((())***
    18d8:	2b 2b 2b 2c 2c 2c 2d 2d 2e 2e 2e 2f 2f 2f 30 30     +++,,,--...///00
    18e8:	30 31 31 32 32 32 33 33 33 34 34 34 35 35 36 36     0112223334445566
    18f8:	36 37 37 37 38 38 38 39 39 39 3a 3a 3a 3b 3b 3b     6777888999:::;;;
    1908:	3c 3c 3d 3d 3d 3e 3e 3e 3f 3f 3f 40 40 40 41 41     <<===>>>???@@@AA
    1918:	41 42 42 42 43 43 43 44 44 44 45 45 45 46 46 46     ABBBCCCDDDEEEFFF
    1928:	47 47 47 48 48 48 49 49 49 4a 4a 4a 4a 4b 4b 4b     GGGHHHIIIJJJJKKK
    1938:	4c 4c 4c 4d 4d 4d 4e 4e 4e 4f 4f 4f 4f 50 50 50     LLLMMMNNNOOOOPPP
    1948:	51 51 51 52 52 52 53 53 53 53 54 54 54 55 55 55     QQQRRRSSSSTTTUUU
    1958:	55 56 56 56 57 57 57 57 58 58 58 59 59 59 59 5a     UVVVWWWWXXXYYYYZ
    1968:	5a 5a 5b 5b 5b 5b 5c 5c 5c 5c 5d 5d 5d 5e 5e 5e     ZZ[[[[\\\\]]]^^^
    1978:	5e 5f 5f 5f 5f 60 60 60 60 61 61 61 61 62 62 62     ^____````aaaabbb
    1988:	62 63 63 63 63 64 64 64 64 65 65 65 65 66 66 66     bccccddddeeeefff
    1998:	66 67 67 67 67 67 68 68 68 68 69 69 69 69 69 6a     fggggghhhhiiiiij
    19a8:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6d 6d 6d     jjjkkkkklllllmmm
    19b8:	6d 6d 6e 6e 6e 6e 6e 6f 6f 6f 6f 6f 70 70 70 70     mmnnnnnooooopppp
    19c8:	70 71 71 71 71 71 71 72 72 72 72 72 73 73 73 73     pqqqqqqrrrrrssss
    19d8:	73 73 74 74 74 74 74 74 75 75 75 75 75 75 75 76     ssttttttuuuuuuuv
    19e8:	76 76 76 76 76 77 77 77 77 77 77 77 77 78 78 78     vvvvvwwwwwwwwxxx
    19f8:	78 78 78 78 79 79 79 79 79 79 79 79 7a 7a 7a 7a     xxxxyyyyyyyyzzzz
    1a08:	7a 7a 7a 7a 7a 7b 7b 7b 7b 7b 7b 7b 7b 7b 7b 7c     zzzzz{{{{{{{{{{|
    1a18:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7d 7d 7d 7d 7d 7d     ||||||||||}}}}}}
    1a28:	7d 7d 7d 7d 7d 7d 7d 7e 7e 7e 7e 7e 7e 7e 7e 7e     }}}}}}}~~~~~~~~~
    1a38:	7e 7e 7e 7e 7e 7e 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f     ~~~~~~~~........
    1a48:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1a58:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1a68:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1a78:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1a88:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7e 7e 7e 7e 7e 7e 7e     .........~~~~~~~
    1a98:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7d 7d 7d 7d 7d 7d     ~~~~~~~~~~}}}}}}
    1aa8:	7d 7d 7d 7d 7d 7d 7d 7c 7c 7c 7c 7c 7c 7c 7c 7c     }}}}}}}|||||||||
    1ab8:	7c 7c 7b 7b 7b 7b 7b 7b 7b 7b 7b 7b 7a 7a 7a 7a     ||{{{{{{{{{{zzzz
    1ac8:	7a 7a 7a 7a 7a 79 79 79 79 79 79 79 79 78 78 78     zzzzzyyyyyyyyxxx
    1ad8:	78 78 78 78 77 77 77 77 77 77 77 76 76 76 76 76     xxxxwwwwwwwvvvvv
    1ae8:	76 76 75 75 75 75 75 75 75 74 74 74 74 74 74 73     vvuuuuuuutttttts
    1af8:	73 73 73 73 73 72 72 72 72 72 71 71 71 71 71 71     sssssrrrrrqqqqqq
    1b08:	70 70 70 70 70 6f 6f 6f 6f 6f 6e 6e 6e 6e 6e 6d     pppppooooonnnnnm
    1b18:	6d 6d 6d 6d 6c 6c 6c 6c 6c 6b 6b 6b 6b 6b 6a 6a     mmmmlllllkkkkkjj
    1b28:	6a 6a 6a 69 69 69 69 68 68 68 68 67 67 67 67 67     jjjiiiihhhhggggg
    1b38:	66 66 66 66 65 65 65 65 64 64 64 64 63 63 63 63     ffffeeeeddddcccc
    1b48:	62 62 62 62 61 61 61 61 60 60 60 60 5f 5f 5f 5f     bbbbaaaa````____
    1b58:	5e 5e 5e 5e 5d 5d 5d 5c 5c 5c 5c 5b 5b 5b 5b 5a     ^^^^]]]\\\\[[[[Z
    1b68:	5a 5a 59 59 59 59 58 58 58 57 57 57 57 56 56 56     ZZYYYYXXXWWWWVVV
    1b78:	55 55 55 55 54 54 54 53 53 53 53 52 52 52 51 51     UUUUTTTSSSSRRRQQ
    1b88:	51 50 50 50 4f 4f 4f 4f 4e 4e 4e 4d 4d 4d 4c 4c     QPPPOOOONNNMMMLL
    1b98:	4c 4b 4b 4b 4a 4a 4a 4a 49 49 49 48 48 48 47 47     LKKKJJJJIIIHHHGG
    1ba8:	47 46 46 46 45 45 45 44 44 44 43 43 43 42 42 42     GFFFEEEDDDCCCBBB
    1bb8:	41 41 41 40 40 40 3f 3f 3f 3e 3e 3e 3d 3d 3d 3c     AAA@@@???>>>===<
    1bc8:	3c 3b 3b 3b 3a 3a 3a 39 39 39 38 38 38 37 37 37     <;;;:::999888777
    1bd8:	36 36 36 35 35 34 34 34 33 33 33 32 32 32 31 31     6665544433322211
    1be8:	30 30 30 2f 2f 2f 2e 2e 2e 2d 2d 2c 2c 2c 2b 2b     000///...--,,,++
    1bf8:	2b 2a 2a 2a 29 29 28 28 28 27 27 27 26 26 25 25     +***))((('''&&%%
    1c08:	25 24 24 24 23 23 22 22 22 22 21 21 20 20 1f 1f     %$$$##""""!!  ..
    1c18:	1f 1e 1e 1d 1d 1d 1c 1c 1c 1b 1b 1a 1a 1a 19 19     ................
    1c28:	18 18 18 17 17 17 16 16 15 15 15 14 14 13 13 13     ................
    1c38:	12 12 12 11 11 10 10 10 0f 0f 0e 0e 0e 0d 0d 0c     ................
    1c48:	0c 0c 0b 0b 0a 0a 0a 09 09 09 08 08 07 07 07 06     ................
    1c58:	06 05 05 05 04 04 03 03 03 02 02 01 01 01 00 00     ................
    1c68:	ff ff ff fe fe fe fd fd fc fc fc fb fb fa fa fa     ................
    1c78:	f9 f9 f8 f8 f8 f7 f7 f6 f6 f6 f5 f5 f5 f4 f4 f3     ................
    1c88:	f3 f3 f2 f2 f1 f1 f1 f0 f0 ef ef ef ee ee ed ed     ................
    1c98:	ed ec ec ec eb eb ea ea ea e9 e9 e8 e8 e8 e7 e7     ................
    1ca8:	e7 e6 e6 e5 e5 e5 e4 e4 e3 e3 e3 e2 e2 e2 e1 e1     ................
    1cb8:	e0 e0 e0 df df df de de dd dd dd dc dc db db db     ................
    1cc8:	da da da d9 d9 d8 d8 d8 d7 d7 d7 d6 d6 d6 d5 d5     ................
    1cd8:	d4 d4 d4 d3 d3 d3 d2 d2 d1 d1 d1 d0 d0 d0 cf cf     ................
    1ce8:	cf ce ce cd cd cd cc cc cc cb cb cb ca ca c9 c9     ................
    1cf8:	c9 c8 c8 c8 c7 c7 c7 c6 c6 c6 c5 c5 c5 c4 c4 c4     ................
    1d08:	c3 c3 c2 c2 c2 c1 c1 c1 c0 c0 c0 bf bf bf be be     ................
    1d18:	be bd bd bd bc bc bc bb bb bb ba ba ba b9 b9 b9     ................
    1d28:	b8 b8 b8 b7 b7 b7 b6 b6 b6 b5 b5 b5 b5 b4 b4 b4     ................
    1d38:	b3 b3 b3 b2 b2 b2 b1 b1 b1 b0 b0 b0 b0 af af af     ................
    1d48:	ae ae ae ad ad ad ac ac ac ac ab ab ab aa aa aa     ................
    1d58:	aa a9 a9 a9 a8 a8 a8 a8 a7 a7 a7 a6 a6 a6 a6 a5     ................
    1d68:	a5 a5 a4 a4 a4 a4 a3 a3 a3 a3 a2 a2 a2 a1 a1 a1     ................
    1d78:	a1 a0 a0 a0 a0 9f 9f 9f 9f 9e 9e 9e 9e 9d 9d 9d     ................
    1d88:	9d 9c 9c 9c 9c 9b 9b 9b 9b 9a 9a 9a 9a 99 99 99     ................
    1d98:	99 98 98 98 98 98 97 97 97 97 96 96 96 96 96 95     ................
    1da8:	95 95 95 94 94 94 94 94 93 93 93 93 93 92 92 92     ................
    1db8:	92 92 91 91 91 91 91 90 90 90 90 90 8f 8f 8f 8f     ................
    1dc8:	8f 8e 8e 8e 8e 8e 8e 8d 8d 8d 8d 8d 8c 8c 8c 8c     ................
    1dd8:	8c 8c 8b 8b 8b 8b 8b 8b 8a 8a 8a 8a 8a 8a 8a 89     ................
    1de8:	89 89 89 89 89 89 88 88 88 88 88 88 88 87 87 87     ................
    1df8:	87 87 87 87 86 86 86 86 86 86 86 86 85 85 85 85     ................
    1e08:	85 85 85 85 85 84 84 84 84 84 84 84 84 84 84 83     ................
    1e18:	83 83 83 83 83 83 83 83 83 83 82 82 82 82 82 82     ................
    1e28:	82 82 82 82 82 82 82 81 81 81 81 81 81 81 81 81     ................
    1e38:	81 81 81 81 81 81 81 81 80 80 80 80 80 80 80 80     ................
    1e48:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1e58:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1e68:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1e78:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1e88:	80 80 80 80 80 80 80 80 80 81 81 81 81 81 81 81     ................
    1e98:	81 81 81 81 81 81 81 81 81 81 82 82 82 82 82 82     ................
    1ea8:	82 82 82 82 82 82 82 83 83 83 83 83 83 83 83 83     ................
    1eb8:	83 83 84 84 84 84 84 84 84 84 84 84 85 85 85 85     ................
    1ec8:	85 85 85 85 85 86 86 86 86 86 86 86 86 87 87 87     ................
    1ed8:	87 87 87 87 88 88 88 88 88 88 88 88 89 89 89 89     ................
    1ee8:	89 89 8a 8a 8a 8a 8a 8a 8a 8b 8b 8b 8b 8b 8b 8c     ................
    1ef8:	8c 8c 8c 8c 8c 8d 8d 8d 8d 8d 8e 8e 8e 8e 8e 8e     ................
    1f08:	8f 8f 8f 8f 8f 90 90 90 90 90 91 91 91 91 91 92     ................
    1f18:	92 92 92 92 93 93 93 93 93 94 94 94 94 94 95 95     ................
    1f28:	95 95 96 96 96 96 96 97 97 97 97 98 98 98 98 98     ................
    1f38:	99 99 99 99 9a 9a 9a 9a 9b 9b 9b 9b 9c 9c 9c 9c     ................
    1f48:	9d 9d 9d 9d 9e 9e 9e 9e 9f 9f 9f 9f a0 a0 a0 a0     ................
    1f58:	a1 a1 a1 a1 a2 a2 a2 a3 a3 a3 a3 a4 a4 a4 a4 a5     ................
    1f68:	a5 a5 a6 a6 a6 a6 a7 a7 a7 a8 a8 a8 a8 a9 a9 a9     ................
    1f78:	aa aa aa aa ab ab ab ac ac ac ac ad ad ad ae ae     ................
    1f88:	ae af af af b0 b0 b0 b0 b1 b1 b1 b2 b2 b2 b3 b3     ................
    1f98:	b3 b4 b4 b4 b5 b5 b5 b5 b6 b6 b6 b7 b7 b7 b8 b8     ................
    1fa8:	b8 b9 b9 b9 ba ba ba bb bb bb bc bc bc bd bd bd     ................
    1fb8:	be be be bf bf bf c0 c0 c0 c1 c1 c1 c2 c2 c2 c3     ................
    1fc8:	c3 c4 c4 c4 c5 c5 c5 c6 c6 c6 c7 c7 c7 c8 c8 c8     ................
    1fd8:	c9 c9 c9 ca ca cb cb cb cc cc cc cd cd cd ce ce     ................
    1fe8:	cf cf cf d0 d0 d0 d1 d1 d1 d2 d2 d3 d3 d3 d4 d4     ................
    1ff8:	d4 d5 d5 d5 d6 d6 d7 d7 d7 d8 d8 d8 d9 d9 da da     ................
    2008:	da db db db dc dc dd dd dd de de de df df e0 e0     ................
    2018:	e0 e1 e1 e2 e2 e2 e3 e3 e3 e4 e4 e5 e5 e5 e6 e6     ................
    2028:	e7 e7 e7 e8 e8 e8 e9 e9 ea ea ea eb eb ec ec ec     ................
    2038:	ed ed ed ee ee ef ef ef f0 f0 f1 f1 f1 f2 f2 f3     ................
    2048:	f3 f3 f4 f4 f5 f5 f5 f6 f6 f6 f7 f7 f8 f8 f8 f9     ................
    2058:	f9 fa fa fa fb fb fc fc fc fd fd fe fe fe ff ff     ................

00002068 <_ZL8preScale>:
    2068:	01 00 00 02 00 00 03 00 04 00 05                    ...........

00002073 <digital_pin_to_bit_mask_PGM>:
    2073:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    2083:	04 08 10 20                                         ... 

00002087 <digital_pin_to_port_PGM>:
    2087:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    2097:	03 03 03 03                                         ....

0000209b <port_to_output_PGM>:
    209b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000020a5 <port_to_mode_PGM>:
    20a5:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000020b0 <__ctors_start>:
    20b0:	ee 12       	cpse	r14, r30
    20b2:	35 14       	cp	r3, r5
    20b4:	09 15       	cp	r16, r9
    20b6:	3e 19       	sub	r19, r14

000020b8 <__ctors_end>:
    20b8:	11 24       	eor	r1, r1
    20ba:	1f be       	out	0x3f, r1	; 63
    20bc:	cf ef       	ldi	r28, 0xFF	; 255
    20be:	d8 e0       	ldi	r29, 0x08	; 8
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	cd bf       	out	0x3d, r28	; 61

000020c4 <__do_copy_data>:
    20c4:	11 e0       	ldi	r17, 0x01	; 1
    20c6:	a0 e0       	ldi	r26, 0x00	; 0
    20c8:	b1 e0       	ldi	r27, 0x01	; 1
    20ca:	e8 e3       	ldi	r30, 0x38	; 56
    20cc:	f7 e3       	ldi	r31, 0x37	; 55
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <__do_copy_data+0x10>
    20d0:	05 90       	lpm	r0, Z+
    20d2:	0d 92       	st	X+, r0
    20d4:	aa 31       	cpi	r26, 0x1A	; 26
    20d6:	b1 07       	cpc	r27, r17
    20d8:	d9 f7       	brne	.-10     	; 0x20d0 <__do_copy_data+0xc>

000020da <__do_clear_bss>:
    20da:	24 e0       	ldi	r18, 0x04	; 4
    20dc:	aa e1       	ldi	r26, 0x1A	; 26
    20de:	b1 e0       	ldi	r27, 0x01	; 1
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <.do_clear_bss_start>

000020e2 <.do_clear_bss_loop>:
    20e2:	1d 92       	st	X+, r1

000020e4 <.do_clear_bss_start>:
    20e4:	a2 39       	cpi	r26, 0x92	; 146
    20e6:	b2 07       	cpc	r27, r18
    20e8:	e1 f7       	brne	.-8      	; 0x20e2 <.do_clear_bss_loop>

000020ea <__do_global_ctors>:
    20ea:	10 e1       	ldi	r17, 0x10	; 16
    20ec:	cc e5       	ldi	r28, 0x5C	; 92
    20ee:	d0 e1       	ldi	r29, 0x10	; 16
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <__do_global_ctors+0x10>
    20f2:	21 97       	sbiw	r28, 0x01	; 1
    20f4:	fe 01       	movw	r30, r28
    20f6:	0e 94 94 1b 	call	0x3728	; 0x3728 <__tablejump2__>
    20fa:	c8 35       	cpi	r28, 0x58	; 88
    20fc:	d1 07       	cpc	r29, r17
    20fe:	c9 f7       	brne	.-14     	; 0x20f2 <__do_global_ctors+0x8>
    2100:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <main>
    2104:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <_exit>

00002108 <__bad_interrupt>:
    2108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000210c <setup>:

void loop(){
	audioHook(); // required here
}

void degugI2C(){
    210c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <_Z23initialize_twi_nonblockv>
    2110:	80 e4       	ldi	r24, 0x40	; 64
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 77 13 	call	0x26ee	; 0x26ee <_Z10startMozzii>
    2118:	8f b7       	in	r24, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e8       	ldi	r21, 0x80	; 128
    2120:	6b e1       	ldi	r22, 0x1B	; 27
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <osc+0x4>
    2128:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <osc+0x5>
    212c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <osc+0x6>
    2130:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <osc+0x7>
    2134:	8f bf       	out	0x3f, r24	; 63
    2136:	8f b7       	in	r24, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e8       	ldi	r21, 0x80	; 128
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <lfo+0x4>
    2146:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <lfo+0x5>
    214a:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <lfo+0x6>
    214e:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <lfo+0x7>
    2152:	8f bf       	out	0x3f, r24	; 63
    2154:	e0 e6       	ldi	r30, 0x60	; 96
    2156:	f1 e0       	ldi	r31, 0x01	; 1
    2158:	86 e6       	ldi	r24, 0x66	; 102
    215a:	91 e1       	ldi	r25, 0x11	; 17
    215c:	a3 e0       	ldi	r26, 0x03	; 3
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	86 83       	std	Z+6, r24	; 0x06
    2162:	97 83       	std	Z+7, r25	; 0x07
    2164:	a0 87       	std	Z+8, r26	; 0x08
    2166:	b1 87       	std	Z+9, r27	; 0x09
    2168:	88 e2       	ldi	r24, 0x28	; 40
    216a:	84 83       	std	Z+4, r24	; 0x04
    216c:	85 e6       	ldi	r24, 0x65	; 101
    216e:	85 83       	std	Z+5, r24	; 0x05
    2170:	e7 e2       	ldi	r30, 0x27	; 39
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	85 87       	std	Z+13, r24	; 0x0d
    2178:	10 86       	std	Z+8, r1	; 0x08
    217a:	17 82       	std	Z+7, r1	; 0x07
    217c:	40 81       	ld	r20, Z
    217e:	51 81       	ldd	r21, Z+1	; 0x01
    2180:	11 86       	std	Z+9, r1	; 0x09
    2182:	12 86       	std	Z+10, r1	; 0x0a
    2184:	13 86       	std	Z+11, r1	; 0x0b
    2186:	14 86       	std	Z+12, r1	; 0x0c
    2188:	8c e0       	ldi	r24, 0x0C	; 12
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	90 8b       	std	Z+16, r25	; 0x10
    218e:	87 87       	std	Z+15, r24	; 0x0f
    2190:	9a 01       	movw	r18, r20
    2192:	ac e0       	ldi	r26, 0x0C	; 12
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__umulhisi3>
    219a:	61 8b       	std	Z+17, r22	; 0x11
    219c:	72 8b       	std	Z+18, r23	; 0x12
    219e:	83 8b       	std	Z+19, r24	; 0x13
    21a0:	94 8b       	std	Z+20, r25	; 0x14
    21a2:	84 eb       	ldi	r24, 0xB4	; 180
    21a4:	85 8f       	std	Z+29, r24	; 0x1d
    21a6:	15 a2       	std	Z+37, r1	; 0x25
    21a8:	8f e0       	ldi	r24, 0x0F	; 15
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	90 a3       	std	Z+32, r25	; 0x20
    21ae:	87 8f       	std	Z+31, r24	; 0x1f
    21b0:	af e0       	ldi	r26, 0x0F	; 15
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__umulhisi3>
    21b8:	61 a3       	std	Z+33, r22	; 0x21
    21ba:	72 a3       	std	Z+34, r23	; 0x22
    21bc:	83 a3       	std	Z+35, r24	; 0x23
    21be:	94 a3       	std	Z+36, r25	; 0x24
    21c0:	63 e0       	ldi	r22, 0x03	; 3
    21c2:	88 e0       	ldi	r24, 0x08	; 8
    21c4:	0c 94 3e 15 	jmp	0x2a7c	; 0x2a7c <_Z20twi_initiateReadFromhh>

000021c8 <_Z13updateControlv>:
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_Z20twi_continueReadFromv>
    21d0:	63 e0       	ldi	r22, 0x03	; 3
    21d2:	8e e1       	ldi	r24, 0x1E	; 30
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_Z20twi_readMasterBufferPhh>
    21da:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <message>
    21de:	88 23       	and	r24, r24
    21e0:	a9 f0       	breq	.+42     	; 0x220c <_Z13updateControlv+0x44>
    21e2:	98 2f       	mov	r25, r24
    21e4:	9f 70       	andi	r25, 0x0F	; 15
    21e6:	91 50       	subi	r25, 0x01	; 1
    21e8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <menu>
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	b4 e0       	ldi	r27, 0x04	; 4
    21f0:	95 95       	asr	r25
    21f2:	87 95       	ror	r24
    21f4:	ba 95       	dec	r27
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <_Z13updateControlv+0x28>
    21f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <paramAddr>
    21fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <message+0x1>
    2200:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <message+0x2>
    2204:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
    2208:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
    220c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <menu>
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f4       	brne	.+2      	; 0x2216 <_Z13updateControlv+0x4e>
    2214:	7d c0       	rjmp	.+250    	; 0x2310 <_Z13updateControlv+0x148>
    2216:	38 f0       	brcs	.+14     	; 0x2226 <_Z13updateControlv+0x5e>
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	09 f4       	brne	.+2      	; 0x221e <_Z13updateControlv+0x56>
    221c:	a3 c0       	rjmp	.+326    	; 0x2364 <_Z13updateControlv+0x19c>
    221e:	84 30       	cpi	r24, 0x04	; 4
    2220:	09 f4       	brne	.+2      	; 0x2224 <_Z13updateControlv+0x5c>
    2222:	18 c1       	rjmp	.+560    	; 0x2454 <_Z13updateControlv+0x28c>
    2224:	2d c1       	rjmp	.+602    	; 0x2480 <_Z13updateControlv+0x2b8>
    2226:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <paramAddr>
    222a:	81 11       	cpse	r24, r1
    222c:	0f c0       	rjmp	.+30     	; 0x224c <_Z13updateControlv+0x84>
    222e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
    2232:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	e0 50       	subi	r30, 0x00	; 0
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <osc+0x9>
    2246:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <osc+0x8>
    224a:	1c c0       	rjmp	.+56     	; 0x2284 <_Z13updateControlv+0xbc>
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	d1 f4       	brne	.+52     	; 0x2284 <_Z13updateControlv+0xbc>
    2250:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    2254:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
    2258:	2f b7       	in	r18, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	09 2e       	mov	r0, r25
    225e:	00 0c       	add	r0, r0
    2260:	aa 0b       	sbc	r26, r26
    2262:	bb 0b       	sbc	r27, r27
    2264:	ed e0       	ldi	r30, 0x0D	; 13
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	aa 1f       	adc	r26, r26
    226c:	bb 1f       	adc	r27, r27
    226e:	ea 95       	dec	r30
    2270:	d1 f7       	brne	.-12     	; 0x2266 <_Z13updateControlv+0x9e>
    2272:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <osc+0x4>
    2276:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <osc+0x5>
    227a:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <osc+0x6>
    227e:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <osc+0x7>
    2282:	2f bf       	out	0x3f, r18	; 63
    2284:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <paramAddr>
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	79 f4       	brne	.+30     	; 0x22aa <_Z13updateControlv+0xe2>
    228c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
    2290:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	e0 50       	subi	r30, 0x00	; 0
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <lfo+0x9>
    22a4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <lfo+0x8>
    22a8:	eb c0       	rjmp	.+470    	; 0x2480 <_Z13updateControlv+0x2b8>
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <_Z13updateControlv+0xe8>
    22ae:	e8 c0       	rjmp	.+464    	; 0x2480 <_Z13updateControlv+0x2b8>
    22b0:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
    22b4:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x1>
    22b8:	07 2e       	mov	r0, r23
    22ba:	00 0c       	add	r0, r0
    22bc:	88 0b       	sbc	r24, r24
    22be:	99 0b       	sbc	r25, r25
    22c0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__floatsisf>
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	48 ec       	ldi	r20, 0xC8	; 200
    22ca:	52 e4       	ldi	r21, 0x42	; 66
    22cc:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__divsf3>
    22d0:	cf b7       	in	r28, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsf3>
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	58 e3       	ldi	r21, 0x38	; 56
    22e8:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsf3>
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsf3>
    22f8:	0e 94 57 17 	call	0x2eae	; 0x2eae <__fixunssfsi>
    22fc:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <lfo+0x4>
    2300:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <lfo+0x5>
    2304:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <lfo+0x6>
    2308:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <lfo+0x7>
    230c:	cf bf       	out	0x3f, r28	; 63
    230e:	b8 c0       	rjmp	.+368    	; 0x2480 <_Z13updateControlv+0x2b8>
    2310:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <paramAddr>
    2314:	81 30       	cpi	r24, 0x01	; 1
    2316:	49 f4       	brne	.+18     	; 0x232a <_Z13updateControlv+0x162>
    2318:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    231c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
    2320:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <filterFreq+0x1>
    2324:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <filterFreq>
    2328:	ab c0       	rjmp	.+342    	; 0x2480 <_Z13updateControlv+0x2b8>
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	99 f4       	brne	.+38     	; 0x2354 <_Z13updateControlv+0x18c>
    232e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    2332:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <svf+0x4>
    2336:	d8 2f       	mov	r29, r24
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	c8 2f       	mov	r28, r24
    233c:	be 01       	movw	r22, r28
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__floatunsisf>
    2346:	0e 94 87 18 	call	0x310e	; 0x310e <sqrt>
    234a:	0e 94 57 17 	call	0x2eae	; 0x2eae <__fixunssfsi>
    234e:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <svf+0x5>
    2352:	96 c0       	rjmp	.+300    	; 0x2480 <_Z13updateControlv+0x2b8>
    2354:	83 30       	cpi	r24, 0x03	; 3
    2356:	09 f0       	breq	.+2      	; 0x235a <_Z13updateControlv+0x192>
    2358:	93 c0       	rjmp	.+294    	; 0x2480 <_Z13updateControlv+0x2b8>
    235a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    235e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <lfoFil>
    2362:	8e c0       	rjmp	.+284    	; 0x2480 <_Z13updateControlv+0x2b8>
    2364:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <paramAddr>
    2368:	81 11       	cpse	r24, r1
    236a:	23 c0       	rjmp	.+70     	; 0x23b2 <_Z13updateControlv+0x1ea>
    236c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
    2370:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
    2374:	c9 01       	movw	r24, r18
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	9c 01       	movw	r18, r24
    237c:	ad 01       	movw	r20, r26
    237e:	64 e0       	ldi	r22, 0x04	; 4
    2380:	56 95       	lsr	r21
    2382:	47 95       	ror	r20
    2384:	37 95       	ror	r19
    2386:	27 95       	ror	r18
    2388:	6a 95       	dec	r22
    238a:	d1 f7       	brne	.-12     	; 0x2380 <_Z13updateControlv+0x1b8>
    238c:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <env+0x8>
    2390:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <env+0x7>
    2394:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <env>
    2398:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <env+0x1>
    239c:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    23a0:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <env+0x9>
    23a4:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <env+0xa>
    23a8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <env+0xb>
    23ac:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <env+0xc>
    23b0:	67 c0       	rjmp	.+206    	; 0x2480 <_Z13updateControlv+0x2b8>
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	19 f5       	brne	.+70     	; 0x23fc <_Z13updateControlv+0x234>
    23b6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
    23ba:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
    23be:	c9 01       	movw	r24, r18
    23c0:	a0 e0       	ldi	r26, 0x00	; 0
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	9c 01       	movw	r18, r24
    23c6:	ad 01       	movw	r20, r26
    23c8:	94 e0       	ldi	r25, 0x04	; 4
    23ca:	56 95       	lsr	r21
    23cc:	47 95       	ror	r20
    23ce:	37 95       	ror	r19
    23d0:	27 95       	ror	r18
    23d2:	9a 95       	dec	r25
    23d4:	d1 f7       	brne	.-12     	; 0x23ca <_Z13updateControlv+0x202>
    23d6:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <env+0x10>
    23da:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <env+0xf>
    23de:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <env>
    23e2:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <env+0x1>
    23e6:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    23ea:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <env+0x11>
    23ee:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <env+0x12>
    23f2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <env+0x13>
    23f6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <env+0x14>
    23fa:	42 c0       	rjmp	.+132    	; 0x2480 <_Z13updateControlv+0x2b8>
    23fc:	82 30       	cpi	r24, 0x02	; 2
    23fe:	29 f4       	brne	.+10     	; 0x240a <_Z13updateControlv+0x242>
    2400:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    2404:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <env+0x1d>
    2408:	3b c0       	rjmp	.+118    	; 0x2480 <_Z13updateControlv+0x2b8>
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	c9 f5       	brne	.+114    	; 0x2480 <_Z13updateControlv+0x2b8>
    240e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
    2412:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
    2416:	c9 01       	movw	r24, r18
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	9c 01       	movw	r18, r24
    241e:	ad 01       	movw	r20, r26
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	56 95       	lsr	r21
    2424:	47 95       	ror	r20
    2426:	37 95       	ror	r19
    2428:	27 95       	ror	r18
    242a:	8a 95       	dec	r24
    242c:	d1 f7       	brne	.-12     	; 0x2422 <_Z13updateControlv+0x25a>
    242e:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <env+0x20>
    2432:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <env+0x1f>
    2436:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <env>
    243a:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <env+0x1>
    243e:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    2442:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <env+0x21>
    2446:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <env+0x22>
    244a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <env+0x23>
    244e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <env+0x24>
    2452:	16 c0       	rjmp	.+44     	; 0x2480 <_Z13updateControlv+0x2b8>
    2454:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <paramAddr>
    2458:	81 11       	cpse	r24, r1
    245a:	05 c0       	rjmp	.+10     	; 0x2466 <_Z13updateControlv+0x29e>
    245c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    2460:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <inPitch>
    2464:	0d c0       	rjmp	.+26     	; 0x2480 <_Z13updateControlv+0x2b8>
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	29 f4       	brne	.+10     	; 0x2474 <_Z13updateControlv+0x2ac>
    246a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    246e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <inEnv>
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <_Z13updateControlv+0x2b8>
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	21 f4       	brne	.+8      	; 0x2480 <_Z13updateControlv+0x2b8>
    2478:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
    247c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <envFil>
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	08 95       	ret

00002486 <loop>:
    2486:	0c 94 03 13 	jmp	0x2606	; 0x2606 <_Z9audioHookv>

0000248a <_ZN5OscilILj2048ELj16384EE4nextEv>:

	/** Updates the phase according to the current frequency and returns the sample at the new phase position.
	@return the next sample.
	*/
	inline
	int8_t next()
    248a:	fc 01       	movw	r30, r24
	 */
	inline
	void incrementPhase()
	{
		//phase_fractional += (phase_increment_fractional | 1); // odd phase incr, attempt to reduce frequency spurs in output
		phase_fractional += phase_increment_fractional;
    248c:	44 81       	ldd	r20, Z+4	; 0x04
    248e:	55 81       	ldd	r21, Z+5	; 0x05
    2490:	66 81       	ldd	r22, Z+6	; 0x06
    2492:	77 81       	ldd	r23, Z+7	; 0x07
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	a2 81       	ldd	r26, Z+2	; 0x02
    249a:	b3 81       	ldd	r27, Z+3	; 0x03
    249c:	84 0f       	add	r24, r20
    249e:	95 1f       	adc	r25, r21
    24a0:	a6 1f       	adc	r26, r22
    24a2:	b7 1f       	adc	r27, r23
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
	int8_t readTable()
	{
#ifdef OSCIL_DITHER_PHASE
		return (int8_t)pgm_read_byte_near(table + (((phase_fractional + ((int)(xorshift96()>>16))) >> OSCIL_F_BITS) & (NUM_TABLE_CELLS - 1)));
#else
		return (int8_t)pgm_read_byte_near(table + ((phase_fractional >> OSCIL_F_BITS) & (NUM_TABLE_CELLS - 1)));
    24ac:	9d 01       	movw	r18, r26
    24ae:	37 70       	andi	r19, 0x07	; 7
    24b0:	00 84       	ldd	r0, Z+8	; 0x08
    24b2:	f1 85       	ldd	r31, Z+9	; 0x09
    24b4:	e0 2d       	mov	r30, r0
    24b6:	e2 0f       	add	r30, r18
    24b8:	f3 1f       	adc	r31, r19
    24ba:	84 91       	lpm	r24, Z
	inline
	int8_t next()
	{
		incrementPhase();
		return readTable();
	}
    24bc:	08 95       	ret

000024be <_Z11updateAudiov>:
		break;
	}
	
}

int updateAudio(){ 
    24be:	8f 92       	push	r8
    24c0:	9f 92       	push	r9
    24c2:	af 92       	push	r10
    24c4:	bf 92       	push	r11
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
  svf.setCentreFreq(filterFreq + (lfoFil*lfo.next()) );
    24d6:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <lfoFil>
    24da:	8a e6       	ldi	r24, 0x6A	; 106
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN5OscilILj2048ELj16384EE4nextEv>
	@note The frequency calculation is VERY "approximate".  This really needs to be fixed.
	*/
	void setCentreFreq(unsigned int centre_freq){
		// simple frequency tuning with error towards nyquist (reference?  where did this come from?)
			//f = (Q1n15)(((Q16n16_2PI*centre_freq)>>AUDIO_RATE_AS_LSHIFT)>>1);
			f = (Q15n16)((Q16n16_2PI*centre_freq)>>(AUDIO_RATE_AS_LSHIFT)); // this works best for now
    24e2:	28 2f       	mov	r18, r24
    24e4:	21 03       	mulsu	r18, r17
    24e6:	c0 01       	movw	r24, r0
    24e8:	11 24       	eor	r1, r1
    24ea:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <filterFreq>
    24ee:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <filterFreq+0x1>
    24f2:	dc 01       	movw	r26, r24
    24f4:	a2 0f       	add	r26, r18
    24f6:	b3 1f       	adc	r27, r19
    24f8:	2f e7       	ldi	r18, 0x7F	; 127
    24fa:	38 e4       	ldi	r19, 0x48	; 72
    24fc:	46 e0       	ldi	r20, 0x06	; 6
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	2e e0       	ldi	r18, 0x0E	; 14
    250a:	b6 95       	lsr	r27
    250c:	a7 95       	ror	r26
    250e:	97 95       	ror	r25
    2510:	87 95       	ror	r24
    2512:	2a 95       	dec	r18
    2514:	d1 f7       	brne	.-12     	; 0x250a <_Z11updateAudiov+0x4c>
    2516:	c0 e6       	ldi	r28, 0x60	; 96
    2518:	d1 e0       	ldi	r29, 0x01	; 1
    251a:	8e 83       	std	Y+6, r24	; 0x06
    251c:	9f 83       	std	Y+7, r25	; 0x07
    251e:	a8 87       	std	Y+8, r26	; 0x08
    2520:	b9 87       	std	Y+9, r27	; 0x09
  //(envelope.next() * aOscil.next())>>8
  return svf.next(osc.next())>>3; // return an int signal centred around 0
    2522:	84 e7       	ldi	r24, 0x74	; 116
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN5OscilILj2048ELj16384EE4nextEv>
    252a:	c8 2e       	mov	r12, r24
	*/
	inline
	int next(int input, Int2Type<LOWPASS>)
	{
		//setPin13High();
		low += ((f*band)>>16);
    252c:	2e 81       	ldd	r18, Y+6	; 0x06
    252e:	3f 81       	ldd	r19, Y+7	; 0x07
    2530:	48 85       	ldd	r20, Y+8	; 0x08
    2532:	59 85       	ldd	r21, Y+9	; 0x09
    2534:	0a 81       	ldd	r16, Y+2	; 0x02
    2536:	1b 81       	ldd	r17, Y+3	; 0x03
    2538:	d8 01       	movw	r26, r16
    253a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__mulshisi3>
    253e:	e8 81       	ld	r30, Y
    2540:	f9 81       	ldd	r31, Y+1	; 0x01
    2542:	e8 0f       	add	r30, r24
    2544:	f9 1f       	adc	r31, r25
    2546:	f9 83       	std	Y+1, r31	; 0x01
    2548:	e8 83       	st	Y, r30
		int high = (((long)input - low - (((long)band * q)>>8))*scale)>>8;
    254a:	2c 81       	ldd	r18, Y+4	; 0x04
		band += ((f*high)>>16);
    254c:	8e 80       	ldd	r8, Y+6	; 0x06
    254e:	9f 80       	ldd	r9, Y+7	; 0x07
    2550:	a8 84       	ldd	r10, Y+8	; 0x08
    2552:	b9 84       	ldd	r11, Y+9	; 0x09
    2554:	0c 2c       	mov	r0, r12
    2556:	00 0c       	add	r0, r0
    2558:	dd 08       	sbc	r13, r13
    255a:	ee 08       	sbc	r14, r14
    255c:	ff 08       	sbc	r15, r15
    255e:	cf 01       	movw	r24, r30
    2560:	0f 2e       	mov	r0, r31
    2562:	00 0c       	add	r0, r0
    2564:	aa 0b       	sbc	r26, r26
    2566:	bb 0b       	sbc	r27, r27
    2568:	c8 1a       	sub	r12, r24
    256a:	d9 0a       	sbc	r13, r25
    256c:	ea 0a       	sbc	r14, r26
    256e:	fb 0a       	sbc	r15, r27
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	d8 01       	movw	r26, r16
    2574:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__usmulhisi3>
    2578:	bb 27       	eor	r27, r27
    257a:	97 fd       	sbrc	r25, 7
    257c:	ba 95       	dec	r27
    257e:	a9 2f       	mov	r26, r25
    2580:	98 2f       	mov	r25, r24
    2582:	87 2f       	mov	r24, r23
    2584:	a7 01       	movw	r20, r14
    2586:	96 01       	movw	r18, r12
    2588:	28 1b       	sub	r18, r24
    258a:	39 0b       	sbc	r19, r25
    258c:	4a 0b       	sbc	r20, r26
    258e:	5b 0b       	sbc	r21, r27
    2590:	ad 81       	ldd	r26, Y+5	; 0x05
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    2598:	bb 27       	eor	r27, r27
    259a:	97 fd       	sbrc	r25, 7
    259c:	ba 95       	dec	r27
    259e:	a9 2f       	mov	r26, r25
    25a0:	98 2f       	mov	r25, r24
    25a2:	87 2f       	mov	r24, r23
    25a4:	dc 01       	movw	r26, r24
    25a6:	a5 01       	movw	r20, r10
    25a8:	94 01       	movw	r18, r8
    25aa:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__mulshisi3>
    25ae:	08 0f       	add	r16, r24
    25b0:	19 1f       	adc	r17, r25
    25b2:	1b 83       	std	Y+3, r17	; 0x03
    25b4:	0a 83       	std	Y+2, r16	; 0x02
}
    25b6:	cf 01       	movw	r24, r30
    25b8:	53 e0       	ldi	r21, 0x03	; 3
    25ba:	95 95       	asr	r25
    25bc:	87 95       	ror	r24
    25be:	5a 95       	dec	r21
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <_Z11updateAudiov+0xfc>
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	9f 90       	pop	r9
    25d8:	8f 90       	pop	r8
    25da:	08 95       	ret

000025dc <_GLOBAL__sub_I_waves>:

public:

	/** Constructor.
	 */
	ADSR():LERPS_PER_CONTROL(LERP_RATE/CONTROL_UPDATE_RATE)
    25dc:	e7 e2       	ldi	r30, 0x27	; 39
    25de:	f1 e0       	ldi	r31, 0x01	; 1
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
	{
		attack.phase_type = ATTACK;
    25e8:	16 82       	std	Z+6, r1	; 0x06
		decay.phase_type = DECAY;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	86 87       	std	Z+14, r24	; 0x0e
		sustain.phase_type = SUSTAIN;
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	86 8b       	std	Z+22, r24	; 0x16
		release.phase_type = RELEASE;
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	86 8f       	std	Z+30, r24	; 0x1e
		idle.phase_type = IDLE;
    25f6:	84 e0       	ldi	r24, 0x04	; 4
    25f8:	86 a3       	std	Z+38, r24	; 0x26
		release.level = 0;
    25fa:	15 a2       	std	Z+37, r1	; 0x25
    25fc:	08 95       	ret

000025fe <_ZL24updateControlWithAutoADCv>:


unsigned long mozziMicros()
{
	return audioTicks() * MICROS_PER_AUDIO_TICK;
}
    25fe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <_Z13updateControlv>
    2602:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <_Z17adcStartReadCyclev>

00002606 <_Z9audioHookv>:
    2606:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <output_buffer+0x201>
    260a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <output_buffer+0x200>
    260e:	98 13       	cpse	r25, r24
    2610:	06 c0       	rjmp	.+12     	; 0x261e <_Z9audioHookv+0x18>
    2612:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <output_buffer+0x203>
    2616:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <output_buffer+0x202>
    261a:	98 13       	cpse	r25, r24
    261c:	1a c0       	rjmp	.+52     	; 0x2652 <_Z9audioHookv+0x4c>
    261e:	0e 94 5f 12 	call	0x24be	; 0x24be <_Z11updateAudiov>
    2622:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <output_buffer+0x201>
    2626:	e2 2f       	mov	r30, r18
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	e1 57       	subi	r30, 0x71	; 113
    2630:	fe 4f       	sbci	r31, 0xFE	; 254
    2632:	8c 50       	subi	r24, 0x0C	; 12
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <output_buffer+0x201>
    2640:	21 11       	cpse	r18, r1
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <_Z9audioHookv+0x4c>
    2644:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <output_buffer+0x203>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 27       	eor	r24, r25
    264c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <output_buffer+0x203>
    2650:	08 95       	ret
    2652:	08 95       	ret

00002654 <__vector_13>:
    2654:	1f 92       	push	r1
    2656:	0f 92       	push	r0
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	af 93       	push	r26
    2668:	bf 93       	push	r27
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <_ZZ11__vector_13E9alternate>
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	89 27       	eor	r24, r25
    2676:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_ZZ11__vector_13E9alternate>
    267a:	88 23       	and	r24, r24
    267c:	59 f1       	breq	.+86     	; 0x26d4 <__vector_13+0x80>
    267e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <output_buffer+0x200>
    2682:	e8 2f       	mov	r30, r24
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e1 57       	subi	r30, 0x71	; 113
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	20 81       	ld	r18, Z
    2690:	31 81       	ldd	r19, Z+1	; 0x01
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <output_buffer+0x200>
    2698:	81 11       	cpse	r24, r1
    269a:	18 c0       	rjmp	.+48     	; 0x26cc <__vector_13+0x78>
    269c:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <output_buffer+0x202>
    26a0:	98 27       	eor	r25, r24
    26a2:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <output_buffer+0x202>
    26a6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <output_buffer+0x204>
    26aa:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <output_buffer+0x205>
    26ae:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <output_buffer+0x206>
    26b2:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <output_buffer+0x207>
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	a1 1d       	adc	r26, r1
    26ba:	b1 1d       	adc	r27, r1
    26bc:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <output_buffer+0x204>
    26c0:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <output_buffer+0x205>
    26c4:	a0 93 95 03 	sts	0x0395, r26	; 0x800395 <output_buffer+0x206>
    26c8:	b0 93 96 03 	sts	0x0396, r27	; 0x800396 <output_buffer+0x207>
    26cc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    26d0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	3f 91       	pop	r19
    26e2:	2f 91       	pop	r18
    26e4:	0f 90       	pop	r0
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	0f 90       	pop	r0
    26ea:	1f 90       	pop	r1
    26ec:	18 95       	reti

000026ee <_Z10startMozzii>:
    26ee:	9f 92       	push	r9
    26f0:	af 92       	push	r10
    26f2:	bf 92       	push	r11
    26f4:	cf 92       	push	r12
    26f6:	df 92       	push	r13
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	ec 01       	movw	r28, r24
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_Z13setupMozziADCa>
    270c:	84 b5       	in	r24, 0x24	; 36
    270e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <_ZL16pre_mozzi_TCCR0A>
    2712:	85 b5       	in	r24, 0x25	; 37
    2714:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZL16pre_mozzi_TCCR0B>
    2718:	87 b5       	in	r24, 0x27	; 39
    271a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <_ZL15pre_mozzi_OCR0A>
    271e:	0e e6       	ldi	r16, 0x6E	; 110
    2720:	10 e0       	ldi	r17, 0x00	; 0
    2722:	f8 01       	movw	r30, r16
    2724:	80 81       	ld	r24, Z
    2726:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_ZL16pre_mozzi_TIMSK0>
    272a:	9e 01       	movw	r18, r28
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	60 e4       	ldi	r22, 0x40	; 64
    2732:	72 e4       	ldi	r23, 0x42	; 66
    2734:	8f e0       	ldi	r24, 0x0F	; 15
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodsi4>
    273c:	da 01       	movw	r26, r20
    273e:	c9 01       	movw	r24, r18
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	6f ef       	ldi	r22, 0xFF	; 255
    2744:	72 e1       	ldi	r23, 0x12	; 18
    2746:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN9TimerZero4initEjPFvvEb>
    274a:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_ZN9TimerZero5startEv>
    274e:	84 b5       	in	r24, 0x24	; 36
    2750:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <_ZL12mozzi_TCCR0A>
    2754:	85 b5       	in	r24, 0x25	; 37
    2756:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <_ZL12mozzi_TCCR0B>
    275a:	87 b5       	in	r24, 0x27	; 39
    275c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <_ZL11mozzi_OCR0A>
    2760:	f8 01       	movw	r30, r16
    2762:	80 81       	ld	r24, Z
    2764:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_ZL12mozzi_TIMSK0>
    2768:	00 e8       	ldi	r16, 0x80	; 128
    276a:	10 e0       	ldi	r17, 0x00	; 0
    276c:	f8 01       	movw	r30, r16
    276e:	80 81       	ld	r24, Z
    2770:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZL16pre_mozzi_TCCR1A>
    2774:	c1 e8       	ldi	r28, 0x81	; 129
    2776:	d0 e0       	ldi	r29, 0x00	; 0
    2778:	88 81       	ld	r24, Y
    277a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_ZL16pre_mozzi_TCCR1B>
    277e:	88 e8       	ldi	r24, 0x88	; 136
    2780:	a8 2e       	mov	r10, r24
    2782:	b1 2c       	mov	r11, r1
    2784:	f5 01       	movw	r30, r10
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <_ZL15pre_mozzi_OCR1A>
    278e:	9f e6       	ldi	r25, 0x6F	; 111
    2790:	c9 2e       	mov	r12, r25
    2792:	d1 2c       	mov	r13, r1
    2794:	f6 01       	movw	r30, r12
    2796:	80 81       	ld	r24, Z
    2798:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_ZL16pre_mozzi_TIMSK1>
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	89 e0       	ldi	r24, 0x09	; 9
    27a0:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    27a4:	22 ee       	ldi	r18, 0xE2	; 226
    27a6:	e2 2e       	mov	r14, r18
    27a8:	23 e0       	ldi	r18, 0x03	; 3
    27aa:	f2 2e       	mov	r15, r18
    27ac:	f7 01       	movw	r30, r14
    27ae:	12 82       	std	Z+2, r1	; 0x02
    27b0:	98 e1       	ldi	r25, 0x18	; 24
    27b2:	93 83       	std	Z+3, r25	; 0x03
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	84 83       	std	Z+4, r24	; 0x04
    27b8:	98 83       	st	Y, r25
    27ba:	f8 01       	movw	r30, r16
    27bc:	80 83       	st	Z, r24
    27be:	88 ee       	ldi	r24, 0xE8	; 232
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	99 24       	eor	r9, r9
    27c8:	93 94       	inc	r9
    27ca:	90 92 df 03 	sts	0x03DF, r9	; 0x8003df <_ZN8TimerOne15clockSelectBitsE>
    27ce:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <_ZN8TimerOne9pwmPeriodE+0x1>
    27d2:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <_ZN8TimerOne9pwmPeriodE>
    27d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    27da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    27de:	89 e1       	ldi	r24, 0x19	; 25
    27e0:	88 83       	st	Y, r24
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	89 e0       	ldi	r24, 0x09	; 9
    27e6:	0e 94 28 1a 	call	0x3450	; 0x3450 <pinMode>
    27ea:	f8 01       	movw	r30, r16
    27ec:	90 81       	ld	r25, Z
    27ee:	f7 01       	movw	r30, r14
    27f0:	84 81       	ldd	r24, Z+4	; 0x04
    27f2:	89 2b       	or	r24, r25
    27f4:	80 68       	ori	r24, 0x80	; 128
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <_ZN8TimerOne9pwmPeriodE>
    27fe:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <_ZN8TimerOne9pwmPeriodE+0x1>
    2802:	a4 ef       	ldi	r26, 0xF4	; 244
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__umulhisi3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	3a e0       	ldi	r19, 0x0A	; 10
    2810:	b6 95       	lsr	r27
    2812:	a7 95       	ror	r26
    2814:	97 95       	ror	r25
    2816:	87 95       	ror	r24
    2818:	3a 95       	dec	r19
    281a:	d1 f7       	brne	.-12     	; 0x2810 <_Z10startMozzii+0x122>
    281c:	f5 01       	movw	r30, r10
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
    2822:	f7 01       	movw	r30, r14
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZN8TimerOne15clockSelectBitsE>
    282a:	89 2b       	or	r24, r25
    282c:	88 83       	st	Y, r24
    282e:	f6 01       	movw	r30, r12
    2830:	90 82       	st	Z, r9
    2832:	f8 01       	movw	r30, r16
    2834:	80 81       	ld	r24, Z
    2836:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZL12mozzi_TCCR1A>
    283a:	88 81       	ld	r24, Y
    283c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_ZL12mozzi_TCCR1B>
    2840:	f5 01       	movw	r30, r10
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_ZL11mozzi_OCR1A>
    284a:	f6 01       	movw	r30, r12
    284c:	80 81       	ld	r24, Z
    284e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_ZL12mozzi_TIMSK1>
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	9f 90       	pop	r9
    2868:	08 95       	ret

0000286a <_GLOBAL__sub_I_output_buffer>:
{

public:
	/** Constructor
	*/
	CircularBuffer(): start(0),end(0),s_msb(0),e_msb(0)
    286a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <output_buffer+0x200>
    286e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <output_buffer+0x201>
    2872:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <output_buffer+0x202>
    2876:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <output_buffer+0x203>
    287a:	08 95       	ret

0000287c <_Z19setupFastAnalogReada>:
#else
	pin = adcPinToChannelNum(pin); // allow for channel or pin numbers
#endif
	adc_channels_to_read.push(pin);
	return analog_readings[pin];
}
    287c:	81 11       	cpse	r24, r1
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <_Z19setupFastAnalogReada+0x16>
    2880:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2884:	84 60       	ori	r24, 0x04	; 4
    2886:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    288a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    288e:	8d 7f       	andi	r24, 0xFD	; 253
    2890:	1a c0       	rjmp	.+52     	; 0x28c6 <_Z19setupFastAnalogReada+0x4a>
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	71 f4       	brne	.+28     	; 0x28b2 <_Z19setupFastAnalogReada+0x36>
    2896:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    289a:	8b 7f       	andi	r24, 0xFB	; 251
    289c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28a4:	82 60       	ori	r24, 0x02	; 2
    28a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28ae:	81 60       	ori	r24, 0x01	; 1
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <_Z19setupFastAnalogReada+0x54>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	79 f4       	brne	.+30     	; 0x28d4 <_Z19setupFastAnalogReada+0x58>
    28b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28ba:	8b 7f       	andi	r24, 0xFB	; 251
    28bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28c4:	82 60       	ori	r24, 0x02	; 2
    28c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28ce:	8e 7f       	andi	r24, 0xFE	; 254
    28d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    28d4:	08 95       	ret

000028d6 <_Z26adcDisconnectAllDigitalInsv>:
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    28e2:	9b 01       	movw	r18, r22
    28e4:	08 2e       	mov	r0, r24
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <_Z26adcDisconnectAllDigitalInsv+0x14>
    28e8:	22 0f       	add	r18, r18
    28ea:	0a 94       	dec	r0
    28ec:	ea f7       	brpl	.-6      	; 0x28e8 <_Z26adcDisconnectAllDigitalInsv+0x12>
    28ee:	24 2b       	or	r18, r20
    28f0:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	88 30       	cpi	r24, 0x08	; 8
    28f8:	91 05       	cpc	r25, r1
    28fa:	89 f7       	brne	.-30     	; 0x28de <_Z26adcDisconnectAllDigitalInsv+0x8>
    28fc:	08 95       	ret

000028fe <_Z13setupMozziADCa>:
    28fe:	ea e7       	ldi	r30, 0x7A	; 122
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	90 81       	ld	r25, Z
    2904:	98 60       	ori	r25, 0x08	; 8
    2906:	90 83       	st	Z, r25
    2908:	0e 94 3e 14 	call	0x287c	; 0x287c <_Z19setupFastAnalogReada>
    290c:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <_Z26adcDisconnectAllDigitalInsv>

00002910 <_Z18adcStartConversionh>:
    2910:	87 70       	andi	r24, 0x07	; 7
    2912:	80 64       	ori	r24, 0x40	; 64
    2914:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2918:	ea e7       	ldi	r30, 0x7A	; 122
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	80 64       	ori	r24, 0x40	; 64
    2920:	80 83       	st	Z, r24
    2922:	08 95       	ret

00002924 <_Z23adcReadSelectedChannelsv>:
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	1f 92       	push	r1
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZL20adc_channels_to_read+0x8>
    2932:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_ZL20adc_channels_to_read+0x9>
    2936:	8f 3f       	cpi	r24, 0xFF	; 255
    2938:	2f ef       	ldi	r18, 0xFF	; 255
    293a:	92 07       	cpc	r25, r18
    293c:	61 f0       	breq	.+24     	; 0x2956 <_Z23adcReadSelectedChannelsv+0x32>
    293e:	fc 01       	movw	r30, r24
    2940:	e9 56       	subi	r30, 0x69	; 105
    2942:	fc 4f       	sbci	r31, 0xFC	; 252
    2944:	20 81       	ld	r18, Z
    2946:	29 83       	std	Y+1, r18	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_ZL20adc_channels_to_read+0x9>
    294e:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZL20adc_channels_to_read+0x8>
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <_Z23adcReadSelectedChannelsv+0x34>
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZL15current_channel>
    295c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL15current_channel>
    2960:	8f 3f       	cpi	r24, 0xFF	; 255
    2962:	21 f0       	breq	.+8      	; 0x296c <_Z23adcReadSelectedChannelsv+0x48>
    2964:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL15current_channel>
    2968:	0e 94 88 14 	call	0x2910	; 0x2910 <_Z18adcStartConversionh>
    296c:	0f 90       	pop	r0
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <_Z17adcStartReadCyclev>:
    2974:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZL15current_channel>
    2978:	8f 3f       	cpi	r24, 0xFF	; 255
    297a:	29 f4       	brne	.+10     	; 0x2986 <_Z17adcStartReadCyclev+0x12>
    297c:	0e 94 92 14 	call	0x2924	; 0x2924 <_Z23adcReadSelectedChannelsv>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL5first>
    2986:	08 95       	ret

00002988 <_Z21startSecondControlADCv>:

void startSecondControlADC() {
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
	adc->startSingleRead(teensy_pin);
#else
	ADCSRA |= (1 << ADSC); // start a second conversion on the current channel
    2988:	ea e7       	ldi	r30, 0x7A	; 122
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	80 64       	ori	r24, 0x40	; 64
    2990:	80 83       	st	Z, r24
    2992:	08 95       	ret

00002994 <_Z23receiveSecondControlADCv>:

void receiveSecondControlADC(){
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
	analog_readings[current_channel] = adc->readSingle();
#else
	analog_readings[current_channel] = ADC; // officially (ADCL | (ADCH << 8)) but the compiler works it out
    2994:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <_ZL15current_channel>
    2998:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    299c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 0b       	sbc	r31, r31
    29a4:	ef 55       	subi	r30, 0x5F	; 95
    29a6:	fc 4f       	sbci	r31, 0xFC	; 252
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	08 95       	ret

000029ae <__vector_21>:
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
void adc0_isr(void) 
#else
ISR(ADC_vect, ISR_BLOCK) 
#endif
{
    29ae:	1f 92       	push	r1
    29b0:	0f 92       	push	r0
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	0f 92       	push	r0
    29b6:	11 24       	eor	r1, r1
    29b8:	2f 93       	push	r18
    29ba:	3f 93       	push	r19
    29bc:	4f 93       	push	r20
    29be:	5f 93       	push	r21
    29c0:	6f 93       	push	r22
    29c2:	7f 93       	push	r23
    29c4:	8f 93       	push	r24
    29c6:	9f 93       	push	r25
    29c8:	af 93       	push	r26
    29ca:	bf 93       	push	r27
    29cc:	ef 93       	push	r30
    29ce:	ff 93       	push	r31
	if (first)
    29d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL5first>
    29d4:	88 23       	and	r24, r24
    29d6:	29 f0       	breq	.+10     	; 0x29e2 <__vector_21+0x34>
	{
    //<1us
   	startSecondControlADC();
    29d8:	0e 94 c4 14 	call	0x2988	; 0x2988 <_Z21startSecondControlADCv>
   	first=false;
    29dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZL5first>
    29e0:	07 c0       	rjmp	.+14     	; 0x29f0 <__vector_21+0x42>
  }
  else
  {	
  	// 3us
    receiveSecondControlADC();
    29e2:	0e 94 ca 14 	call	0x2994	; 0x2994 <_Z23receiveSecondControlADCv>
    adcReadSelectedChannels();
    29e6:	0e 94 92 14 	call	0x2924	; 0x2924 <_Z23adcReadSelectedChannelsv>
   	first=true;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL5first>
	}
}
    29f0:	ff 91       	pop	r31
    29f2:	ef 91       	pop	r30
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	0f 90       	pop	r0
    2a0e:	1f 90       	pop	r1
    2a10:	18 95       	reti

00002a12 <_GLOBAL__sub_I__Z19setupFastAnalogReada>:
	int top;

public:
	/** Constructor
	*/
	Stack(): top(-1)
    2a12:	8f ef       	ldi	r24, 0xFF	; 255
    2a14:	9f ef       	ldi	r25, 0xFF	; 255
    2a16:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_ZL20adc_channels_to_read+0x9>
    2a1a:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZL20adc_channels_to_read+0x8>
    2a1e:	08 95       	ret

00002a20 <_Z23initialize_twi_nonblockv>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2a20:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_ZL13txBufferIndex>
    2a24:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZL14txBufferLength>
    2a28:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZL9twi_state>
    2a2c:	44 9a       	sbi	0x08, 4	; 8
    2a2e:	45 9a       	sbi	0x08, 5	; 8
    2a30:	e9 eb       	ldi	r30, 0xB9	; 185
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	8e 7f       	andi	r24, 0xFE	; 254
    2a38:	80 83       	st	Z, r24
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8d 7f       	andi	r24, 0xFD	; 253
    2a3e:	80 83       	st	Z, r24
    2a40:	88 e4       	ldi	r24, 0x48	; 72
    2a42:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2a46:	85 e4       	ldi	r24, 0x45	; 69
    2a48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a4c:	08 95       	ret

00002a4e <_Z20twi_continueReadFromv>:
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZL9twi_state>
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_ZL9twi_error>
    2a5a:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2a5e:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <twi_readLength>
    2a62:	81 50       	subi	r24, 0x01	; 1
    2a64:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZL22twi_masterBufferLength>
    2a68:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <twi_readAddress>
    2a6c:	88 0f       	add	r24, r24
    2a6e:	81 60       	ori	r24, 0x01	; 1
    2a70:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <_ZL9twi_slarw>
    2a74:	85 ee       	ldi	r24, 0xE5	; 229
    2a76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a7a:	08 95       	ret

00002a7c <_Z20twi_initiateReadFromhh>:
    2a7c:	61 32       	cpi	r22, 0x21	; 33
    2a7e:	10 f0       	brcs	.+4      	; 0x2a84 <_Z20twi_initiateReadFromhh+0x8>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	08 95       	ret
    2a84:	60 93 b1 03 	sts	0x03B1, r22	; 0x8003b1 <twi_readLength>
    2a88:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <twi_readAddress>
    2a8c:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZL9twi_state>
    2a90:	81 11       	cpse	r24, r1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <_Z20twi_initiateReadFromhh+0x1e>
    2a94:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_Z20twi_continueReadFromv>
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <_Z20twi_initiateReadFromhh+0x24>
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZL9twi_state>
    2aa0:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_ZL9twi_error>
    2aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa6:	61 f3       	breq	.-40     	; 0x2a80 <_Z20twi_initiateReadFromhh+0x4>
    2aa8:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_ZL9twi_error>
    2aac:	80 32       	cpi	r24, 0x20	; 32
    2aae:	31 f0       	breq	.+12     	; 0x2abc <_Z20twi_initiateReadFromhh+0x40>
    2ab0:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_ZL9twi_error>
    2ab4:	80 33       	cpi	r24, 0x30	; 48
    2ab6:	21 f0       	breq	.+8      	; 0x2ac0 <_Z20twi_initiateReadFromhh+0x44>
    2ab8:	84 e0       	ldi	r24, 0x04	; 4
    2aba:	08 95       	ret
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	08 95       	ret
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	08 95       	ret

00002ac4 <_Z20twi_readMasterBufferPhh>:
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	86 2f       	mov	r24, r22
    2ac8:	ac eb       	ldi	r26, 0xBC	; 188
    2aca:	b3 e0       	ldi	r27, 0x03	; 3
    2acc:	9c 91       	ld	r25, X
    2ace:	90 83       	st	Z, r25
    2ad0:	11 96       	adiw	r26, 0x01	; 1
    2ad2:	9c 91       	ld	r25, X
    2ad4:	11 97       	sbiw	r26, 0x01	; 1
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	12 96       	adiw	r26, 0x02	; 2
    2ada:	9c 91       	ld	r25, X
    2adc:	92 83       	std	Z+2, r25	; 0x02
    2ade:	08 95       	ret

00002ae0 <_Z19twi_continueWriteTov>:
    2ae0:	84 e0       	ldi	r24, 0x04	; 4
    2ae2:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZL9twi_state>
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255
    2ae8:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_ZL9twi_error>
    2aec:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2af0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <twi_writeLength>
    2af4:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZL22twi_masterBufferLength>
    2af8:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <twi_writeData>
    2afc:	ac eb       	ldi	r26, 0xBC	; 188
    2afe:	b3 e0       	ldi	r27, 0x03	; 3
    2b00:	e9 2f       	mov	r30, r25
    2b02:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <twi_writeData+0x1>
    2b06:	2e 2f       	mov	r18, r30
    2b08:	29 1b       	sub	r18, r25
    2b0a:	28 17       	cp	r18, r24
    2b0c:	18 f4       	brcc	.+6      	; 0x2b14 <_Z19twi_continueWriteTov+0x34>
    2b0e:	21 91       	ld	r18, Z+
    2b10:	2d 93       	st	X+, r18
    2b12:	f9 cf       	rjmp	.-14     	; 0x2b06 <_Z19twi_continueWriteTov+0x26>
    2b14:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <twi_writeAddress>
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <_ZL9twi_slarw>
    2b22:	85 ee       	ldi	r24, 0xE5	; 229
    2b24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b28:	08 95       	ret

00002b2a <_Z8twi_stopv>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b2a:	85 ed       	ldi	r24, 0xD5	; 213
    2b2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){ //FIXME: does this cause a delay?
    2b30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b34:	84 fd       	sbrc	r24, 4
    2b36:	fc cf       	rjmp	.-8      	; 0x2b30 <_Z8twi_stopv+0x6>
    continue;
  }

  twi_oldstate = twi_state;
    2b38:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZL9twi_state>
    2b3c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <_ZL12twi_oldstate>
  // update twi state
  twi_state = TWI_READY;
    2b40:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZL9twi_state>
  if ( twi_oldstate == TWI_PRE_MTX ){
    2b44:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZL12twi_oldstate>
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	11 f4       	brne	.+4      	; 0x2b50 <_Z8twi_stopv+0x26>
      twi_continueWriteTo();
    2b4c:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_Z19twi_continueWriteTov>
  } else if ( twi_oldstate == TWI_PRE_MRX ){
    2b50:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZL12twi_oldstate>
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	11 f4       	brne	.+4      	; 0x2b5c <_Z8twi_stopv+0x32>
      twi_continueReadFrom();
    2b58:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <_Z20twi_continueReadFromv>
    2b5c:	08 95       	ret

00002b5e <_Z14twi_releaseBusv>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b5e:	85 ec       	ldi	r24, 0xC5	; 197
    2b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  twi_oldstate = twi_state;
    2b64:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZL9twi_state>
    2b68:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <_ZL12twi_oldstate>
  // update twi state
  twi_state = TWI_READY;
    2b6c:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZL9twi_state>
  if ( twi_oldstate == TWI_PRE_MTX ){
    2b70:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZL12twi_oldstate>
    2b74:	83 30       	cpi	r24, 0x03	; 3
    2b76:	11 f4       	brne	.+4      	; 0x2b7c <_Z14twi_releaseBusv+0x1e>
      twi_continueWriteTo();
    2b78:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_Z19twi_continueWriteTov>
  } else if ( twi_oldstate == TWI_PRE_MRX ){
    2b7c:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZL12twi_oldstate>
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	11 f4       	brne	.+4      	; 0x2b88 <_Z14twi_releaseBusv+0x2a>
      twi_continueReadFrom();
    2b84:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <_Z20twi_continueReadFromv>
    2b88:	08 95       	ret

00002b8a <__vector_24>:
}

// SIGNAL(TWI_vect)
// ISR(TWI_vect, ISR_NOBLOCK )
ISR(TWI_vect)
{
    2b8a:	1f 92       	push	r1
    2b8c:	0f 92       	push	r0
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	0f 92       	push	r0
    2b92:	11 24       	eor	r1, r1
    2b94:	2f 93       	push	r18
    2b96:	3f 93       	push	r19
    2b98:	4f 93       	push	r20
    2b9a:	5f 93       	push	r21
    2b9c:	6f 93       	push	r22
    2b9e:	7f 93       	push	r23
    2ba0:	8f 93       	push	r24
    2ba2:	9f 93       	push	r25
    2ba4:	af 93       	push	r26
    2ba6:	bf 93       	push	r27
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31
  switch(TW_STATUS){
    2bac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2bb0:	88 7f       	andi	r24, 0xF8	; 248
    2bb2:	88 32       	cpi	r24, 0x28	; 40
    2bb4:	39 f1       	breq	.+78     	; 0x2c04 <__vector_24+0x7a>
    2bb6:	70 f4       	brcc	.+28     	; 0x2bd4 <__vector_24+0x4a>
    2bb8:	80 31       	cpi	r24, 0x10	; 16
    2bba:	09 f1       	breq	.+66     	; 0x2bfe <__vector_24+0x74>
    2bbc:	30 f4       	brcc	.+12     	; 0x2bca <__vector_24+0x40>
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <__vector_24+0x3a>
    2bc2:	5b c0       	rjmp	.+182    	; 0x2c7a <__vector_24+0xf0>
    2bc4:	88 30       	cpi	r24, 0x08	; 8
    2bc6:	d9 f0       	breq	.+54     	; 0x2bfe <__vector_24+0x74>
    2bc8:	5c c0       	rjmp	.+184    	; 0x2c82 <__vector_24+0xf8>
    2bca:	88 31       	cpi	r24, 0x18	; 24
    2bcc:	d9 f0       	breq	.+54     	; 0x2c04 <__vector_24+0x7a>
    2bce:	80 32       	cpi	r24, 0x20	; 32
    2bd0:	61 f1       	breq	.+88     	; 0x2c2a <__vector_24+0xa0>
    2bd2:	57 c0       	rjmp	.+174    	; 0x2c82 <__vector_24+0xf8>
    2bd4:	80 34       	cpi	r24, 0x40	; 64
    2bd6:	c1 f1       	breq	.+112    	; 0x2c48 <__vector_24+0xbe>
    2bd8:	50 f4       	brcc	.+20     	; 0x2bee <__vector_24+0x64>
    2bda:	80 33       	cpi	r24, 0x30	; 48
    2bdc:	31 f1       	breq	.+76     	; 0x2c2a <__vector_24+0xa0>
    2bde:	88 33       	cpi	r24, 0x38	; 56
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <__vector_24+0x5a>
    2be2:	4f c0       	rjmp	.+158    	; 0x2c82 <__vector_24+0xf8>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2be4:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_ZL9twi_error>
      twi_releaseBus();
    2be8:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z14twi_releaseBusv>
      break;
    2bec:	4a c0       	rjmp	.+148    	; 0x2c82 <__vector_24+0xf8>

// SIGNAL(TWI_vect)
// ISR(TWI_vect, ISR_NOBLOCK )
ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bee:	80 35       	cpi	r24, 0x50	; 80
    2bf0:	f9 f0       	breq	.+62     	; 0x2c30 <__vector_24+0xa6>
    2bf2:	88 35       	cpi	r24, 0x58	; 88
    2bf4:	a9 f1       	breq	.+106    	; 0x2c60 <__vector_24+0xd6>
    2bf6:	88 34       	cpi	r24, 0x48	; 72
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <__vector_24+0x72>
    2bfa:	43 c0       	rjmp	.+134    	; 0x2c82 <__vector_24+0xf8>
    2bfc:	40 c0       	rjmp	.+128    	; 0x2c7e <__vector_24+0xf4>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2bfe:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <_ZL9twi_slarw>
    2c02:	10 c0       	rjmp	.+32     	; 0x2c24 <__vector_24+0x9a>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c04:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c08:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZL22twi_masterBufferLength>
    2c0c:	98 17       	cp	r25, r24
    2c0e:	b8 f5       	brcc	.+110    	; 0x2c7e <__vector_24+0xf4>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c10:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	8e 0f       	add	r24, r30
    2c18:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	e4 54       	subi	r30, 0x44	; 68
    2c20:	fc 4f       	sbci	r31, 0xFC	; 252
    2c22:	80 81       	ld	r24, Z
    2c24:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c28:	15 c0       	rjmp	.+42     	; 0x2c54 <__vector_24+0xca>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c2a:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_ZL9twi_error>
    2c2e:	27 c0       	rjmp	.+78     	; 0x2c7e <__vector_24+0xf4>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c30:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	8e 0f       	add	r24, r30
    2c38:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	e4 54       	subi	r30, 0x44	; 68
    2c44:	fc 4f       	sbci	r31, 0xFC	; 252
    2c46:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c48:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c4c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZL22twi_masterBufferLength>
    2c50:	98 17       	cp	r25, r24
    2c52:	10 f4       	brcc	.+4      	; 0x2c58 <__vector_24+0xce>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c54:	85 ec       	ldi	r24, 0xC5	; 197
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <__vector_24+0xd0>
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c58:	85 e8       	ldi	r24, 0x85	; 133
    2c5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c5e:	11 c0       	rjmp	.+34     	; 0x2c82 <__vector_24+0xf8>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c60:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	8e 0f       	add	r24, r30
    2c68:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZL21twi_masterBufferIndex>
    2c6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	e4 54       	subi	r30, 0x44	; 68
    2c74:	fc 4f       	sbci	r31, 0xFC	; 252
    2c76:	80 83       	st	Z, r24
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <__vector_24+0xf4>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2c7a:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <_ZL9twi_error>
      twi_stop();
    2c7e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_Z8twi_stopv>
      break;
  }
}
    2c82:	ff 91       	pop	r31
    2c84:	ef 91       	pop	r30
    2c86:	bf 91       	pop	r27
    2c88:	af 91       	pop	r26
    2c8a:	9f 91       	pop	r25
    2c8c:	8f 91       	pop	r24
    2c8e:	7f 91       	pop	r23
    2c90:	6f 91       	pop	r22
    2c92:	5f 91       	pop	r21
    2c94:	4f 91       	pop	r20
    2c96:	3f 91       	pop	r19
    2c98:	2f 91       	pop	r18
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	0f 90       	pop	r0
    2ca0:	1f 90       	pop	r1
    2ca2:	18 95       	reti

00002ca4 <_ZN9TimerZero4initEjPFvvEb>:
}
//------------------------------------------------------------------------------
// Stop timer 2 interrupts
void TimerZero::stop()
{
	TIMSK0 = 0;
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <_ZN9TimerZero2f_E+0x1>
    2cb0:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <_ZN9TimerZero2f_E>
    2cb4:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <_ZN9TimerZero6reset_E>
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	34 e0       	ldi	r19, 0x04	; 4
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	3a 95       	dec	r19
    2cc8:	d1 f7       	brne	.-12     	; 0x2cbe <_ZN9TimerZero4initEjPFvvEb+0x1a>
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	f9 01       	movw	r30, r18
    2cd0:	e8 59       	subi	r30, 0x98	; 152
    2cd2:	ff 4d       	sbci	r31, 0xDF	; 223
    2cd4:	e4 91       	lpm	r30, Z
    2cd6:	ee 23       	and	r30, r30
    2cd8:	81 f0       	breq	.+32     	; 0x2cfa <_ZN9TimerZero4initEjPFvvEb+0x56>
    2cda:	6c 01       	movw	r12, r24
    2cdc:	7d 01       	movw	r14, r26
    2cde:	02 2e       	mov	r0, r18
    2ce0:	04 c0       	rjmp	.+8      	; 0x2cea <_ZN9TimerZero4initEjPFvvEb+0x46>
    2ce2:	f6 94       	lsr	r15
    2ce4:	e7 94       	ror	r14
    2ce6:	d7 94       	ror	r13
    2ce8:	c7 94       	ror	r12
    2cea:	0a 94       	dec	r0
    2cec:	d2 f7       	brpl	.-12     	; 0x2ce2 <_ZN9TimerZero4initEjPFvvEb+0x3e>
    2cee:	51 e0       	ldi	r21, 0x01	; 1
    2cf0:	c5 16       	cp	r12, r21
    2cf2:	d5 06       	cpc	r13, r21
    2cf4:	e1 04       	cpc	r14, r1
    2cf6:	f1 04       	cpc	r15, r1
    2cf8:	38 f0       	brcs	.+14     	; 0x2d08 <_ZN9TimerZero4initEjPFvvEb+0x64>
    2cfa:	2f 5f       	subi	r18, 0xFF	; 255
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	2b 30       	cpi	r18, 0x0B	; 11
    2d00:	31 05       	cpc	r19, r1
    2d02:	29 f7       	brne	.-54     	; 0x2cce <_ZN9TimerZero4initEjPFvvEb+0x2a>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	20 c0       	rjmp	.+64     	; 0x2d48 <_ZN9TimerZero4initEjPFvvEb+0xa4>
    2d08:	a1 e0       	ldi	r26, 0x01	; 1
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <_ZN9TimerZero4initEjPFvvEb+0x6e>
    2d0e:	aa 0f       	add	r26, r26
    2d10:	bb 1f       	adc	r27, r27
    2d12:	2a 95       	dec	r18
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <_ZN9TimerZero4initEjPFvvEb+0x6a>
    2d16:	a7 01       	movw	r20, r14
    2d18:	96 01       	movw	r18, r12
    2d1a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <__mulshisi3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	24 e0       	ldi	r18, 0x04	; 4
    2d24:	b5 95       	asr	r27
    2d26:	a7 95       	ror	r26
    2d28:	97 95       	ror	r25
    2d2a:	87 95       	ror	r24
    2d2c:	2a 95       	dec	r18
    2d2e:	d1 f7       	brne	.-12     	; 0x2d24 <_ZN9TimerZero4initEjPFvvEb+0x80>
    2d30:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <_ZN9TimerZero7period_E+0x1>
    2d34:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <_ZN9TimerZero7period_E>
    2d38:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	84 bd       	out	0x24, r24	; 36
    2d40:	e5 bd       	out	0x25, r30	; 37
    2d42:	ca 94       	dec	r12
    2d44:	c7 bc       	out	0x27, r12	; 39
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	df 90       	pop	r13
    2d4e:	cf 90       	pop	r12
    2d50:	08 95       	ret

00002d52 <_ZN9TimerZero5startEv>:
    2d52:	ee e6       	ldi	r30, 0x6E	; 110
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	82 60       	ori	r24, 0x02	; 2
    2d5a:	80 83       	st	Z, r24
    2d5c:	08 95       	ret

00002d5e <__vector_14>:
}
//------------------------------------------------------------------------------
// ISR for timer 0 Compare A interrupt
// TB2012 added ISR_NOBLOCK so it can be interrupted by Timer 1 (audio)
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
    2d5e:	78 94       	sei
    2d60:	1f 92       	push	r1
    2d62:	0f 92       	push	r0
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	0f 92       	push	r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	2f 93       	push	r18
    2d6c:	3f 93       	push	r19
    2d6e:	4f 93       	push	r20
    2d70:	5f 93       	push	r21
    2d72:	6f 93       	push	r22
    2d74:	7f 93       	push	r23
    2d76:	8f 93       	push	r24
    2d78:	9f 93       	push	r25
    2d7a:	af 93       	push	r26
    2d7c:	bf 93       	push	r27
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
	// disable timer 0 interrupts
	TIMSK0 = 0;
    2d82:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// call user function
	(*TimerZero::f_)();
    2d86:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <_ZN9TimerZero2f_E>
    2d8a:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <_ZN9TimerZero2f_E+0x1>
    2d8e:	09 95       	icall
	// in case f_ enabled interrupts
	cli();
    2d90:	f8 94       	cli
	// clear counter if reset_ is true
	if (TimerZero::reset_)
    2d92:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <_ZN9TimerZero6reset_E>
    2d96:	88 23       	and	r24, r24
    2d98:	11 f0       	breq	.+4      	; 0x2d9e <__vector_14+0x40>
	{
		// reset counter
		TCNT0 = 0;
    2d9a:	16 bc       	out	0x26, r1	; 38
		// clear possible pending interrupt
		TIFR0 |= (1 << OCF0A);
    2d9c:	a9 9a       	sbi	0x15, 1	; 21
	}
	// enable timer 2 COMPA interrupt
	TIMSK0 |= (1 << OCIE0A);
    2d9e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2da2:	82 60       	ori	r24, 0x02	; 2
    2da4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
    2da8:	ff 91       	pop	r31
    2daa:	ef 91       	pop	r30
    2dac:	bf 91       	pop	r27
    2dae:	af 91       	pop	r26
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	7f 91       	pop	r23
    2db6:	6f 91       	pop	r22
    2db8:	5f 91       	pop	r21
    2dba:	4f 91       	pop	r20
    2dbc:	3f 91       	pop	r19
    2dbe:	2f 91       	pop	r18
    2dc0:	0f 90       	pop	r0
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	0f 90       	pop	r0
    2dc6:	1f 90       	pop	r1
    2dc8:	18 95       	reti

00002dca <__divsf3>:
    2dca:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__divsf3x>
    2dce:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__fp_round>
    2dd2:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__fp_pscB>
    2dd6:	58 f0       	brcs	.+22     	; 0x2dee <__divsf3+0x24>
    2dd8:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__fp_pscA>
    2ddc:	40 f0       	brcs	.+16     	; 0x2dee <__divsf3+0x24>
    2dde:	29 f4       	brne	.+10     	; 0x2dea <__divsf3+0x20>
    2de0:	5f 3f       	cpi	r21, 0xFF	; 255
    2de2:	29 f0       	breq	.+10     	; 0x2dee <__divsf3+0x24>
    2de4:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_inf>
    2de8:	51 11       	cpse	r21, r1
    2dea:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_szero>
    2dee:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__fp_nan>

00002df2 <__divsf3x>:
    2df2:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__fp_split3>
    2df6:	68 f3       	brcs	.-38     	; 0x2dd2 <__divsf3+0x8>

00002df8 <__divsf3_pse>:
    2df8:	99 23       	and	r25, r25
    2dfa:	b1 f3       	breq	.-20     	; 0x2de8 <__divsf3+0x1e>
    2dfc:	55 23       	and	r21, r21
    2dfe:	91 f3       	breq	.-28     	; 0x2de4 <__divsf3+0x1a>
    2e00:	95 1b       	sub	r25, r21
    2e02:	55 0b       	sbc	r21, r21
    2e04:	bb 27       	eor	r27, r27
    2e06:	aa 27       	eor	r26, r26
    2e08:	62 17       	cp	r22, r18
    2e0a:	73 07       	cpc	r23, r19
    2e0c:	84 07       	cpc	r24, r20
    2e0e:	38 f0       	brcs	.+14     	; 0x2e1e <__divsf3_pse+0x26>
    2e10:	9f 5f       	subi	r25, 0xFF	; 255
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	22 0f       	add	r18, r18
    2e16:	33 1f       	adc	r19, r19
    2e18:	44 1f       	adc	r20, r20
    2e1a:	aa 1f       	adc	r26, r26
    2e1c:	a9 f3       	breq	.-22     	; 0x2e08 <__divsf3_pse+0x10>
    2e1e:	35 d0       	rcall	.+106    	; 0x2e8a <__divsf3_pse+0x92>
    2e20:	0e 2e       	mov	r0, r30
    2e22:	3a f0       	brmi	.+14     	; 0x2e32 <__divsf3_pse+0x3a>
    2e24:	e0 e8       	ldi	r30, 0x80	; 128
    2e26:	32 d0       	rcall	.+100    	; 0x2e8c <__divsf3_pse+0x94>
    2e28:	91 50       	subi	r25, 0x01	; 1
    2e2a:	50 40       	sbci	r21, 0x00	; 0
    2e2c:	e6 95       	lsr	r30
    2e2e:	00 1c       	adc	r0, r0
    2e30:	ca f7       	brpl	.-14     	; 0x2e24 <__divsf3_pse+0x2c>
    2e32:	2b d0       	rcall	.+86     	; 0x2e8a <__divsf3_pse+0x92>
    2e34:	fe 2f       	mov	r31, r30
    2e36:	29 d0       	rcall	.+82     	; 0x2e8a <__divsf3_pse+0x92>
    2e38:	66 0f       	add	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	88 1f       	adc	r24, r24
    2e3e:	bb 1f       	adc	r27, r27
    2e40:	26 17       	cp	r18, r22
    2e42:	37 07       	cpc	r19, r23
    2e44:	48 07       	cpc	r20, r24
    2e46:	ab 07       	cpc	r26, r27
    2e48:	b0 e8       	ldi	r27, 0x80	; 128
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <__divsf3_pse+0x56>
    2e4c:	bb 0b       	sbc	r27, r27
    2e4e:	80 2d       	mov	r24, r0
    2e50:	bf 01       	movw	r22, r30
    2e52:	ff 27       	eor	r31, r31
    2e54:	93 58       	subi	r25, 0x83	; 131
    2e56:	5f 4f       	sbci	r21, 0xFF	; 255
    2e58:	3a f0       	brmi	.+14     	; 0x2e68 <__divsf3_pse+0x70>
    2e5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e5c:	51 05       	cpc	r21, r1
    2e5e:	78 f0       	brcs	.+30     	; 0x2e7e <__divsf3_pse+0x86>
    2e60:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_inf>
    2e64:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_szero>
    2e68:	5f 3f       	cpi	r21, 0xFF	; 255
    2e6a:	e4 f3       	brlt	.-8      	; 0x2e64 <__divsf3_pse+0x6c>
    2e6c:	98 3e       	cpi	r25, 0xE8	; 232
    2e6e:	d4 f3       	brlt	.-12     	; 0x2e64 <__divsf3_pse+0x6c>
    2e70:	86 95       	lsr	r24
    2e72:	77 95       	ror	r23
    2e74:	67 95       	ror	r22
    2e76:	b7 95       	ror	r27
    2e78:	f7 95       	ror	r31
    2e7a:	9f 5f       	subi	r25, 0xFF	; 255
    2e7c:	c9 f7       	brne	.-14     	; 0x2e70 <__divsf3_pse+0x78>
    2e7e:	88 0f       	add	r24, r24
    2e80:	91 1d       	adc	r25, r1
    2e82:	96 95       	lsr	r25
    2e84:	87 95       	ror	r24
    2e86:	97 f9       	bld	r25, 7
    2e88:	08 95       	ret
    2e8a:	e1 e0       	ldi	r30, 0x01	; 1
    2e8c:	66 0f       	add	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	88 1f       	adc	r24, r24
    2e92:	bb 1f       	adc	r27, r27
    2e94:	62 17       	cp	r22, r18
    2e96:	73 07       	cpc	r23, r19
    2e98:	84 07       	cpc	r24, r20
    2e9a:	ba 07       	cpc	r27, r26
    2e9c:	20 f0       	brcs	.+8      	; 0x2ea6 <__divsf3_pse+0xae>
    2e9e:	62 1b       	sub	r22, r18
    2ea0:	73 0b       	sbc	r23, r19
    2ea2:	84 0b       	sbc	r24, r20
    2ea4:	ba 0b       	sbc	r27, r26
    2ea6:	ee 1f       	adc	r30, r30
    2ea8:	88 f7       	brcc	.-30     	; 0x2e8c <__divsf3_pse+0x94>
    2eaa:	e0 95       	com	r30
    2eac:	08 95       	ret

00002eae <__fixunssfsi>:
    2eae:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fp_splitA>
    2eb2:	88 f0       	brcs	.+34     	; 0x2ed6 <__fixunssfsi+0x28>
    2eb4:	9f 57       	subi	r25, 0x7F	; 127
    2eb6:	98 f0       	brcs	.+38     	; 0x2ede <__fixunssfsi+0x30>
    2eb8:	b9 2f       	mov	r27, r25
    2eba:	99 27       	eor	r25, r25
    2ebc:	b7 51       	subi	r27, 0x17	; 23
    2ebe:	b0 f0       	brcs	.+44     	; 0x2eec <__fixunssfsi+0x3e>
    2ec0:	e1 f0       	breq	.+56     	; 0x2efa <__fixunssfsi+0x4c>
    2ec2:	66 0f       	add	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	1a f0       	brmi	.+6      	; 0x2ed2 <__fixunssfsi+0x24>
    2ecc:	ba 95       	dec	r27
    2ece:	c9 f7       	brne	.-14     	; 0x2ec2 <__fixunssfsi+0x14>
    2ed0:	14 c0       	rjmp	.+40     	; 0x2efa <__fixunssfsi+0x4c>
    2ed2:	b1 30       	cpi	r27, 0x01	; 1
    2ed4:	91 f0       	breq	.+36     	; 0x2efa <__fixunssfsi+0x4c>
    2ed6:	0e 94 0d 18 	call	0x301a	; 0x301a <__fp_zero>
    2eda:	b1 e0       	ldi	r27, 0x01	; 1
    2edc:	08 95       	ret
    2ede:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__fp_zero>
    2ee2:	67 2f       	mov	r22, r23
    2ee4:	78 2f       	mov	r23, r24
    2ee6:	88 27       	eor	r24, r24
    2ee8:	b8 5f       	subi	r27, 0xF8	; 248
    2eea:	39 f0       	breq	.+14     	; 0x2efa <__fixunssfsi+0x4c>
    2eec:	b9 3f       	cpi	r27, 0xF9	; 249
    2eee:	cc f3       	brlt	.-14     	; 0x2ee2 <__fixunssfsi+0x34>
    2ef0:	86 95       	lsr	r24
    2ef2:	77 95       	ror	r23
    2ef4:	67 95       	ror	r22
    2ef6:	b3 95       	inc	r27
    2ef8:	d9 f7       	brne	.-10     	; 0x2ef0 <__fixunssfsi+0x42>
    2efa:	3e f4       	brtc	.+14     	; 0x2f0a <__fixunssfsi+0x5c>
    2efc:	90 95       	com	r25
    2efe:	80 95       	com	r24
    2f00:	70 95       	com	r23
    2f02:	61 95       	neg	r22
    2f04:	7f 4f       	sbci	r23, 0xFF	; 255
    2f06:	8f 4f       	sbci	r24, 0xFF	; 255
    2f08:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0a:	08 95       	ret

00002f0c <__floatunsisf>:
    2f0c:	e8 94       	clt
    2f0e:	09 c0       	rjmp	.+18     	; 0x2f22 <__floatsisf+0x12>

00002f10 <__floatsisf>:
    2f10:	97 fb       	bst	r25, 7
    2f12:	3e f4       	brtc	.+14     	; 0x2f22 <__floatsisf+0x12>
    2f14:	90 95       	com	r25
    2f16:	80 95       	com	r24
    2f18:	70 95       	com	r23
    2f1a:	61 95       	neg	r22
    2f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f20:	9f 4f       	sbci	r25, 0xFF	; 255
    2f22:	99 23       	and	r25, r25
    2f24:	a9 f0       	breq	.+42     	; 0x2f50 <__floatsisf+0x40>
    2f26:	f9 2f       	mov	r31, r25
    2f28:	96 e9       	ldi	r25, 0x96	; 150
    2f2a:	bb 27       	eor	r27, r27
    2f2c:	93 95       	inc	r25
    2f2e:	f6 95       	lsr	r31
    2f30:	87 95       	ror	r24
    2f32:	77 95       	ror	r23
    2f34:	67 95       	ror	r22
    2f36:	b7 95       	ror	r27
    2f38:	f1 11       	cpse	r31, r1
    2f3a:	f8 cf       	rjmp	.-16     	; 0x2f2c <__floatsisf+0x1c>
    2f3c:	fa f4       	brpl	.+62     	; 0x2f7c <__floatsisf+0x6c>
    2f3e:	bb 0f       	add	r27, r27
    2f40:	11 f4       	brne	.+4      	; 0x2f46 <__floatsisf+0x36>
    2f42:	60 ff       	sbrs	r22, 0
    2f44:	1b c0       	rjmp	.+54     	; 0x2f7c <__floatsisf+0x6c>
    2f46:	6f 5f       	subi	r22, 0xFF	; 255
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4e:	16 c0       	rjmp	.+44     	; 0x2f7c <__floatsisf+0x6c>
    2f50:	88 23       	and	r24, r24
    2f52:	11 f0       	breq	.+4      	; 0x2f58 <__floatsisf+0x48>
    2f54:	96 e9       	ldi	r25, 0x96	; 150
    2f56:	11 c0       	rjmp	.+34     	; 0x2f7a <__floatsisf+0x6a>
    2f58:	77 23       	and	r23, r23
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <__floatsisf+0x54>
    2f5c:	9e e8       	ldi	r25, 0x8E	; 142
    2f5e:	87 2f       	mov	r24, r23
    2f60:	76 2f       	mov	r23, r22
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <__floatsisf+0x5e>
    2f64:	66 23       	and	r22, r22
    2f66:	71 f0       	breq	.+28     	; 0x2f84 <__floatsisf+0x74>
    2f68:	96 e8       	ldi	r25, 0x86	; 134
    2f6a:	86 2f       	mov	r24, r22
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	2a f0       	brmi	.+10     	; 0x2f7c <__floatsisf+0x6c>
    2f72:	9a 95       	dec	r25
    2f74:	66 0f       	add	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	88 1f       	adc	r24, r24
    2f7a:	da f7       	brpl	.-10     	; 0x2f72 <__floatsisf+0x62>
    2f7c:	88 0f       	add	r24, r24
    2f7e:	96 95       	lsr	r25
    2f80:	87 95       	ror	r24
    2f82:	97 f9       	bld	r25, 7
    2f84:	08 95       	ret

00002f86 <__fp_inf>:
    2f86:	97 f9       	bld	r25, 7
    2f88:	9f 67       	ori	r25, 0x7F	; 127
    2f8a:	80 e8       	ldi	r24, 0x80	; 128
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	08 95       	ret

00002f92 <__fp_nan>:
    2f92:	9f ef       	ldi	r25, 0xFF	; 255
    2f94:	80 ec       	ldi	r24, 0xC0	; 192
    2f96:	08 95       	ret

00002f98 <__fp_pscA>:
    2f98:	00 24       	eor	r0, r0
    2f9a:	0a 94       	dec	r0
    2f9c:	16 16       	cp	r1, r22
    2f9e:	17 06       	cpc	r1, r23
    2fa0:	18 06       	cpc	r1, r24
    2fa2:	09 06       	cpc	r0, r25
    2fa4:	08 95       	ret

00002fa6 <__fp_pscB>:
    2fa6:	00 24       	eor	r0, r0
    2fa8:	0a 94       	dec	r0
    2faa:	12 16       	cp	r1, r18
    2fac:	13 06       	cpc	r1, r19
    2fae:	14 06       	cpc	r1, r20
    2fb0:	05 06       	cpc	r0, r21
    2fb2:	08 95       	ret

00002fb4 <__fp_round>:
    2fb4:	09 2e       	mov	r0, r25
    2fb6:	03 94       	inc	r0
    2fb8:	00 0c       	add	r0, r0
    2fba:	11 f4       	brne	.+4      	; 0x2fc0 <__fp_round+0xc>
    2fbc:	88 23       	and	r24, r24
    2fbe:	52 f0       	brmi	.+20     	; 0x2fd4 <__fp_round+0x20>
    2fc0:	bb 0f       	add	r27, r27
    2fc2:	40 f4       	brcc	.+16     	; 0x2fd4 <__fp_round+0x20>
    2fc4:	bf 2b       	or	r27, r31
    2fc6:	11 f4       	brne	.+4      	; 0x2fcc <__fp_round+0x18>
    2fc8:	60 ff       	sbrs	r22, 0
    2fca:	04 c0       	rjmp	.+8      	; 0x2fd4 <__fp_round+0x20>
    2fcc:	6f 5f       	subi	r22, 0xFF	; 255
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	08 95       	ret

00002fd6 <__fp_split3>:
    2fd6:	57 fd       	sbrc	r21, 7
    2fd8:	90 58       	subi	r25, 0x80	; 128
    2fda:	44 0f       	add	r20, r20
    2fdc:	55 1f       	adc	r21, r21
    2fde:	59 f0       	breq	.+22     	; 0x2ff6 <__fp_splitA+0x10>
    2fe0:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe2:	71 f0       	breq	.+28     	; 0x3000 <__fp_splitA+0x1a>
    2fe4:	47 95       	ror	r20

00002fe6 <__fp_splitA>:
    2fe6:	88 0f       	add	r24, r24
    2fe8:	97 fb       	bst	r25, 7
    2fea:	99 1f       	adc	r25, r25
    2fec:	61 f0       	breq	.+24     	; 0x3006 <__fp_splitA+0x20>
    2fee:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff0:	79 f0       	breq	.+30     	; 0x3010 <__fp_splitA+0x2a>
    2ff2:	87 95       	ror	r24
    2ff4:	08 95       	ret
    2ff6:	12 16       	cp	r1, r18
    2ff8:	13 06       	cpc	r1, r19
    2ffa:	14 06       	cpc	r1, r20
    2ffc:	55 1f       	adc	r21, r21
    2ffe:	f2 cf       	rjmp	.-28     	; 0x2fe4 <__fp_split3+0xe>
    3000:	46 95       	lsr	r20
    3002:	f1 df       	rcall	.-30     	; 0x2fe6 <__fp_splitA>
    3004:	08 c0       	rjmp	.+16     	; 0x3016 <__fp_splitA+0x30>
    3006:	16 16       	cp	r1, r22
    3008:	17 06       	cpc	r1, r23
    300a:	18 06       	cpc	r1, r24
    300c:	99 1f       	adc	r25, r25
    300e:	f1 cf       	rjmp	.-30     	; 0x2ff2 <__fp_splitA+0xc>
    3010:	86 95       	lsr	r24
    3012:	71 05       	cpc	r23, r1
    3014:	61 05       	cpc	r22, r1
    3016:	08 94       	sec
    3018:	08 95       	ret

0000301a <__fp_zero>:
    301a:	e8 94       	clt

0000301c <__fp_szero>:
    301c:	bb 27       	eor	r27, r27
    301e:	66 27       	eor	r22, r22
    3020:	77 27       	eor	r23, r23
    3022:	cb 01       	movw	r24, r22
    3024:	97 f9       	bld	r25, 7
    3026:	08 95       	ret

00003028 <__mulsf3>:
    3028:	0e 94 27 18 	call	0x304e	; 0x304e <__mulsf3x>
    302c:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__fp_round>
    3030:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__fp_pscA>
    3034:	38 f0       	brcs	.+14     	; 0x3044 <__mulsf3+0x1c>
    3036:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__fp_pscB>
    303a:	20 f0       	brcs	.+8      	; 0x3044 <__mulsf3+0x1c>
    303c:	95 23       	and	r25, r21
    303e:	11 f0       	breq	.+4      	; 0x3044 <__mulsf3+0x1c>
    3040:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_inf>
    3044:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__fp_nan>
    3048:	11 24       	eor	r1, r1
    304a:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_szero>

0000304e <__mulsf3x>:
    304e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__fp_split3>
    3052:	70 f3       	brcs	.-36     	; 0x3030 <__mulsf3+0x8>

00003054 <__mulsf3_pse>:
    3054:	95 9f       	mul	r25, r21
    3056:	c1 f3       	breq	.-16     	; 0x3048 <__mulsf3+0x20>
    3058:	95 0f       	add	r25, r21
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	55 1f       	adc	r21, r21
    305e:	62 9f       	mul	r22, r18
    3060:	f0 01       	movw	r30, r0
    3062:	72 9f       	mul	r23, r18
    3064:	bb 27       	eor	r27, r27
    3066:	f0 0d       	add	r31, r0
    3068:	b1 1d       	adc	r27, r1
    306a:	63 9f       	mul	r22, r19
    306c:	aa 27       	eor	r26, r26
    306e:	f0 0d       	add	r31, r0
    3070:	b1 1d       	adc	r27, r1
    3072:	aa 1f       	adc	r26, r26
    3074:	64 9f       	mul	r22, r20
    3076:	66 27       	eor	r22, r22
    3078:	b0 0d       	add	r27, r0
    307a:	a1 1d       	adc	r26, r1
    307c:	66 1f       	adc	r22, r22
    307e:	82 9f       	mul	r24, r18
    3080:	22 27       	eor	r18, r18
    3082:	b0 0d       	add	r27, r0
    3084:	a1 1d       	adc	r26, r1
    3086:	62 1f       	adc	r22, r18
    3088:	73 9f       	mul	r23, r19
    308a:	b0 0d       	add	r27, r0
    308c:	a1 1d       	adc	r26, r1
    308e:	62 1f       	adc	r22, r18
    3090:	83 9f       	mul	r24, r19
    3092:	a0 0d       	add	r26, r0
    3094:	61 1d       	adc	r22, r1
    3096:	22 1f       	adc	r18, r18
    3098:	74 9f       	mul	r23, r20
    309a:	33 27       	eor	r19, r19
    309c:	a0 0d       	add	r26, r0
    309e:	61 1d       	adc	r22, r1
    30a0:	23 1f       	adc	r18, r19
    30a2:	84 9f       	mul	r24, r20
    30a4:	60 0d       	add	r22, r0
    30a6:	21 1d       	adc	r18, r1
    30a8:	82 2f       	mov	r24, r18
    30aa:	76 2f       	mov	r23, r22
    30ac:	6a 2f       	mov	r22, r26
    30ae:	11 24       	eor	r1, r1
    30b0:	9f 57       	subi	r25, 0x7F	; 127
    30b2:	50 40       	sbci	r21, 0x00	; 0
    30b4:	9a f0       	brmi	.+38     	; 0x30dc <__mulsf3_pse+0x88>
    30b6:	f1 f0       	breq	.+60     	; 0x30f4 <__mulsf3_pse+0xa0>
    30b8:	88 23       	and	r24, r24
    30ba:	4a f0       	brmi	.+18     	; 0x30ce <__mulsf3_pse+0x7a>
    30bc:	ee 0f       	add	r30, r30
    30be:	ff 1f       	adc	r31, r31
    30c0:	bb 1f       	adc	r27, r27
    30c2:	66 1f       	adc	r22, r22
    30c4:	77 1f       	adc	r23, r23
    30c6:	88 1f       	adc	r24, r24
    30c8:	91 50       	subi	r25, 0x01	; 1
    30ca:	50 40       	sbci	r21, 0x00	; 0
    30cc:	a9 f7       	brne	.-22     	; 0x30b8 <__mulsf3_pse+0x64>
    30ce:	9e 3f       	cpi	r25, 0xFE	; 254
    30d0:	51 05       	cpc	r21, r1
    30d2:	80 f0       	brcs	.+32     	; 0x30f4 <__mulsf3_pse+0xa0>
    30d4:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_inf>
    30d8:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_szero>
    30dc:	5f 3f       	cpi	r21, 0xFF	; 255
    30de:	e4 f3       	brlt	.-8      	; 0x30d8 <__mulsf3_pse+0x84>
    30e0:	98 3e       	cpi	r25, 0xE8	; 232
    30e2:	d4 f3       	brlt	.-12     	; 0x30d8 <__mulsf3_pse+0x84>
    30e4:	86 95       	lsr	r24
    30e6:	77 95       	ror	r23
    30e8:	67 95       	ror	r22
    30ea:	b7 95       	ror	r27
    30ec:	f7 95       	ror	r31
    30ee:	e7 95       	ror	r30
    30f0:	9f 5f       	subi	r25, 0xFF	; 255
    30f2:	c1 f7       	brne	.-16     	; 0x30e4 <__mulsf3_pse+0x90>
    30f4:	fe 2b       	or	r31, r30
    30f6:	88 0f       	add	r24, r24
    30f8:	91 1d       	adc	r25, r1
    30fa:	96 95       	lsr	r25
    30fc:	87 95       	ror	r24
    30fe:	97 f9       	bld	r25, 7
    3100:	08 95       	ret
    3102:	19 f4       	brne	.+6      	; 0x310a <__mulsf3_pse+0xb6>
    3104:	16 f4       	brtc	.+4      	; 0x310a <__mulsf3_pse+0xb6>
    3106:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__fp_nan>
    310a:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_mpack>

0000310e <sqrt>:
    310e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__fp_splitA>
    3112:	b8 f3       	brcs	.-18     	; 0x3102 <__mulsf3_pse+0xae>
    3114:	99 23       	and	r25, r25
    3116:	c9 f3       	breq	.-14     	; 0x310a <__mulsf3_pse+0xb6>
    3118:	b6 f3       	brts	.-20     	; 0x3106 <__mulsf3_pse+0xb2>
    311a:	9f 57       	subi	r25, 0x7F	; 127
    311c:	55 0b       	sbc	r21, r21
    311e:	87 ff       	sbrs	r24, 7
    3120:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__fp_norm2>
    3124:	00 24       	eor	r0, r0
    3126:	a0 e6       	ldi	r26, 0x60	; 96
    3128:	40 ea       	ldi	r20, 0xA0	; 160
    312a:	90 01       	movw	r18, r0
    312c:	80 58       	subi	r24, 0x80	; 128
    312e:	56 95       	lsr	r21
    3130:	97 95       	ror	r25
    3132:	28 f4       	brcc	.+10     	; 0x313e <sqrt+0x30>
    3134:	80 5c       	subi	r24, 0xC0	; 192
    3136:	66 0f       	add	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	88 1f       	adc	r24, r24
    313c:	20 f0       	brcs	.+8      	; 0x3146 <sqrt+0x38>
    313e:	26 17       	cp	r18, r22
    3140:	37 07       	cpc	r19, r23
    3142:	48 07       	cpc	r20, r24
    3144:	30 f4       	brcc	.+12     	; 0x3152 <sqrt+0x44>
    3146:	62 1b       	sub	r22, r18
    3148:	73 0b       	sbc	r23, r19
    314a:	84 0b       	sbc	r24, r20
    314c:	20 29       	or	r18, r0
    314e:	31 29       	or	r19, r1
    3150:	4a 2b       	or	r20, r26
    3152:	a6 95       	lsr	r26
    3154:	17 94       	ror	r1
    3156:	07 94       	ror	r0
    3158:	20 25       	eor	r18, r0
    315a:	31 25       	eor	r19, r1
    315c:	4a 27       	eor	r20, r26
    315e:	58 f7       	brcc	.-42     	; 0x3136 <sqrt+0x28>
    3160:	66 0f       	add	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	88 1f       	adc	r24, r24
    3166:	20 f0       	brcs	.+8      	; 0x3170 <sqrt+0x62>
    3168:	26 17       	cp	r18, r22
    316a:	37 07       	cpc	r19, r23
    316c:	48 07       	cpc	r20, r24
    316e:	30 f4       	brcc	.+12     	; 0x317c <sqrt+0x6e>
    3170:	62 0b       	sbc	r22, r18
    3172:	73 0b       	sbc	r23, r19
    3174:	84 0b       	sbc	r24, r20
    3176:	20 0d       	add	r18, r0
    3178:	31 1d       	adc	r19, r1
    317a:	41 1d       	adc	r20, r1
    317c:	a0 95       	com	r26
    317e:	81 f7       	brne	.-32     	; 0x3160 <sqrt+0x52>
    3180:	b9 01       	movw	r22, r18
    3182:	84 2f       	mov	r24, r20
    3184:	91 58       	subi	r25, 0x81	; 129
    3186:	88 0f       	add	r24, r24
    3188:	96 95       	lsr	r25
    318a:	87 95       	ror	r24
    318c:	08 95       	ret

0000318e <__fp_mpack>:
    318e:	9f 3f       	cpi	r25, 0xFF	; 255
    3190:	31 f0       	breq	.+12     	; 0x319e <__fp_mpack_finite+0xc>

00003192 <__fp_mpack_finite>:
    3192:	91 50       	subi	r25, 0x01	; 1
    3194:	20 f4       	brcc	.+8      	; 0x319e <__fp_mpack_finite+0xc>
    3196:	87 95       	ror	r24
    3198:	77 95       	ror	r23
    319a:	67 95       	ror	r22
    319c:	b7 95       	ror	r27
    319e:	88 0f       	add	r24, r24
    31a0:	91 1d       	adc	r25, r1
    31a2:	96 95       	lsr	r25
    31a4:	87 95       	ror	r24
    31a6:	97 f9       	bld	r25, 7
    31a8:	08 95       	ret

000031aa <__fp_norm2>:
    31aa:	91 50       	subi	r25, 0x01	; 1
    31ac:	50 40       	sbci	r21, 0x00	; 0
    31ae:	66 0f       	add	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	d2 f7       	brpl	.-12     	; 0x31aa <__fp_norm2>
    31b6:	08 95       	ret

000031b8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    31b8:	1f 92       	push	r1
    31ba:	0f 92       	push	r0
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	0f 92       	push	r0
    31c0:	11 24       	eor	r1, r1
    31c2:	2f 93       	push	r18
    31c4:	8f 93       	push	r24
    31c6:	9f 93       	push	r25
    31c8:	ef 93       	push	r30
    31ca:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    31cc:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <Serial+0x10>
    31d0:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <Serial+0x11>
    31d4:	80 81       	ld	r24, Z
    31d6:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <Serial+0x16>
    31da:	f0 91 03 04 	lds	r31, 0x0403	; 0x800403 <Serial+0x17>
    31de:	82 fd       	sbrc	r24, 2
    31e0:	12 c0       	rjmp	.+36     	; 0x3206 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    31e2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    31e4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <Serial+0x19>
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    31ec:	20 91 06 04 	lds	r18, 0x0406	; 0x800406 <Serial+0x1a>
    31f0:	82 17       	cp	r24, r18
    31f2:	51 f0       	breq	.+20     	; 0x3208 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    31f4:	e0 91 05 04 	lds	r30, 0x0405	; 0x800405 <Serial+0x19>
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	e4 51       	subi	r30, 0x14	; 20
    31fc:	fc 4f       	sbci	r31, 0xFC	; 252
    31fe:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3200:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <Serial+0x19>
    3204:	01 c0       	rjmp	.+2      	; 0x3208 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3206:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3208:	ff 91       	pop	r31
    320a:	ef 91       	pop	r30
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	2f 91       	pop	r18
    3212:	0f 90       	pop	r0
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	0f 90       	pop	r0
    3218:	1f 90       	pop	r1
    321a:	18 95       	reti

0000321c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    321c:	1f 92       	push	r1
    321e:	0f 92       	push	r0
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	0f 92       	push	r0
    3224:	11 24       	eor	r1, r1
    3226:	2f 93       	push	r18
    3228:	3f 93       	push	r19
    322a:	4f 93       	push	r20
    322c:	5f 93       	push	r21
    322e:	6f 93       	push	r22
    3230:	7f 93       	push	r23
    3232:	8f 93       	push	r24
    3234:	9f 93       	push	r25
    3236:	af 93       	push	r26
    3238:	bf 93       	push	r27
    323a:	ef 93       	push	r30
    323c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    323e:	8c ee       	ldi	r24, 0xEC	; 236
    3240:	93 e0       	ldi	r25, 0x03	; 3
    3242:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3246:	ff 91       	pop	r31
    3248:	ef 91       	pop	r30
    324a:	bf 91       	pop	r27
    324c:	af 91       	pop	r26
    324e:	9f 91       	pop	r25
    3250:	8f 91       	pop	r24
    3252:	7f 91       	pop	r23
    3254:	6f 91       	pop	r22
    3256:	5f 91       	pop	r21
    3258:	4f 91       	pop	r20
    325a:	3f 91       	pop	r19
    325c:	2f 91       	pop	r18
    325e:	0f 90       	pop	r0
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	0f 90       	pop	r0
    3264:	1f 90       	pop	r1
    3266:	18 95       	reti

00003268 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3268:	8c ee       	ldi	r24, 0xEC	; 236
    326a:	93 e0       	ldi	r25, 0x03	; 3
    326c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN14HardwareSerial9availableEv>
    3270:	21 e0       	ldi	r18, 0x01	; 1
    3272:	89 2b       	or	r24, r25
    3274:	09 f4       	brne	.+2      	; 0x3278 <_Z17Serial0_availablev+0x10>
    3276:	20 e0       	ldi	r18, 0x00	; 0
}
    3278:	82 2f       	mov	r24, r18
    327a:	08 95       	ret

0000327c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    327c:	ec ee       	ldi	r30, 0xEC	; 236
    327e:	f3 e0       	ldi	r31, 0x03	; 3
    3280:	13 82       	std	Z+3, r1	; 0x03
    3282:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3284:	88 ee       	ldi	r24, 0xE8	; 232
    3286:	93 e0       	ldi	r25, 0x03	; 3
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	84 83       	std	Z+4, r24	; 0x04
    328e:	95 83       	std	Z+5, r25	; 0x05
    3290:	a6 83       	std	Z+6, r26	; 0x06
    3292:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3294:	8e e0       	ldi	r24, 0x0E	; 14
    3296:	91 e0       	ldi	r25, 0x01	; 1
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
    329c:	85 ec       	ldi	r24, 0xC5	; 197
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	95 87       	std	Z+13, r25	; 0x0d
    32a2:	84 87       	std	Z+12, r24	; 0x0c
    32a4:	84 ec       	ldi	r24, 0xC4	; 196
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	97 87       	std	Z+15, r25	; 0x0f
    32aa:	86 87       	std	Z+14, r24	; 0x0e
    32ac:	80 ec       	ldi	r24, 0xC0	; 192
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	91 8b       	std	Z+17, r25	; 0x11
    32b2:	80 8b       	std	Z+16, r24	; 0x10
    32b4:	81 ec       	ldi	r24, 0xC1	; 193
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	93 8b       	std	Z+19, r25	; 0x13
    32ba:	82 8b       	std	Z+18, r24	; 0x12
    32bc:	82 ec       	ldi	r24, 0xC2	; 194
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	95 8b       	std	Z+21, r25	; 0x15
    32c2:	84 8b       	std	Z+20, r24	; 0x14
    32c4:	86 ec       	ldi	r24, 0xC6	; 198
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	97 8b       	std	Z+23, r25	; 0x17
    32ca:	86 8b       	std	Z+22, r24	; 0x16
    32cc:	11 8e       	std	Z+25, r1	; 0x19
    32ce:	12 8e       	std	Z+26, r1	; 0x1a
    32d0:	13 8e       	std	Z+27, r1	; 0x1b
    32d2:	14 8e       	std	Z+28, r1	; 0x1c
    32d4:	08 95       	ret

000032d6 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    32d6:	08 95       	ret

000032d8 <main>:

int main(void)
{
	init();
    32d8:	0e 94 ed 19 	call	0x33da	; 0x33da <init>

	initVariant();
    32dc:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    32e0:	0e 94 86 10 	call	0x210c	; 0x210c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    32e4:	c2 e9       	ldi	r28, 0x92	; 146
    32e6:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    32e8:	0e 94 43 12 	call	0x2486	; 0x2486 <loop>
		if (serialEventRun) serialEventRun();
    32ec:	20 97       	sbiw	r28, 0x00	; 0
    32ee:	e1 f3       	breq	.-8      	; 0x32e8 <main+0x10>
    32f0:	0e 94 92 1a 	call	0x3524	; 0x3524 <_Z14serialEventRunv>
    32f4:	f9 cf       	rjmp	.-14     	; 0x32e8 <main+0x10>

000032f6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	6c 01       	movw	r12, r24
    3308:	eb 01       	movw	r28, r22
    330a:	7b 01       	movw	r14, r22
    330c:	e4 0e       	add	r14, r20
    330e:	f5 1e       	adc	r15, r21
  size_t n = 0;
    3310:	00 e0       	ldi	r16, 0x00	; 0
    3312:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    3314:	ce 15       	cp	r28, r14
    3316:	df 05       	cpc	r29, r15
    3318:	61 f0       	breq	.+24     	; 0x3332 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
    331a:	69 91       	ld	r22, Y+
    331c:	d6 01       	movw	r26, r12
    331e:	ed 91       	ld	r30, X+
    3320:	fc 91       	ld	r31, X
    3322:	01 90       	ld	r0, Z+
    3324:	f0 81       	ld	r31, Z
    3326:	e0 2d       	mov	r30, r0
    3328:	c6 01       	movw	r24, r12
    332a:	09 95       	icall
    332c:	08 0f       	add	r16, r24
    332e:	19 1f       	adc	r17, r25

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3330:	f1 cf       	rjmp	.-30     	; 0x3314 <_ZN5Print5writeEPKhj+0x1e>
    n += write(*buffer++);
  }
  return n;
}
    3332:	c8 01       	movw	r24, r16
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	df 90       	pop	r13
    3342:	cf 90       	pop	r12
    3344:	08 95       	ret

00003346 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3346:	1f 92       	push	r1
    3348:	0f 92       	push	r0
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	0f 92       	push	r0
    334e:	11 24       	eor	r1, r1
    3350:	2f 93       	push	r18
    3352:	3f 93       	push	r19
    3354:	8f 93       	push	r24
    3356:	9f 93       	push	r25
    3358:	af 93       	push	r26
    335a:	bf 93       	push	r27
    335c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <timer0_millis>
    3360:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <timer0_millis+0x1>
    3364:	a0 91 8c 04 	lds	r26, 0x048C	; 0x80048c <timer0_millis+0x2>
    3368:	b0 91 8d 04 	lds	r27, 0x048D	; 0x80048d <timer0_millis+0x3>
    336c:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <timer0_fract>
    3370:	23 e0       	ldi	r18, 0x03	; 3
    3372:	23 0f       	add	r18, r19
    3374:	2d 37       	cpi	r18, 0x7D	; 125
    3376:	20 f4       	brcc	.+8      	; 0x3380 <__vector_16+0x3a>
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	a1 1d       	adc	r26, r1
    337c:	b1 1d       	adc	r27, r1
    337e:	05 c0       	rjmp	.+10     	; 0x338a <__vector_16+0x44>
    3380:	26 e8       	ldi	r18, 0x86	; 134
    3382:	23 0f       	add	r18, r19
    3384:	02 96       	adiw	r24, 0x02	; 2
    3386:	a1 1d       	adc	r26, r1
    3388:	b1 1d       	adc	r27, r1
    338a:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <timer0_fract>
    338e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <timer0_millis>
    3392:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <timer0_millis+0x1>
    3396:	a0 93 8c 04 	sts	0x048C, r26	; 0x80048c <timer0_millis+0x2>
    339a:	b0 93 8d 04 	sts	0x048D, r27	; 0x80048d <timer0_millis+0x3>
    339e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <timer0_overflow_count>
    33a2:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <timer0_overflow_count+0x1>
    33a6:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <timer0_overflow_count+0x2>
    33aa:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <timer0_overflow_count+0x3>
    33ae:	01 96       	adiw	r24, 0x01	; 1
    33b0:	a1 1d       	adc	r26, r1
    33b2:	b1 1d       	adc	r27, r1
    33b4:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <timer0_overflow_count>
    33b8:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <timer0_overflow_count+0x1>
    33bc:	a0 93 90 04 	sts	0x0490, r26	; 0x800490 <timer0_overflow_count+0x2>
    33c0:	b0 93 91 04 	sts	0x0491, r27	; 0x800491 <timer0_overflow_count+0x3>
    33c4:	bf 91       	pop	r27
    33c6:	af 91       	pop	r26
    33c8:	9f 91       	pop	r25
    33ca:	8f 91       	pop	r24
    33cc:	3f 91       	pop	r19
    33ce:	2f 91       	pop	r18
    33d0:	0f 90       	pop	r0
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	0f 90       	pop	r0
    33d6:	1f 90       	pop	r1
    33d8:	18 95       	reti

000033da <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    33da:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    33dc:	84 b5       	in	r24, 0x24	; 36
    33de:	82 60       	ori	r24, 0x02	; 2
    33e0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    33e2:	84 b5       	in	r24, 0x24	; 36
    33e4:	81 60       	ori	r24, 0x01	; 1
    33e6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    33e8:	85 b5       	in	r24, 0x25	; 37
    33ea:	82 60       	ori	r24, 0x02	; 2
    33ec:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    33ee:	85 b5       	in	r24, 0x25	; 37
    33f0:	81 60       	ori	r24, 0x01	; 1
    33f2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    33f4:	ee e6       	ldi	r30, 0x6E	; 110
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	81 60       	ori	r24, 0x01	; 1
    33fc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    33fe:	e1 e8       	ldi	r30, 0x81	; 129
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3404:	80 81       	ld	r24, Z
    3406:	82 60       	ori	r24, 0x02	; 2
    3408:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    340a:	80 81       	ld	r24, Z
    340c:	81 60       	ori	r24, 0x01	; 1
    340e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3410:	e0 e8       	ldi	r30, 0x80	; 128
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	81 60       	ori	r24, 0x01	; 1
    3418:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    341a:	e1 eb       	ldi	r30, 0xB1	; 177
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	84 60       	ori	r24, 0x04	; 4
    3422:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3424:	e0 eb       	ldi	r30, 0xB0	; 176
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	81 60       	ori	r24, 0x01	; 1
    342c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    342e:	ea e7       	ldi	r30, 0x7A	; 122
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	84 60       	ori	r24, 0x04	; 4
    3436:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3438:	80 81       	ld	r24, Z
    343a:	82 60       	ori	r24, 0x02	; 2
    343c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    343e:	80 81       	ld	r24, Z
    3440:	81 60       	ori	r24, 0x01	; 1
    3442:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3444:	80 81       	ld	r24, Z
    3446:	80 68       	ori	r24, 0x80	; 128
    3448:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    344a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    344e:	08 95       	ret

00003450 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	fc 01       	movw	r30, r24
    3458:	ed 58       	subi	r30, 0x8D	; 141
    345a:	ff 4d       	sbci	r31, 0xDF	; 223
    345c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    345e:	fc 01       	movw	r30, r24
    3460:	e9 57       	subi	r30, 0x79	; 121
    3462:	ff 4d       	sbci	r31, 0xDF	; 223
    3464:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3466:	88 23       	and	r24, r24
    3468:	61 f1       	breq	.+88     	; 0x34c2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	fc 01       	movw	r30, r24
    3472:	eb 55       	subi	r30, 0x5B	; 91
    3474:	ff 4d       	sbci	r31, 0xDF	; 223
    3476:	c5 91       	lpm	r28, Z+
    3478:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    347a:	fc 01       	movw	r30, r24
    347c:	e5 56       	subi	r30, 0x65	; 101
    347e:	ff 4d       	sbci	r31, 0xDF	; 223
    3480:	a5 91       	lpm	r26, Z+
    3482:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3484:	61 11       	cpse	r22, r1
    3486:	09 c0       	rjmp	.+18     	; 0x349a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3488:	9f b7       	in	r25, 0x3f	; 63
                cli();
    348a:	f8 94       	cli
		*reg &= ~bit;
    348c:	88 81       	ld	r24, Y
    348e:	20 95       	com	r18
    3490:	82 23       	and	r24, r18
    3492:	88 83       	st	Y, r24
		*out &= ~bit;
    3494:	ec 91       	ld	r30, X
    3496:	2e 23       	and	r18, r30
    3498:	0b c0       	rjmp	.+22     	; 0x34b0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    349a:	62 30       	cpi	r22, 0x02	; 2
    349c:	61 f4       	brne	.+24     	; 0x34b6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    349e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    34a0:	f8 94       	cli
		*reg &= ~bit;
    34a2:	88 81       	ld	r24, Y
    34a4:	32 2f       	mov	r19, r18
    34a6:	30 95       	com	r19
    34a8:	83 23       	and	r24, r19
    34aa:	88 83       	st	Y, r24
		*out |= bit;
    34ac:	ec 91       	ld	r30, X
    34ae:	2e 2b       	or	r18, r30
    34b0:	2c 93       	st	X, r18
		SREG = oldSREG;
    34b2:	9f bf       	out	0x3f, r25	; 63
    34b4:	06 c0       	rjmp	.+12     	; 0x34c2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    34b6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    34b8:	f8 94       	cli
		*reg |= bit;
    34ba:	e8 81       	ld	r30, Y
    34bc:	2e 2b       	or	r18, r30
    34be:	28 83       	st	Y, r18
		SREG = oldSREG;
    34c0:	8f bf       	out	0x3f, r24	; 63
	}
}
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

000034c8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    34c8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    34ca:	91 8d       	ldd	r25, Z+25	; 0x19
    34cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    34ce:	89 2f       	mov	r24, r25
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	80 5c       	subi	r24, 0xC0	; 192
    34d4:	9f 4f       	sbci	r25, 0xFF	; 255
    34d6:	82 1b       	sub	r24, r18
    34d8:	91 09       	sbc	r25, r1
}
    34da:	8f 73       	andi	r24, 0x3F	; 63
    34dc:	99 27       	eor	r25, r25
    34de:	08 95       	ret

000034e0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    34e0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    34e2:	91 8d       	ldd	r25, Z+25	; 0x19
    34e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34e6:	98 17       	cp	r25, r24
    34e8:	31 f0       	breq	.+12     	; 0x34f6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    34ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    34ec:	e8 0f       	add	r30, r24
    34ee:	f1 1d       	adc	r31, r1
    34f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    34f6:	8f ef       	ldi	r24, 0xFF	; 255
    34f8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    34fa:	08 95       	ret

000034fc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    34fc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    34fe:	91 8d       	ldd	r25, Z+25	; 0x19
    3500:	82 8d       	ldd	r24, Z+26	; 0x1a
    3502:	98 17       	cp	r25, r24
    3504:	61 f0       	breq	.+24     	; 0x351e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3506:	82 8d       	ldd	r24, Z+26	; 0x1a
    3508:	df 01       	movw	r26, r30
    350a:	a8 0f       	add	r26, r24
    350c:	b1 1d       	adc	r27, r1
    350e:	5d 96       	adiw	r26, 0x1d	; 29
    3510:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3512:	92 8d       	ldd	r25, Z+26	; 0x1a
    3514:	9f 5f       	subi	r25, 0xFF	; 255
    3516:	9f 73       	andi	r25, 0x3F	; 63
    3518:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    351e:	8f ef       	ldi	r24, 0xFF	; 255
    3520:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3522:	08 95       	ret

00003524 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3524:	84 e3       	ldi	r24, 0x34	; 52
    3526:	99 e1       	ldi	r25, 0x19	; 25
    3528:	89 2b       	or	r24, r25
    352a:	49 f0       	breq	.+18     	; 0x353e <_Z14serialEventRunv+0x1a>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	89 2b       	or	r24, r25
    3532:	29 f0       	breq	.+10     	; 0x353e <_Z14serialEventRunv+0x1a>
    3534:	0e 94 34 19 	call	0x3268	; 0x3268 <_Z17Serial0_availablev>
    3538:	81 11       	cpse	r24, r1
    353a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    353e:	08 95       	ret

00003540 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3540:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3542:	84 8d       	ldd	r24, Z+28	; 0x1c
    3544:	df 01       	movw	r26, r30
    3546:	a8 0f       	add	r26, r24
    3548:	b1 1d       	adc	r27, r1
    354a:	a3 5a       	subi	r26, 0xA3	; 163
    354c:	bf 4f       	sbci	r27, 0xFF	; 255
    354e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3550:	84 8d       	ldd	r24, Z+28	; 0x1c
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	8f 73       	andi	r24, 0x3F	; 63
    3558:	99 27       	eor	r25, r25
    355a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    355c:	a6 89       	ldd	r26, Z+22	; 0x16
    355e:	b7 89       	ldd	r27, Z+23	; 0x17
    3560:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3562:	a0 89       	ldd	r26, Z+16	; 0x10
    3564:	b1 89       	ldd	r27, Z+17	; 0x11
    3566:	8c 91       	ld	r24, X
    3568:	80 64       	ori	r24, 0x40	; 64
    356a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    356c:	93 8d       	ldd	r25, Z+27	; 0x1b
    356e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3570:	98 13       	cpse	r25, r24
    3572:	06 c0       	rjmp	.+12     	; 0x3580 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3574:	02 88       	ldd	r0, Z+18	; 0x12
    3576:	f3 89       	ldd	r31, Z+19	; 0x13
    3578:	e0 2d       	mov	r30, r0
    357a:	80 81       	ld	r24, Z
    357c:	8f 7d       	andi	r24, 0xDF	; 223
    357e:	80 83       	st	Z, r24
    3580:	08 95       	ret

00003582 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3582:	ef 92       	push	r14
    3584:	ff 92       	push	r15
    3586:	0f 93       	push	r16
    3588:	1f 93       	push	r17
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	ec 01       	movw	r28, r24
  _written = true;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3594:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3596:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3598:	98 13       	cpse	r25, r24
    359a:	05 c0       	rjmp	.+10     	; 0x35a6 <_ZN14HardwareSerial5writeEh+0x24>
    359c:	e8 89       	ldd	r30, Y+16	; 0x10
    359e:	f9 89       	ldd	r31, Y+17	; 0x11
    35a0:	80 81       	ld	r24, Z
    35a2:	85 fd       	sbrc	r24, 5
    35a4:	24 c0       	rjmp	.+72     	; 0x35ee <_ZN14HardwareSerial5writeEh+0x6c>
    35a6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    35a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    35aa:	10 e0       	ldi	r17, 0x00	; 0
    35ac:	0f 5f       	subi	r16, 0xFF	; 255
    35ae:	1f 4f       	sbci	r17, 0xFF	; 255
    35b0:	0f 73       	andi	r16, 0x3F	; 63
    35b2:	11 27       	eor	r17, r17
    35b4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    35b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35b8:	e8 12       	cpse	r14, r24
    35ba:	0c c0       	rjmp	.+24     	; 0x35d4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	07 fc       	sbrc	r0, 7
    35c0:	fa cf       	rjmp	.-12     	; 0x35b6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    35c2:	e8 89       	ldd	r30, Y+16	; 0x10
    35c4:	f9 89       	ldd	r31, Y+17	; 0x11
    35c6:	80 81       	ld	r24, Z
    35c8:	85 ff       	sbrs	r24, 5
    35ca:	f5 cf       	rjmp	.-22     	; 0x35b6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    35cc:	ce 01       	movw	r24, r28
    35ce:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    35d2:	f1 cf       	rjmp	.-30     	; 0x35b6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    35d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d6:	fe 01       	movw	r30, r28
    35d8:	e8 0f       	add	r30, r24
    35da:	f1 1d       	adc	r31, r1
    35dc:	e3 5a       	subi	r30, 0xA3	; 163
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    35e2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    35e4:	ea 89       	ldd	r30, Y+18	; 0x12
    35e6:	fb 89       	ldd	r31, Y+19	; 0x13
    35e8:	80 81       	ld	r24, Z
    35ea:	80 62       	ori	r24, 0x20	; 32
    35ec:	07 c0       	rjmp	.+14     	; 0x35fc <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    35ee:	ee 89       	ldd	r30, Y+22	; 0x16
    35f0:	ff 89       	ldd	r31, Y+23	; 0x17
    35f2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    35f4:	e8 89       	ldd	r30, Y+16	; 0x10
    35f6:	f9 89       	ldd	r31, Y+17	; 0x11
    35f8:	80 81       	ld	r24, Z
    35fa:	80 64       	ori	r24, 0x40	; 64
    35fc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	ff 90       	pop	r15
    360c:	ef 90       	pop	r14
    360e:	08 95       	ret

00003610 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3616:	88 8d       	ldd	r24, Y+24	; 0x18
    3618:	88 23       	and	r24, r24
    361a:	c9 f0       	breq	.+50     	; 0x364e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    361c:	ea 89       	ldd	r30, Y+18	; 0x12
    361e:	fb 89       	ldd	r31, Y+19	; 0x13
    3620:	80 81       	ld	r24, Z
    3622:	85 fd       	sbrc	r24, 5
    3624:	05 c0       	rjmp	.+10     	; 0x3630 <_ZN14HardwareSerial5flushEv+0x20>
    3626:	a8 89       	ldd	r26, Y+16	; 0x10
    3628:	b9 89       	ldd	r27, Y+17	; 0x11
    362a:	8c 91       	ld	r24, X
    362c:	86 fd       	sbrc	r24, 6
    362e:	0f c0       	rjmp	.+30     	; 0x364e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	07 fc       	sbrc	r0, 7
    3634:	f5 cf       	rjmp	.-22     	; 0x3620 <_ZN14HardwareSerial5flushEv+0x10>
    3636:	80 81       	ld	r24, Z
    3638:	85 ff       	sbrs	r24, 5
    363a:	f2 cf       	rjmp	.-28     	; 0x3620 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    363c:	a8 89       	ldd	r26, Y+16	; 0x10
    363e:	b9 89       	ldd	r27, Y+17	; 0x11
    3640:	8c 91       	ld	r24, X
    3642:	85 ff       	sbrs	r24, 5
    3644:	ed cf       	rjmp	.-38     	; 0x3620 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3646:	ce 01       	movw	r24, r28
    3648:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    364c:	e7 cf       	rjmp	.-50     	; 0x361c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	08 95       	ret

00003654 <__udivmodsi4>:
    3654:	a1 e2       	ldi	r26, 0x21	; 33
    3656:	1a 2e       	mov	r1, r26
    3658:	aa 1b       	sub	r26, r26
    365a:	bb 1b       	sub	r27, r27
    365c:	fd 01       	movw	r30, r26
    365e:	0d c0       	rjmp	.+26     	; 0x367a <__udivmodsi4_ep>

00003660 <__udivmodsi4_loop>:
    3660:	aa 1f       	adc	r26, r26
    3662:	bb 1f       	adc	r27, r27
    3664:	ee 1f       	adc	r30, r30
    3666:	ff 1f       	adc	r31, r31
    3668:	a2 17       	cp	r26, r18
    366a:	b3 07       	cpc	r27, r19
    366c:	e4 07       	cpc	r30, r20
    366e:	f5 07       	cpc	r31, r21
    3670:	20 f0       	brcs	.+8      	; 0x367a <__udivmodsi4_ep>
    3672:	a2 1b       	sub	r26, r18
    3674:	b3 0b       	sbc	r27, r19
    3676:	e4 0b       	sbc	r30, r20
    3678:	f5 0b       	sbc	r31, r21

0000367a <__udivmodsi4_ep>:
    367a:	66 1f       	adc	r22, r22
    367c:	77 1f       	adc	r23, r23
    367e:	88 1f       	adc	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	1a 94       	dec	r1
    3684:	69 f7       	brne	.-38     	; 0x3660 <__udivmodsi4_loop>
    3686:	60 95       	com	r22
    3688:	70 95       	com	r23
    368a:	80 95       	com	r24
    368c:	90 95       	com	r25
    368e:	9b 01       	movw	r18, r22
    3690:	ac 01       	movw	r20, r24
    3692:	bd 01       	movw	r22, r26
    3694:	cf 01       	movw	r24, r30
    3696:	08 95       	ret

00003698 <__divmodsi4>:
    3698:	05 2e       	mov	r0, r21
    369a:	97 fb       	bst	r25, 7
    369c:	1e f4       	brtc	.+6      	; 0x36a4 <__divmodsi4+0xc>
    369e:	00 94       	com	r0
    36a0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__negsi2>
    36a4:	57 fd       	sbrc	r21, 7
    36a6:	07 d0       	rcall	.+14     	; 0x36b6 <__divmodsi4_neg2>
    36a8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__udivmodsi4>
    36ac:	07 fc       	sbrc	r0, 7
    36ae:	03 d0       	rcall	.+6      	; 0x36b6 <__divmodsi4_neg2>
    36b0:	4e f4       	brtc	.+18     	; 0x36c4 <__divmodsi4_exit>
    36b2:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__negsi2>

000036b6 <__divmodsi4_neg2>:
    36b6:	50 95       	com	r21
    36b8:	40 95       	com	r20
    36ba:	30 95       	com	r19
    36bc:	21 95       	neg	r18
    36be:	3f 4f       	sbci	r19, 0xFF	; 255
    36c0:	4f 4f       	sbci	r20, 0xFF	; 255
    36c2:	5f 4f       	sbci	r21, 0xFF	; 255

000036c4 <__divmodsi4_exit>:
    36c4:	08 95       	ret

000036c6 <__negsi2>:
    36c6:	90 95       	com	r25
    36c8:	80 95       	com	r24
    36ca:	70 95       	com	r23
    36cc:	61 95       	neg	r22
    36ce:	7f 4f       	sbci	r23, 0xFF	; 255
    36d0:	8f 4f       	sbci	r24, 0xFF	; 255
    36d2:	9f 4f       	sbci	r25, 0xFF	; 255
    36d4:	08 95       	ret

000036d6 <__umulhisi3>:
    36d6:	a2 9f       	mul	r26, r18
    36d8:	b0 01       	movw	r22, r0
    36da:	b3 9f       	mul	r27, r19
    36dc:	c0 01       	movw	r24, r0
    36de:	a3 9f       	mul	r26, r19
    36e0:	70 0d       	add	r23, r0
    36e2:	81 1d       	adc	r24, r1
    36e4:	11 24       	eor	r1, r1
    36e6:	91 1d       	adc	r25, r1
    36e8:	b2 9f       	mul	r27, r18
    36ea:	70 0d       	add	r23, r0
    36ec:	81 1d       	adc	r24, r1
    36ee:	11 24       	eor	r1, r1
    36f0:	91 1d       	adc	r25, r1
    36f2:	08 95       	ret

000036f4 <__usmulhisi3>:
    36f4:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__umulhisi3>

000036f8 <__usmulhisi3_tail>:
    36f8:	b7 ff       	sbrs	r27, 7
    36fa:	08 95       	ret
    36fc:	82 1b       	sub	r24, r18
    36fe:	93 0b       	sbc	r25, r19
    3700:	08 95       	ret

00003702 <__muluhisi3>:
    3702:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__umulhisi3>
    3706:	a5 9f       	mul	r26, r21
    3708:	90 0d       	add	r25, r0
    370a:	b4 9f       	mul	r27, r20
    370c:	90 0d       	add	r25, r0
    370e:	a4 9f       	mul	r26, r20
    3710:	80 0d       	add	r24, r0
    3712:	91 1d       	adc	r25, r1
    3714:	11 24       	eor	r1, r1
    3716:	08 95       	ret

00003718 <__mulshisi3>:
    3718:	b7 ff       	sbrs	r27, 7
    371a:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__muluhisi3>

0000371e <__mulohisi3>:
    371e:	0e 94 81 1b 	call	0x3702	; 0x3702 <__muluhisi3>
    3722:	82 1b       	sub	r24, r18
    3724:	93 0b       	sbc	r25, r19
    3726:	08 95       	ret

00003728 <__tablejump2__>:
    3728:	ee 0f       	add	r30, r30
    372a:	ff 1f       	adc	r31, r31
    372c:	05 90       	lpm	r0, Z+
    372e:	f4 91       	lpm	r31, Z
    3730:	e0 2d       	mov	r30, r0
    3732:	09 94       	ijmp

00003734 <_exit>:
    3734:	f8 94       	cli

00003736 <__stop_program>:
    3736:	ff cf       	rjmp	.-2      	; 0x3736 <__stop_program>
