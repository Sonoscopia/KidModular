
OscillatorSynth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000d0e  00000da2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000301  00800126  00800126  00000dc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000085ad  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020cf  00000000  00000000  000097d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002445  00000000  00000000  0000b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  0000dcec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a8e  00000000  00000000  0000e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000323c  00000000  00000000  00011282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  000144be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_13>
  38:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_14>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_16>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_18>
  4c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_19>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_21>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_24>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
  68:	fa 00       	.word	0x00fa	; ????
  6a:	7a 01       	movw	r14, r20
  6c:	86 04       	cpc	r8, r6

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	ee e0       	ldi	r30, 0x0E	; 14
  82:	fd e0       	ldi	r31, 0x0D	; 13
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a6 32       	cpi	r26, 0x26	; 38
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	24 e0       	ldi	r18, 0x04	; 4
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a7 32       	cpi	r26, 0x27	; 39
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	c7 e3       	ldi	r28, 0x37	; 55
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	fe 01       	movw	r30, r28
  ac:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__tablejump2__>
  b0:	c4 33       	cpi	r28, 0x34	; 52
  b2:	d1 07       	cpc	r29, r17
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
  b6:	0e 94 b4 04 	call	0x968	; 0x968 <main>
  ba:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <setup>:
byte message[3] = {0, 0, 0}; 
byte menu, paramAddr;
int val;

void setup(){
  initialize_twi_nonblock();
  c2:	0e 94 81 01 	call	0x302	; 0x302 <_Z23initialize_twi_nonblockv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  c6:	26 e0       	ldi	r18, 0x06	; 6
  c8:	40 e8       	ldi	r20, 0x80	; 128
  ca:	55 e2       	ldi	r21, 0x25	; 37
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	0c 94 bf 03 	jmp	0x77e	; 0x77e <_ZN14HardwareSerial5beginEmh>

000000d8 <loop>:

void loop(){
	//audioHook(); // required here
	
	//message[0] = B10000000; 
	byte _error = twi_initiateReadFrom(I2C_ADDRESS, 3);
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	0e 94 af 01 	call	0x35e	; 0x35e <_Z20twi_initiateReadFromhh>
	byte _length;
	//delay(100); 
	
	_length = twi_readMasterBuffer(message, 3);	
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	8a e2       	ldi	r24, 0x2A	; 42
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_Z20twi_readMasterBufferPhh>
	Serial.print(" ");
	Serial.println(message[2]);
	*/
	
	//Serial.println(_length);
	if( !bit_get(message[0], BIT(7)) ){ // if bit num 7 == 0 then there is data
  ea:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <message>
  ee:	67 fd       	sbrc	r22, 7
  f0:	33 c0       	rjmp	.+102    	; 0x158 <loop+0x80>
		menu = message[0] & 0x0F;
  f2:	6f 70       	andi	r22, 0x0F	; 15
  f4:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <menu>
		Serial.print(menu);
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	81 e8       	ldi	r24, 0x81	; 129
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Print5printEhi>
		Serial.print(" ");
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	81 e8       	ldi	r24, 0x81	; 129
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Print5printEPKc>
		paramAddr = message[0] >> 4;
 110:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <message>
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	75 95       	asr	r23
 11a:	67 95       	ror	r22
 11c:	8a 95       	dec	r24
 11e:	e1 f7       	brne	.-8      	; 0x118 <loop+0x40>
 120:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <paramAddr>
		Serial.print(paramAddr);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	81 e8       	ldi	r24, 0x81	; 129
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Print5printEhi>
		Serial.print(" ");
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	71 e0       	ldi	r23, 0x01	; 1
 134:	81 e8       	ldi	r24, 0x81	; 129
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Print5printEPKc>
		val = reconstruct(message[1], message[2]);
 13c:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <message+0x1>
 140:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <message+0x2>
 144:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
 148:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
		Serial.println(val);
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	81 e8       	ldi	r24, 0x81	; 129
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <_ZN5Print7printlnEii>
 158:	08 95       	ret

0000015a <__vector_13>:


unsigned long mozziMicros()
{
	return audioTicks() * MICROS_PER_AUDIO_TICK;
}
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
 174:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ11__vector_13E9alternate>
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	89 27       	eor	r24, r25
 17c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_ZZ11__vector_13E9alternate>
 180:	88 23       	and	r24, r24
 182:	59 f1       	breq	.+86     	; 0x1da <__vector_13+0x80>
 184:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <output_buffer+0x200>
 188:	e8 2f       	mov	r30, r24
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e2 5d       	subi	r30, 0xD2	; 210
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	20 81       	ld	r18, Z
 196:	31 81       	ldd	r19, Z+1	; 0x01
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <output_buffer+0x200>
 19e:	81 11       	cpse	r24, r1
 1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__vector_13+0x78>
 1a2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <output_buffer+0x202>
 1a6:	98 27       	eor	r25, r24
 1a8:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <output_buffer+0x202>
 1ac:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <output_buffer+0x204>
 1b0:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <output_buffer+0x205>
 1b4:	a0 91 34 03 	lds	r26, 0x0334	; 0x800334 <output_buffer+0x206>
 1b8:	b0 91 35 03 	lds	r27, 0x0335	; 0x800335 <output_buffer+0x207>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	a1 1d       	adc	r26, r1
 1c0:	b1 1d       	adc	r27, r1
 1c2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <output_buffer+0x204>
 1c6:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <output_buffer+0x205>
 1ca:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <output_buffer+0x206>
 1ce:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <output_buffer+0x207>
 1d2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <_GLOBAL__sub_I_output_buffer>:
{

public:
	/** Constructor
	*/
	CircularBuffer(): start(0),end(0),s_msb(0),e_msb(0)
 1f4:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <output_buffer+0x200>
 1f8:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <output_buffer+0x201>
 1fc:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <output_buffer+0x202>
 200:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <output_buffer+0x203>
 204:	08 95       	ret

00000206 <_Z18adcStartConversionh>:
#else
	pin = adcPinToChannelNum(pin); // allow for channel or pin numbers
#endif
	adc_channels_to_read.push(pin);
	return analog_readings[pin];
}
 206:	87 70       	andi	r24, 0x07	; 7
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 20e:	ea e7       	ldi	r30, 0x7A	; 122
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 64       	ori	r24, 0x40	; 64
 216:	80 83       	st	Z, r24
 218:	08 95       	ret

0000021a <_Z23adcReadSelectedChannelsv>:
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <_ZL20adc_channels_to_read+0x8>
 228:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <_ZL20adc_channels_to_read+0x9>
 22c:	8f 3f       	cpi	r24, 0xFF	; 255
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	92 07       	cpc	r25, r18
 232:	61 f0       	breq	.+24     	; 0x24c <_Z23adcReadSelectedChannelsv+0x32>
 234:	fc 01       	movw	r30, r24
 236:	ea 5c       	subi	r30, 0xCA	; 202
 238:	fc 4f       	sbci	r31, 0xFC	; 252
 23a:	20 81       	ld	r18, Z
 23c:	29 83       	std	Y+1, r18	; 0x01
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <_ZL20adc_channels_to_read+0x9>
 244:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <_ZL20adc_channels_to_read+0x8>
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	01 c0       	rjmp	.+2      	; 0x24e <_Z23adcReadSelectedChannelsv+0x34>
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ZL15current_channel>
 252:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZL15current_channel>
 256:	8f 3f       	cpi	r24, 0xFF	; 255
 258:	21 f0       	breq	.+8      	; 0x262 <_Z23adcReadSelectedChannelsv+0x48>
 25a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZL15current_channel>
 25e:	0e 94 03 01 	call	0x206	; 0x206 <_Z18adcStartConversionh>
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <_Z21startSecondControlADCv>:

void startSecondControlADC() {
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
	adc->startSingleRead(teensy_pin);
#else
	ADCSRA |= (1 << ADSC); // start a second conversion on the current channel
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

00000276 <_Z23receiveSecondControlADCv>:

void receiveSecondControlADC(){
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
	analog_readings[current_channel] = adc->readSingle();
#else
	analog_readings[current_channel] = ADC; // officially (ADCL | (ADCH << 8)) but the compiler works it out
 276:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <_ZL15current_channel>
 27a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 282:	ee 0f       	add	r30, r30
 284:	ff 0b       	sbc	r31, r31
 286:	e0 5c       	subi	r30, 0xC0	; 192
 288:	fc 4f       	sbci	r31, 0xFC	; 252
 28a:	91 83       	std	Z+1, r25	; 0x01
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <__vector_21>:
#if defined(__MK20DX128__) || defined(__MK20DX256__) // teensy 3, 3.1
void adc0_isr(void) 
#else
ISR(ADC_vect, ISR_BLOCK) 
#endif
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	if (first)
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b6:	88 23       	and	r24, r24
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <__vector_21+0x34>
	{
    //<1us
   	startSecondControlADC();
 2ba:	0e 94 35 01 	call	0x26a	; 0x26a <_Z21startSecondControlADCv>
   	first=false;
 2be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <__vector_21+0x42>
  }
  else
  {	
  	// 3us
    receiveSecondControlADC();
 2c4:	0e 94 3b 01 	call	0x276	; 0x276 <_Z23receiveSecondControlADCv>
    adcReadSelectedChannels();
 2c8:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z23adcReadSelectedChannelsv>
   	first=true;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <_GLOBAL__sub_I__Z19setupFastAnalogReada>:
	int top;

public:
	/** Constructor
	*/
	Stack(): top(-1)
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
 2f8:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <_ZL20adc_channels_to_read+0x9>
 2fc:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <_ZL20adc_channels_to_read+0x8>
 300:	08 95       	ret

00000302 <_Z23initialize_twi_nonblockv>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 302:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZL13txBufferIndex>
 306:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZL14txBufferLength>
 30a:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZL9twi_state>
 30e:	44 9a       	sbi	0x08, 4	; 8
 310:	45 9a       	sbi	0x08, 5	; 8
 312:	e9 eb       	ldi	r30, 0xB9	; 185
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	80 83       	st	Z, r24
 31c:	80 81       	ld	r24, Z
 31e:	8d 7f       	andi	r24, 0xFD	; 253
 320:	80 83       	st	Z, r24
 322:	88 e4       	ldi	r24, 0x48	; 72
 324:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 328:	85 e4       	ldi	r24, 0x45	; 69
 32a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 32e:	08 95       	ret

00000330 <_Z20twi_continueReadFromv>:
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_ZL9twi_state>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZL9twi_error>
 33c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZL21twi_masterBufferIndex>
 340:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <twi_readLength>
 344:	81 50       	subi	r24, 0x01	; 1
 346:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZL22twi_masterBufferLength>
 34a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <twi_readAddress>
 34e:	88 0f       	add	r24, r24
 350:	81 60       	ori	r24, 0x01	; 1
 352:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <_ZL9twi_slarw>
 356:	85 ee       	ldi	r24, 0xE5	; 229
 358:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 35c:	08 95       	ret

0000035e <_Z20twi_initiateReadFromhh>:
 35e:	61 32       	cpi	r22, 0x21	; 33
 360:	10 f0       	brcs	.+4      	; 0x366 <_Z20twi_initiateReadFromhh+0x8>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	60 93 50 03 	sts	0x0350, r22	; 0x800350 <twi_readLength>
 36a:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <twi_readAddress>
 36e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_ZL9twi_state>
 372:	81 11       	cpse	r24, r1
 374:	03 c0       	rjmp	.+6      	; 0x37c <_Z20twi_initiateReadFromhh+0x1e>
 376:	0e 94 98 01 	call	0x330	; 0x330 <_Z20twi_continueReadFromv>
 37a:	03 c0       	rjmp	.+6      	; 0x382 <_Z20twi_initiateReadFromhh+0x24>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_ZL9twi_state>
 382:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZL9twi_error>
 386:	8f 3f       	cpi	r24, 0xFF	; 255
 388:	61 f3       	breq	.-40     	; 0x362 <_Z20twi_initiateReadFromhh+0x4>
 38a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZL9twi_error>
 38e:	80 32       	cpi	r24, 0x20	; 32
 390:	31 f0       	breq	.+12     	; 0x39e <_Z20twi_initiateReadFromhh+0x40>
 392:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZL9twi_error>
 396:	80 33       	cpi	r24, 0x30	; 48
 398:	21 f0       	breq	.+8      	; 0x3a2 <_Z20twi_initiateReadFromhh+0x44>
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	08 95       	ret
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	08 95       	ret
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	08 95       	ret

000003a6 <_Z20twi_readMasterBufferPhh>:
 3a6:	fc 01       	movw	r30, r24
 3a8:	86 2f       	mov	r24, r22
 3aa:	ab e5       	ldi	r26, 0x5B	; 91
 3ac:	b3 e0       	ldi	r27, 0x03	; 3
 3ae:	9c 91       	ld	r25, X
 3b0:	90 83       	st	Z, r25
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	9c 91       	ld	r25, X
 3b6:	11 97       	sbiw	r26, 0x01	; 1
 3b8:	91 83       	std	Z+1, r25	; 0x01
 3ba:	12 96       	adiw	r26, 0x02	; 2
 3bc:	9c 91       	ld	r25, X
 3be:	92 83       	std	Z+2, r25	; 0x02
 3c0:	08 95       	ret

000003c2 <_Z19twi_continueWriteTov>:
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_ZL9twi_state>
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZL9twi_error>
 3ce:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZL21twi_masterBufferIndex>
 3d2:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <twi_writeLength>
 3d6:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZL22twi_masterBufferLength>
 3da:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <twi_writeData>
 3de:	ab e5       	ldi	r26, 0x5B	; 91
 3e0:	b3 e0       	ldi	r27, 0x03	; 3
 3e2:	e9 2f       	mov	r30, r25
 3e4:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <twi_writeData+0x1>
 3e8:	2e 2f       	mov	r18, r30
 3ea:	29 1b       	sub	r18, r25
 3ec:	28 17       	cp	r18, r24
 3ee:	18 f4       	brcc	.+6      	; 0x3f6 <_Z19twi_continueWriteTov+0x34>
 3f0:	21 91       	ld	r18, Z+
 3f2:	2d 93       	st	X+, r18
 3f4:	f9 cf       	rjmp	.-14     	; 0x3e8 <_Z19twi_continueWriteTov+0x26>
 3f6:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <twi_writeAddress>
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <_ZL9twi_slarw>
 404:	85 ee       	ldi	r24, 0xE5	; 229
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 40a:	08 95       	ret

0000040c <_Z8twi_stopv>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 40c:	85 ed       	ldi	r24, 0xD5	; 213
 40e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){ //FIXME: does this cause a delay?
 412:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 416:	84 fd       	sbrc	r24, 4
 418:	fc cf       	rjmp	.-8      	; 0x412 <_Z8twi_stopv+0x6>
    continue;
  }

  twi_oldstate = twi_state;
 41a:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_ZL9twi_state>
 41e:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_ZL12twi_oldstate>
  // update twi state
  twi_state = TWI_READY;
 422:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZL9twi_state>
  if ( twi_oldstate == TWI_PRE_MTX ){
 426:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZL12twi_oldstate>
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	11 f4       	brne	.+4      	; 0x432 <_Z8twi_stopv+0x26>
      twi_continueWriteTo();
 42e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_Z19twi_continueWriteTov>
  } else if ( twi_oldstate == TWI_PRE_MRX ){
 432:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZL12twi_oldstate>
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	11 f4       	brne	.+4      	; 0x43e <_Z8twi_stopv+0x32>
      twi_continueReadFrom();
 43a:	0c 94 98 01 	jmp	0x330	; 0x330 <_Z20twi_continueReadFromv>
 43e:	08 95       	ret

00000440 <_Z14twi_releaseBusv>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 440:	85 ec       	ldi	r24, 0xC5	; 197
 442:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  twi_oldstate = twi_state;
 446:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_ZL9twi_state>
 44a:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_ZL12twi_oldstate>
  // update twi state
  twi_state = TWI_READY;
 44e:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZL9twi_state>
  if ( twi_oldstate == TWI_PRE_MTX ){
 452:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZL12twi_oldstate>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	11 f4       	brne	.+4      	; 0x45e <_Z14twi_releaseBusv+0x1e>
      twi_continueWriteTo();
 45a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_Z19twi_continueWriteTov>
  } else if ( twi_oldstate == TWI_PRE_MRX ){
 45e:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZL12twi_oldstate>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	11 f4       	brne	.+4      	; 0x46a <_Z14twi_releaseBusv+0x2a>
      twi_continueReadFrom();
 466:	0c 94 98 01 	jmp	0x330	; 0x330 <_Z20twi_continueReadFromv>
 46a:	08 95       	ret

0000046c <__vector_24>:
}

// SIGNAL(TWI_vect)
// ISR(TWI_vect, ISR_NOBLOCK )
ISR(TWI_vect)
{
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
  switch(TW_STATUS){
 48e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 492:	88 7f       	andi	r24, 0xF8	; 248
 494:	88 32       	cpi	r24, 0x28	; 40
 496:	39 f1       	breq	.+78     	; 0x4e6 <__vector_24+0x7a>
 498:	70 f4       	brcc	.+28     	; 0x4b6 <__vector_24+0x4a>
 49a:	80 31       	cpi	r24, 0x10	; 16
 49c:	09 f1       	breq	.+66     	; 0x4e0 <__vector_24+0x74>
 49e:	30 f4       	brcc	.+12     	; 0x4ac <__vector_24+0x40>
 4a0:	88 23       	and	r24, r24
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <__vector_24+0x3a>
 4a4:	5b c0       	rjmp	.+182    	; 0x55c <__vector_24+0xf0>
 4a6:	88 30       	cpi	r24, 0x08	; 8
 4a8:	d9 f0       	breq	.+54     	; 0x4e0 <__vector_24+0x74>
 4aa:	5c c0       	rjmp	.+184    	; 0x564 <__vector_24+0xf8>
 4ac:	88 31       	cpi	r24, 0x18	; 24
 4ae:	d9 f0       	breq	.+54     	; 0x4e6 <__vector_24+0x7a>
 4b0:	80 32       	cpi	r24, 0x20	; 32
 4b2:	61 f1       	breq	.+88     	; 0x50c <__vector_24+0xa0>
 4b4:	57 c0       	rjmp	.+174    	; 0x564 <__vector_24+0xf8>
 4b6:	80 34       	cpi	r24, 0x40	; 64
 4b8:	c1 f1       	breq	.+112    	; 0x52a <__vector_24+0xbe>
 4ba:	50 f4       	brcc	.+20     	; 0x4d0 <__vector_24+0x64>
 4bc:	80 33       	cpi	r24, 0x30	; 48
 4be:	31 f1       	breq	.+76     	; 0x50c <__vector_24+0xa0>
 4c0:	88 33       	cpi	r24, 0x38	; 56
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_24+0x5a>
 4c4:	4f c0       	rjmp	.+158    	; 0x564 <__vector_24+0xf8>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 4c6:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZL9twi_error>
      twi_releaseBus();
 4ca:	0e 94 20 02 	call	0x440	; 0x440 <_Z14twi_releaseBusv>
      break;
 4ce:	4a c0       	rjmp	.+148    	; 0x564 <__vector_24+0xf8>

// SIGNAL(TWI_vect)
// ISR(TWI_vect, ISR_NOBLOCK )
ISR(TWI_vect)
{
  switch(TW_STATUS){
 4d0:	80 35       	cpi	r24, 0x50	; 80
 4d2:	f9 f0       	breq	.+62     	; 0x512 <__vector_24+0xa6>
 4d4:	88 35       	cpi	r24, 0x58	; 88
 4d6:	a9 f1       	breq	.+106    	; 0x542 <__vector_24+0xd6>
 4d8:	88 34       	cpi	r24, 0x48	; 72
 4da:	09 f0       	breq	.+2      	; 0x4de <__vector_24+0x72>
 4dc:	43 c0       	rjmp	.+134    	; 0x564 <__vector_24+0xf8>
 4de:	40 c0       	rjmp	.+128    	; 0x560 <__vector_24+0xf4>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 4e0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_ZL9twi_slarw>
 4e4:	10 c0       	rjmp	.+32     	; 0x506 <__vector_24+0x9a>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 4e6:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZL21twi_masterBufferIndex>
 4ea:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZL22twi_masterBufferLength>
 4ee:	98 17       	cp	r25, r24
 4f0:	b8 f5       	brcc	.+110    	; 0x560 <__vector_24+0xf4>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 4f2:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <_ZL21twi_masterBufferIndex>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	8e 0f       	add	r24, r30
 4fa:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZL21twi_masterBufferIndex>
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	e5 5a       	subi	r30, 0xA5	; 165
 502:	fc 4f       	sbci	r31, 0xFC	; 252
 504:	80 81       	ld	r24, Z
 506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 50a:	15 c0       	rjmp	.+42     	; 0x536 <__vector_24+0xca>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 50c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZL9twi_error>
 510:	27 c0       	rjmp	.+78     	; 0x560 <__vector_24+0xf4>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 512:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <_ZL21twi_masterBufferIndex>
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	8e 0f       	add	r24, r30
 51a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZL21twi_masterBufferIndex>
 51e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	e5 5a       	subi	r30, 0xA5	; 165
 526:	fc 4f       	sbci	r31, 0xFC	; 252
 528:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 52a:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <_ZL21twi_masterBufferIndex>
 52e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <_ZL22twi_masterBufferLength>
 532:	98 17       	cp	r25, r24
 534:	10 f4       	brcc	.+4      	; 0x53a <__vector_24+0xce>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 536:	85 ec       	ldi	r24, 0xC5	; 197
 538:	01 c0       	rjmp	.+2      	; 0x53c <__vector_24+0xd0>
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 53a:	85 e8       	ldi	r24, 0x85	; 133
 53c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 540:	11 c0       	rjmp	.+34     	; 0x564 <__vector_24+0xf8>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 542:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <_ZL21twi_masterBufferIndex>
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8e 0f       	add	r24, r30
 54a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZL21twi_masterBufferIndex>
 54e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e5 5a       	subi	r30, 0xA5	; 165
 556:	fc 4f       	sbci	r31, 0xFC	; 252
 558:	80 83       	st	Z, r24
 55a:	02 c0       	rjmp	.+4      	; 0x560 <__vector_24+0xf4>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 55c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZL9twi_error>
      twi_stop();
 560:	0e 94 06 02 	call	0x40c	; 0x40c <_Z8twi_stopv>
      break;
  }
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <__vector_14>:
}
//------------------------------------------------------------------------------
// ISR for timer 0 Compare A interrupt
// TB2012 added ISR_NOBLOCK so it can be interrupted by Timer 1 (audio)
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
 586:	78 94       	sei
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	// disable timer 0 interrupts
	TIMSK0 = 0;
 5aa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// call user function
	(*TimerZero::f_)();
 5ae:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <_ZN9TimerZero2f_E>
 5b2:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <_ZN9TimerZero2f_E+0x1>
 5b6:	09 95       	icall
	// in case f_ enabled interrupts
	cli();
 5b8:	f8 94       	cli
	// clear counter if reset_ is true
	if (TimerZero::reset_)
 5ba:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN9TimerZero6reset_E>
 5be:	88 23       	and	r24, r24
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__vector_14+0x40>
	{
		// reset counter
		TCNT0 = 0;
 5c2:	16 bc       	out	0x26, r1	; 38
		// clear possible pending interrupt
		TIFR0 |= (1 << OCF0A);
 5c4:	a9 9a       	sbi	0x15, 1	; 21
	}
	// enable timer 2 COMPA interrupt
	TIMSK0 |= (1 << OCIE0A);
 5c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 5ca:	82 60       	ori	r24, 0x02	; 2
 5cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 5f2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 5f4:	91 8d       	ldd	r25, Z+25	; 0x19
 5f6:	22 8d       	ldd	r18, Z+26	; 0x1a
 5f8:	89 2f       	mov	r24, r25
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	80 5c       	subi	r24, 0xC0	; 192
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	82 1b       	sub	r24, r18
 602:	91 09       	sbc	r25, r1
}
 604:	8f 73       	andi	r24, 0x3F	; 63
 606:	99 27       	eor	r25, r25
 608:	08 95       	ret

0000060a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 60a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 60c:	91 8d       	ldd	r25, Z+25	; 0x19
 60e:	82 8d       	ldd	r24, Z+26	; 0x1a
 610:	98 17       	cp	r25, r24
 612:	31 f0       	breq	.+12     	; 0x620 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 614:	82 8d       	ldd	r24, Z+26	; 0x1a
 616:	e8 0f       	add	r30, r24
 618:	f1 1d       	adc	r31, r1
 61a:	85 8d       	ldd	r24, Z+29	; 0x1d
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 624:	08 95       	ret

00000626 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 626:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 628:	91 8d       	ldd	r25, Z+25	; 0x19
 62a:	82 8d       	ldd	r24, Z+26	; 0x1a
 62c:	98 17       	cp	r25, r24
 62e:	61 f0       	breq	.+24     	; 0x648 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 630:	82 8d       	ldd	r24, Z+26	; 0x1a
 632:	df 01       	movw	r26, r30
 634:	a8 0f       	add	r26, r24
 636:	b1 1d       	adc	r27, r1
 638:	5d 96       	adiw	r26, 0x1d	; 29
 63a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 63c:	92 8d       	ldd	r25, Z+26	; 0x1a
 63e:	9f 5f       	subi	r25, 0xFF	; 255
 640:	9f 73       	andi	r25, 0x3F	; 63
 642:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 64c:	08 95       	ret

0000064e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 64e:	8c e7       	ldi	r24, 0x7C	; 124
 650:	94 e0       	ldi	r25, 0x04	; 4
 652:	89 2b       	or	r24, r25
 654:	49 f0       	breq	.+18     	; 0x668 <_Z14serialEventRunv+0x1a>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	89 2b       	or	r24, r25
 65c:	29 f0       	breq	.+10     	; 0x668 <_Z14serialEventRunv+0x1a>
 65e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z17Serial0_availablev>
 662:	81 11       	cpse	r24, r1
 664:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 668:	08 95       	ret

0000066a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 66a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 66c:	84 8d       	ldd	r24, Z+28	; 0x1c
 66e:	df 01       	movw	r26, r30
 670:	a8 0f       	add	r26, r24
 672:	b1 1d       	adc	r27, r1
 674:	a3 5a       	subi	r26, 0xA3	; 163
 676:	bf 4f       	sbci	r27, 0xFF	; 255
 678:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 67a:	84 8d       	ldd	r24, Z+28	; 0x1c
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	8f 73       	andi	r24, 0x3F	; 63
 682:	99 27       	eor	r25, r25
 684:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 686:	a6 89       	ldd	r26, Z+22	; 0x16
 688:	b7 89       	ldd	r27, Z+23	; 0x17
 68a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 68c:	a0 89       	ldd	r26, Z+16	; 0x10
 68e:	b1 89       	ldd	r27, Z+17	; 0x11
 690:	8c 91       	ld	r24, X
 692:	80 64       	ori	r24, 0x40	; 64
 694:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 696:	93 8d       	ldd	r25, Z+27	; 0x1b
 698:	84 8d       	ldd	r24, Z+28	; 0x1c
 69a:	98 13       	cpse	r25, r24
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 69e:	02 88       	ldd	r0, Z+18	; 0x12
 6a0:	f3 89       	ldd	r31, Z+19	; 0x13
 6a2:	e0 2d       	mov	r30, r0
 6a4:	80 81       	ld	r24, Z
 6a6:	8f 7d       	andi	r24, 0xDF	; 223
 6a8:	80 83       	st	Z, r24
 6aa:	08 95       	ret

000006ac <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	ec 01       	movw	r28, r24
  _written = true;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 6be:	9b 8d       	ldd	r25, Y+27	; 0x1b
 6c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6c2:	98 13       	cpse	r25, r24
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <_ZN14HardwareSerial5writeEh+0x24>
 6c6:	e8 89       	ldd	r30, Y+16	; 0x10
 6c8:	f9 89       	ldd	r31, Y+17	; 0x11
 6ca:	80 81       	ld	r24, Z
 6cc:	85 fd       	sbrc	r24, 5
 6ce:	24 c0       	rjmp	.+72     	; 0x718 <_ZN14HardwareSerial5writeEh+0x6c>
 6d0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 6d2:	0b 8d       	ldd	r16, Y+27	; 0x1b
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	0f 5f       	subi	r16, 0xFF	; 255
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	0f 73       	andi	r16, 0x3F	; 63
 6dc:	11 27       	eor	r17, r17
 6de:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 6e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6e2:	e8 12       	cpse	r14, r24
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	07 fc       	sbrc	r0, 7
 6ea:	fa cf       	rjmp	.-12     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 6ec:	e8 89       	ldd	r30, Y+16	; 0x10
 6ee:	f9 89       	ldd	r31, Y+17	; 0x11
 6f0:	80 81       	ld	r24, Z
 6f2:	85 ff       	sbrs	r24, 5
 6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 6fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
 700:	fe 01       	movw	r30, r28
 702:	e8 0f       	add	r30, r24
 704:	f1 1d       	adc	r31, r1
 706:	e3 5a       	subi	r30, 0xA3	; 163
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 70c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 70e:	ea 89       	ldd	r30, Y+18	; 0x12
 710:	fb 89       	ldd	r31, Y+19	; 0x13
 712:	80 81       	ld	r24, Z
 714:	80 62       	ori	r24, 0x20	; 32
 716:	07 c0       	rjmp	.+14     	; 0x726 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 718:	ee 89       	ldd	r30, Y+22	; 0x16
 71a:	ff 89       	ldd	r31, Y+23	; 0x17
 71c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 71e:	e8 89       	ldd	r30, Y+16	; 0x10
 720:	f9 89       	ldd	r31, Y+17	; 0x11
 722:	80 81       	ld	r24, Z
 724:	80 64       	ori	r24, 0x40	; 64
 726:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	ff 90       	pop	r15
 736:	ef 90       	pop	r14
 738:	08 95       	ret

0000073a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 740:	88 8d       	ldd	r24, Y+24	; 0x18
 742:	88 23       	and	r24, r24
 744:	c9 f0       	breq	.+50     	; 0x778 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 746:	ea 89       	ldd	r30, Y+18	; 0x12
 748:	fb 89       	ldd	r31, Y+19	; 0x13
 74a:	80 81       	ld	r24, Z
 74c:	85 fd       	sbrc	r24, 5
 74e:	05 c0       	rjmp	.+10     	; 0x75a <_ZN14HardwareSerial5flushEv+0x20>
 750:	a8 89       	ldd	r26, Y+16	; 0x10
 752:	b9 89       	ldd	r27, Y+17	; 0x11
 754:	8c 91       	ld	r24, X
 756:	86 fd       	sbrc	r24, 6
 758:	0f c0       	rjmp	.+30     	; 0x778 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	07 fc       	sbrc	r0, 7
 75e:	f5 cf       	rjmp	.-22     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
 760:	80 81       	ld	r24, Z
 762:	85 ff       	sbrs	r24, 5
 764:	f2 cf       	rjmp	.-28     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 766:	a8 89       	ldd	r26, Y+16	; 0x10
 768:	b9 89       	ldd	r27, Y+17	; 0x11
 76a:	8c 91       	ld	r24, X
 76c:	85 ff       	sbrs	r24, 5
 76e:	ed cf       	rjmp	.-38     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 770:	ce 01       	movw	r24, r28
 772:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 776:	e7 cf       	rjmp	.-50     	; 0x746 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 77e:	cf 92       	push	r12
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	ec 01       	movw	r28, r24
 78e:	6a 01       	movw	r12, r20
 790:	7b 01       	movw	r14, r22
 792:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 794:	e8 89       	ldd	r30, Y+16	; 0x10
 796:	f9 89       	ldd	r31, Y+17	; 0x11
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 79c:	41 15       	cp	r20, r1
 79e:	51 4e       	sbci	r21, 0xE1	; 225
 7a0:	61 05       	cpc	r22, r1
 7a2:	71 05       	cpc	r23, r1
 7a4:	b1 f0       	breq	.+44     	; 0x7d2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	79 e0       	ldi	r23, 0x09	; 9
 7aa:	8d e3       	ldi	r24, 0x3D	; 61
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	a7 01       	movw	r20, r14
 7b0:	96 01       	movw	r18, r12
 7b2:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodsi4>
 7b6:	da 01       	movw	r26, r20
 7b8:	c9 01       	movw	r24, r18
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	a1 09       	sbc	r26, r1
 7be:	b1 09       	sbc	r27, r1
 7c0:	b6 95       	lsr	r27
 7c2:	a7 95       	ror	r26
 7c4:	97 95       	ror	r25
 7c6:	87 95       	ror	r24
 7c8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 7ca:	21 15       	cp	r18, r1
 7cc:	80 e1       	ldi	r24, 0x10	; 16
 7ce:	38 07       	cpc	r19, r24
 7d0:	a8 f0       	brcs	.+42     	; 0x7fc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 7d2:	e8 89       	ldd	r30, Y+16	; 0x10
 7d4:	f9 89       	ldd	r31, Y+17	; 0x11
 7d6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 7d8:	60 e8       	ldi	r22, 0x80	; 128
 7da:	74 e8       	ldi	r23, 0x84	; 132
 7dc:	8e e1       	ldi	r24, 0x1E	; 30
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	a7 01       	movw	r20, r14
 7e2:	96 01       	movw	r18, r12
 7e4:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodsi4>
 7e8:	da 01       	movw	r26, r20
 7ea:	c9 01       	movw	r24, r18
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	a1 09       	sbc	r26, r1
 7f0:	b1 09       	sbc	r27, r1
 7f2:	b6 95       	lsr	r27
 7f4:	a7 95       	ror	r26
 7f6:	97 95       	ror	r25
 7f8:	87 95       	ror	r24
 7fa:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 7fc:	ec 85       	ldd	r30, Y+12	; 0x0c
 7fe:	fd 85       	ldd	r31, Y+13	; 0x0d
 800:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 802:	ee 85       	ldd	r30, Y+14	; 0x0e
 804:	ff 85       	ldd	r31, Y+15	; 0x0f
 806:	20 83       	st	Z, r18

  _written = false;
 808:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 80a:	ec 89       	ldd	r30, Y+20	; 0x14
 80c:	fd 89       	ldd	r31, Y+21	; 0x15
 80e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 810:	ea 89       	ldd	r30, Y+18	; 0x12
 812:	fb 89       	ldd	r31, Y+19	; 0x13
 814:	80 81       	ld	r24, Z
 816:	80 61       	ori	r24, 0x10	; 16
 818:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 81a:	ea 89       	ldd	r30, Y+18	; 0x12
 81c:	fb 89       	ldd	r31, Y+19	; 0x13
 81e:	80 81       	ld	r24, Z
 820:	88 60       	ori	r24, 0x08	; 8
 822:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 824:	ea 89       	ldd	r30, Y+18	; 0x12
 826:	fb 89       	ldd	r31, Y+19	; 0x13
 828:	80 81       	ld	r24, Z
 82a:	80 68       	ori	r24, 0x80	; 128
 82c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 82e:	ea 89       	ldd	r30, Y+18	; 0x12
 830:	fb 89       	ldd	r31, Y+19	; 0x13
 832:	80 81       	ld	r24, Z
 834:	8f 7d       	andi	r24, 0xDF	; 223
 836:	80 83       	st	Z, r24
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	df 90       	pop	r13
 844:	cf 90       	pop	r12
 846:	08 95       	ret

00000848 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	2f 93       	push	r18
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 85c:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <Serial+0x10>
 860:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <Serial+0x11>
 864:	80 81       	ld	r24, Z
 866:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <Serial+0x16>
 86a:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <Serial+0x17>
 86e:	82 fd       	sbrc	r24, 2
 870:	12 c0       	rjmp	.+36     	; 0x896 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 872:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 874:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <Serial+0x19>
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 87c:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <Serial+0x1a>
 880:	82 17       	cp	r24, r18
 882:	51 f0       	breq	.+20     	; 0x898 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 884:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <Serial+0x19>
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	ef 57       	subi	r30, 0x7F	; 127
 88c:	fc 4f       	sbci	r31, 0xFC	; 252
 88e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 890:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Serial+0x19>
 894:	01 c0       	rjmp	.+2      	; 0x898 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 896:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	9f 91       	pop	r25
 89e:	8f 91       	pop	r24
 8a0:	2f 91       	pop	r18
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	11 24       	eor	r1, r1
 8b6:	2f 93       	push	r18
 8b8:	3f 93       	push	r19
 8ba:	4f 93       	push	r20
 8bc:	5f 93       	push	r21
 8be:	6f 93       	push	r22
 8c0:	7f 93       	push	r23
 8c2:	8f 93       	push	r24
 8c4:	9f 93       	push	r25
 8c6:	af 93       	push	r26
 8c8:	bf 93       	push	r27
 8ca:	ef 93       	push	r30
 8cc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 8ce:	81 e8       	ldi	r24, 0x81	; 129
 8d0:	93 e0       	ldi	r25, 0x03	; 3
 8d2:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	bf 91       	pop	r27
 8dc:	af 91       	pop	r26
 8de:	9f 91       	pop	r25
 8e0:	8f 91       	pop	r24
 8e2:	7f 91       	pop	r23
 8e4:	6f 91       	pop	r22
 8e6:	5f 91       	pop	r21
 8e8:	4f 91       	pop	r20
 8ea:	3f 91       	pop	r19
 8ec:	2f 91       	pop	r18
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 8f8:	81 e8       	ldi	r24, 0x81	; 129
 8fa:	93 e0       	ldi	r25, 0x03	; 3
 8fc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN14HardwareSerial9availableEv>
 900:	21 e0       	ldi	r18, 0x01	; 1
 902:	89 2b       	or	r24, r25
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	20 e0       	ldi	r18, 0x00	; 0
}
 908:	82 2f       	mov	r24, r18
 90a:	08 95       	ret

0000090c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 90c:	e1 e8       	ldi	r30, 0x81	; 129
 90e:	f3 e0       	ldi	r31, 0x03	; 3
 910:	13 82       	std	Z+3, r1	; 0x03
 912:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 914:	88 ee       	ldi	r24, 0xE8	; 232
 916:	93 e0       	ldi	r25, 0x03	; 3
 918:	a0 e0       	ldi	r26, 0x00	; 0
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	84 83       	std	Z+4, r24	; 0x04
 91e:	95 83       	std	Z+5, r25	; 0x05
 920:	a6 83       	std	Z+6, r26	; 0x06
 922:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 924:	88 e0       	ldi	r24, 0x08	; 8
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	91 83       	std	Z+1, r25	; 0x01
 92a:	80 83       	st	Z, r24
 92c:	85 ec       	ldi	r24, 0xC5	; 197
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	95 87       	std	Z+13, r25	; 0x0d
 932:	84 87       	std	Z+12, r24	; 0x0c
 934:	84 ec       	ldi	r24, 0xC4	; 196
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	97 87       	std	Z+15, r25	; 0x0f
 93a:	86 87       	std	Z+14, r24	; 0x0e
 93c:	80 ec       	ldi	r24, 0xC0	; 192
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	91 8b       	std	Z+17, r25	; 0x11
 942:	80 8b       	std	Z+16, r24	; 0x10
 944:	81 ec       	ldi	r24, 0xC1	; 193
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	93 8b       	std	Z+19, r25	; 0x13
 94a:	82 8b       	std	Z+18, r24	; 0x12
 94c:	82 ec       	ldi	r24, 0xC2	; 194
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	95 8b       	std	Z+21, r25	; 0x15
 952:	84 8b       	std	Z+20, r24	; 0x14
 954:	86 ec       	ldi	r24, 0xC6	; 198
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	97 8b       	std	Z+23, r25	; 0x17
 95a:	86 8b       	std	Z+22, r24	; 0x16
 95c:	11 8e       	std	Z+25, r1	; 0x19
 95e:	12 8e       	std	Z+26, r1	; 0x1a
 960:	13 8e       	std	Z+27, r1	; 0x1b
 962:	14 8e       	std	Z+28, r1	; 0x1c
 964:	08 95       	ret

00000966 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 966:	08 95       	ret

00000968 <main>:

int main(void)
{
	init();
 968:	0e 94 22 06 	call	0xc44	; 0xc44 <init>

	initVariant();
 96c:	0e 94 b3 04 	call	0x966	; 0x966 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 970:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 974:	c7 e2       	ldi	r28, 0x27	; 39
 976:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 978:	0e 94 6c 00 	call	0xd8	; 0xd8 <loop>
		if (serialEventRun) serialEventRun();
 97c:	20 97       	sbiw	r28, 0x00	; 0
 97e:	e1 f3       	breq	.-8      	; 0x978 <main+0x10>
 980:	0e 94 27 03 	call	0x64e	; 0x64e <_Z14serialEventRunv>
 984:	f9 cf       	rjmp	.-14     	; 0x978 <main+0x10>

00000986 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 986:	cf 92       	push	r12
 988:	df 92       	push	r13
 98a:	ef 92       	push	r14
 98c:	ff 92       	push	r15
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	6c 01       	movw	r12, r24
 998:	eb 01       	movw	r28, r22
 99a:	7b 01       	movw	r14, r22
 99c:	e4 0e       	add	r14, r20
 99e:	f5 1e       	adc	r15, r21
 9a0:	00 e0       	ldi	r16, 0x00	; 0
 9a2:	10 e0       	ldi	r17, 0x00	; 0
 9a4:	ce 15       	cp	r28, r14
 9a6:	df 05       	cpc	r29, r15
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <_ZN5Print5writeEPKhj+0x3c>
 9aa:	69 91       	ld	r22, Y+
 9ac:	d6 01       	movw	r26, r12
 9ae:	ed 91       	ld	r30, X+
 9b0:	fc 91       	ld	r31, X
 9b2:	01 90       	ld	r0, Z+
 9b4:	f0 81       	ld	r31, Z
 9b6:	e0 2d       	mov	r30, r0
 9b8:	c6 01       	movw	r24, r12
 9ba:	09 95       	icall
 9bc:	08 0f       	add	r16, r24
 9be:	19 1f       	adc	r17, r25
 9c0:	f1 cf       	rjmp	.-30     	; 0x9a4 <_ZN5Print5writeEPKhj+0x1e>
 9c2:	c8 01       	movw	r24, r16
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	08 95       	ret

000009d6 <_ZN5Print5writeEPKc>:
 9d6:	61 15       	cp	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	79 f0       	breq	.+30     	; 0x9fa <_ZN5Print5writeEPKc+0x24>
 9dc:	fb 01       	movw	r30, r22
 9de:	01 90       	ld	r0, Z+
 9e0:	00 20       	and	r0, r0
 9e2:	e9 f7       	brne	.-6      	; 0x9de <_ZN5Print5writeEPKc+0x8>
 9e4:	31 97       	sbiw	r30, 0x01	; 1
 9e6:	af 01       	movw	r20, r30
 9e8:	46 1b       	sub	r20, r22
 9ea:	57 0b       	sbc	r21, r23
 9ec:	dc 01       	movw	r26, r24
 9ee:	ed 91       	ld	r30, X+
 9f0:	fc 91       	ld	r31, X
 9f2:	02 80       	ldd	r0, Z+2	; 0x02
 9f4:	f3 81       	ldd	r31, Z+3	; 0x03
 9f6:	e0 2d       	mov	r30, r0
 9f8:	09 94       	ijmp
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	08 95       	ret

00000a00 <_ZN5Print5printEPKc>:
 a00:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_ZN5Print5writeEPKc>

00000a04 <_ZN5Print5printEc>:
 a04:	dc 01       	movw	r26, r24
 a06:	ed 91       	ld	r30, X+
 a08:	fc 91       	ld	r31, X
 a0a:	01 90       	ld	r0, Z+
 a0c:	f0 81       	ld	r31, Z
 a0e:	e0 2d       	mov	r30, r0
 a10:	09 94       	ijmp

00000a12 <_ZN5Print7printlnEv>:
 a12:	64 e1       	ldi	r22, 0x14	; 20
 a14:	71 e0       	ldi	r23, 0x01	; 1
 a16:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_ZN5Print5writeEPKc>

00000a1a <_ZN5Print11printNumberEmh>:
 a1a:	8f 92       	push	r8
 a1c:	9f 92       	push	r9
 a1e:	af 92       	push	r10
 a20:	bf 92       	push	r11
 a22:	cf 92       	push	r12
 a24:	df 92       	push	r13
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	cd b7       	in	r28, 0x3d	; 61
 a34:	de b7       	in	r29, 0x3e	; 62
 a36:	a1 97       	sbiw	r28, 0x21	; 33
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	6c 01       	movw	r12, r24
 a44:	14 2f       	mov	r17, r20
 a46:	e5 2f       	mov	r30, r21
 a48:	cb 01       	movw	r24, r22
 a4a:	02 2f       	mov	r16, r18
 a4c:	19 a2       	std	Y+33, r1	; 0x21
 a4e:	22 30       	cpi	r18, 0x02	; 2
 a50:	08 f4       	brcc	.+2      	; 0xa54 <_ZN5Print11printNumberEmh+0x3a>
 a52:	0a e0       	ldi	r16, 0x0A	; 10
 a54:	7e 01       	movw	r14, r28
 a56:	21 e2       	ldi	r18, 0x21	; 33
 a58:	e2 0e       	add	r14, r18
 a5a:	f1 1c       	adc	r15, r1
 a5c:	80 2e       	mov	r8, r16
 a5e:	91 2c       	mov	r9, r1
 a60:	a1 2c       	mov	r10, r1
 a62:	b1 2c       	mov	r11, r1
 a64:	61 2f       	mov	r22, r17
 a66:	7e 2f       	mov	r23, r30
 a68:	a5 01       	movw	r20, r10
 a6a:	94 01       	movw	r18, r8
 a6c:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodsi4>
 a70:	02 9f       	mul	r16, r18
 a72:	10 19       	sub	r17, r0
 a74:	11 24       	eor	r1, r1
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	e8 1a       	sub	r14, r24
 a7a:	f1 08       	sbc	r15, r1
 a7c:	1a 30       	cpi	r17, 0x0A	; 10
 a7e:	10 f4       	brcc	.+4      	; 0xa84 <_ZN5Print11printNumberEmh+0x6a>
 a80:	10 5d       	subi	r17, 0xD0	; 208
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <_ZN5Print11printNumberEmh+0x6c>
 a84:	19 5c       	subi	r17, 0xC9	; 201
 a86:	f7 01       	movw	r30, r14
 a88:	10 83       	st	Z, r17
 a8a:	12 2f       	mov	r17, r18
 a8c:	e3 2f       	mov	r30, r19
 a8e:	ca 01       	movw	r24, r20
 a90:	23 2b       	or	r18, r19
 a92:	24 2b       	or	r18, r20
 a94:	25 2b       	or	r18, r21
 a96:	31 f7       	brne	.-52     	; 0xa64 <_ZN5Print11printNumberEmh+0x4a>
 a98:	b7 01       	movw	r22, r14
 a9a:	c6 01       	movw	r24, r12
 a9c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN5Print5writeEPKc>
 aa0:	a1 96       	adiw	r28, 0x21	; 33
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	ff 90       	pop	r15
 ab6:	ef 90       	pop	r14
 ab8:	df 90       	pop	r13
 aba:	cf 90       	pop	r12
 abc:	bf 90       	pop	r11
 abe:	af 90       	pop	r10
 ac0:	9f 90       	pop	r9
 ac2:	8f 90       	pop	r8
 ac4:	08 95       	ret

00000ac6 <_ZN5Print5printEmi>:
 ac6:	21 15       	cp	r18, r1
 ac8:	31 05       	cpc	r19, r1
 aca:	41 f4       	brne	.+16     	; 0xadc <_ZN5Print5printEmi+0x16>
 acc:	dc 01       	movw	r26, r24
 ace:	ed 91       	ld	r30, X+
 ad0:	fc 91       	ld	r31, X
 ad2:	01 90       	ld	r0, Z+
 ad4:	f0 81       	ld	r31, Z
 ad6:	e0 2d       	mov	r30, r0
 ad8:	64 2f       	mov	r22, r20
 ada:	09 94       	ijmp
 adc:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_ZN5Print11printNumberEmh>

00000ae0 <_ZN5Print5printEhi>:
 ae0:	9a 01       	movw	r18, r20
 ae2:	46 2f       	mov	r20, r22
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_ZN5Print5printEmi>

00000aee <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 aee:	cf 92       	push	r12
 af0:	df 92       	push	r13
 af2:	ef 92       	push	r14
 af4:	ff 92       	push	r15
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
  if (base == 0) {
 afe:	21 15       	cp	r18, r1
 b00:	31 05       	cpc	r19, r1
 b02:	81 f4       	brne	.+32     	; 0xb24 <_ZN5Print5printEli+0x36>
    return write(n);
 b04:	dc 01       	movw	r26, r24
 b06:	ed 91       	ld	r30, X+
 b08:	fc 91       	ld	r31, X
 b0a:	01 90       	ld	r0, Z+
 b0c:	f0 81       	ld	r31, Z
 b0e:	e0 2d       	mov	r30, r0
 b10:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	1f 91       	pop	r17
 b18:	0f 91       	pop	r16
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	df 90       	pop	r13
 b20:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 b22:	09 94       	ijmp
  } else if (base == 10) {
 b24:	2a 30       	cpi	r18, 0x0A	; 10
 b26:	31 05       	cpc	r19, r1
 b28:	01 f5       	brne	.+64     	; 0xb6a <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 b2a:	77 ff       	sbrs	r23, 7
 b2c:	1d c0       	rjmp	.+58     	; 0xb68 <_ZN5Print5printEli+0x7a>
 b2e:	6a 01       	movw	r12, r20
 b30:	7b 01       	movw	r14, r22
 b32:	ec 01       	movw	r28, r24
      int t = print('-');
 b34:	6d e2       	ldi	r22, 0x2D	; 45
 b36:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN5Print5printEc>
 b3a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 b3c:	44 27       	eor	r20, r20
 b3e:	55 27       	eor	r21, r21
 b40:	ba 01       	movw	r22, r20
 b42:	4c 19       	sub	r20, r12
 b44:	5d 09       	sbc	r21, r13
 b46:	6e 09       	sbc	r22, r14
 b48:	7f 09       	sbc	r23, r15
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	ce 01       	movw	r24, r28
 b4e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN5Print11printNumberEmh>
 b52:	80 0f       	add	r24, r16
 b54:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	ff 90       	pop	r15
 b60:	ef 90       	pop	r14
 b62:	df 90       	pop	r13
 b64:	cf 90       	pop	r12
 b66:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 b68:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	1f 91       	pop	r17
 b70:	0f 91       	pop	r16
 b72:	ff 90       	pop	r15
 b74:	ef 90       	pop	r14
 b76:	df 90       	pop	r13
 b78:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 b7a:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_ZN5Print11printNumberEmh>

00000b7e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 b7e:	9a 01       	movw	r18, r20
  return print((long) n, base);
 b80:	ab 01       	movw	r20, r22
 b82:	77 0f       	add	r23, r23
 b84:	66 0b       	sbc	r22, r22
 b86:	77 0b       	sbc	r23, r23
 b88:	0c 94 77 05 	jmp	0xaee	; 0xaee <_ZN5Print5printEli>

00000b8c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 b96:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN5Print5printEii>
 b9a:	8c 01       	movw	r16, r24
  n += println();
 b9c:	ce 01       	movw	r24, r28
 b9e:	0e 94 09 05 	call	0xa12	; 0xa12 <_ZN5Print7printlnEv>
  return n;
}
 ba2:	80 0f       	add	r24, r16
 ba4:	91 1f       	adc	r25, r17
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	08 95       	ret

00000bb0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 bb0:	1f 92       	push	r1
 bb2:	0f 92       	push	r0
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	0f 92       	push	r0
 bb8:	11 24       	eor	r1, r1
 bba:	2f 93       	push	r18
 bbc:	3f 93       	push	r19
 bbe:	8f 93       	push	r24
 bc0:	9f 93       	push	r25
 bc2:	af 93       	push	r26
 bc4:	bf 93       	push	r27
 bc6:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <timer0_millis>
 bca:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <timer0_millis+0x1>
 bce:	a0 91 21 04 	lds	r26, 0x0421	; 0x800421 <timer0_millis+0x2>
 bd2:	b0 91 22 04 	lds	r27, 0x0422	; 0x800422 <timer0_millis+0x3>
 bd6:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <timer0_fract>
 bda:	23 e0       	ldi	r18, 0x03	; 3
 bdc:	23 0f       	add	r18, r19
 bde:	2d 37       	cpi	r18, 0x7D	; 125
 be0:	20 f4       	brcc	.+8      	; 0xbea <__vector_16+0x3a>
 be2:	01 96       	adiw	r24, 0x01	; 1
 be4:	a1 1d       	adc	r26, r1
 be6:	b1 1d       	adc	r27, r1
 be8:	05 c0       	rjmp	.+10     	; 0xbf4 <__vector_16+0x44>
 bea:	26 e8       	ldi	r18, 0x86	; 134
 bec:	23 0f       	add	r18, r19
 bee:	02 96       	adiw	r24, 0x02	; 2
 bf0:	a1 1d       	adc	r26, r1
 bf2:	b1 1d       	adc	r27, r1
 bf4:	20 93 1e 04 	sts	0x041E, r18	; 0x80041e <timer0_fract>
 bf8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <timer0_millis>
 bfc:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <timer0_millis+0x1>
 c00:	a0 93 21 04 	sts	0x0421, r26	; 0x800421 <timer0_millis+0x2>
 c04:	b0 93 22 04 	sts	0x0422, r27	; 0x800422 <timer0_millis+0x3>
 c08:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <timer0_overflow_count>
 c0c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <timer0_overflow_count+0x1>
 c10:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <timer0_overflow_count+0x2>
 c14:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <timer0_overflow_count+0x3>
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	b1 1d       	adc	r27, r1
 c1e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <timer0_overflow_count>
 c22:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <timer0_overflow_count+0x1>
 c26:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <timer0_overflow_count+0x2>
 c2a:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <timer0_overflow_count+0x3>
 c2e:	bf 91       	pop	r27
 c30:	af 91       	pop	r26
 c32:	9f 91       	pop	r25
 c34:	8f 91       	pop	r24
 c36:	3f 91       	pop	r19
 c38:	2f 91       	pop	r18
 c3a:	0f 90       	pop	r0
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	0f 90       	pop	r0
 c40:	1f 90       	pop	r1
 c42:	18 95       	reti

00000c44 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 c44:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 c46:	84 b5       	in	r24, 0x24	; 36
 c48:	82 60       	ori	r24, 0x02	; 2
 c4a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 c4c:	84 b5       	in	r24, 0x24	; 36
 c4e:	81 60       	ori	r24, 0x01	; 1
 c50:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 c52:	85 b5       	in	r24, 0x25	; 37
 c54:	82 60       	ori	r24, 0x02	; 2
 c56:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 c58:	85 b5       	in	r24, 0x25	; 37
 c5a:	81 60       	ori	r24, 0x01	; 1
 c5c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 c5e:	ee e6       	ldi	r30, 0x6E	; 110
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
 c64:	81 60       	ori	r24, 0x01	; 1
 c66:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 c68:	e1 e8       	ldi	r30, 0x81	; 129
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 c6e:	80 81       	ld	r24, Z
 c70:	82 60       	ori	r24, 0x02	; 2
 c72:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c74:	80 81       	ld	r24, Z
 c76:	81 60       	ori	r24, 0x01	; 1
 c78:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c7a:	e0 e8       	ldi	r30, 0x80	; 128
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	81 60       	ori	r24, 0x01	; 1
 c82:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c84:	e1 eb       	ldi	r30, 0xB1	; 177
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	80 81       	ld	r24, Z
 c8a:	84 60       	ori	r24, 0x04	; 4
 c8c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c8e:	e0 eb       	ldi	r30, 0xB0	; 176
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	80 81       	ld	r24, Z
 c94:	81 60       	ori	r24, 0x01	; 1
 c96:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c98:	ea e7       	ldi	r30, 0x7A	; 122
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	84 60       	ori	r24, 0x04	; 4
 ca0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 ca2:	80 81       	ld	r24, Z
 ca4:	82 60       	ori	r24, 0x02	; 2
 ca6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 ca8:	80 81       	ld	r24, Z
 caa:	81 60       	ori	r24, 0x01	; 1
 cac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 cae:	80 81       	ld	r24, Z
 cb0:	80 68       	ori	r24, 0x80	; 128
 cb2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 cb4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 cb8:	08 95       	ret

00000cba <__udivmodsi4>:
 cba:	a1 e2       	ldi	r26, 0x21	; 33
 cbc:	1a 2e       	mov	r1, r26
 cbe:	aa 1b       	sub	r26, r26
 cc0:	bb 1b       	sub	r27, r27
 cc2:	fd 01       	movw	r30, r26
 cc4:	0d c0       	rjmp	.+26     	; 0xce0 <__udivmodsi4_ep>

00000cc6 <__udivmodsi4_loop>:
 cc6:	aa 1f       	adc	r26, r26
 cc8:	bb 1f       	adc	r27, r27
 cca:	ee 1f       	adc	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	a2 17       	cp	r26, r18
 cd0:	b3 07       	cpc	r27, r19
 cd2:	e4 07       	cpc	r30, r20
 cd4:	f5 07       	cpc	r31, r21
 cd6:	20 f0       	brcs	.+8      	; 0xce0 <__udivmodsi4_ep>
 cd8:	a2 1b       	sub	r26, r18
 cda:	b3 0b       	sbc	r27, r19
 cdc:	e4 0b       	sbc	r30, r20
 cde:	f5 0b       	sbc	r31, r21

00000ce0 <__udivmodsi4_ep>:
 ce0:	66 1f       	adc	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	1a 94       	dec	r1
 cea:	69 f7       	brne	.-38     	; 0xcc6 <__udivmodsi4_loop>
 cec:	60 95       	com	r22
 cee:	70 95       	com	r23
 cf0:	80 95       	com	r24
 cf2:	90 95       	com	r25
 cf4:	9b 01       	movw	r18, r22
 cf6:	ac 01       	movw	r20, r24
 cf8:	bd 01       	movw	r22, r26
 cfa:	cf 01       	movw	r24, r30
 cfc:	08 95       	ret

00000cfe <__tablejump2__>:
 cfe:	ee 0f       	add	r30, r30
 d00:	ff 1f       	adc	r31, r31
 d02:	05 90       	lpm	r0, Z+
 d04:	f4 91       	lpm	r31, Z
 d06:	e0 2d       	mov	r30, r0
 d08:	09 94       	ijmp

00000d0a <_exit>:
 d0a:	f8 94       	cli

00000d0c <__stop_program>:
 d0c:	ff cf       	rjmp	.-2      	; 0xd0c <__stop_program>
